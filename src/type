act_info.c:            normalSn = skill_lookup( skill->name );
act_info.c:         if( !skill || !skill->name || skill->name[0] == '\0' )
act_info.c:         if( strcmp( skill->name, "reserved" ) == 0 && ( IS_IMMORTAL( ch ) || CAN_CAST( ch ) ) )
act_info.c:         if( skill->type != lasttype )
act_info.c:                                skill_tname[skill->type] );
act_info.c:         lasttype = skill->type;
act_info.c:             && ( skill->guild != CLASS_NONE && ( !IS_GUILDED( ch ) || ( ch->pcdata->clan->Class != skill->guild ) ) ) )
act_info.c:            if( skill->skill_level[mob->Class] > mob->level && skill->race_level[mob->race] > mob->level )
act_info.c:            if( ch->level >= skill->skill_level[ch->Class] )
act_info.c:            if( ch->level >= skill->race_level[ch->race] )
act_info.c:         pager_printf( ch, "%20.20s", skill->name );
act_info.c:            normalSn = skill_lookup( skill->name );
act_info.c:         if( !skill || !skill->name || skill->name[0] == '\0' )
act_info.c:         if( skill->type != lasttype )
act_info.c:            lasttype = skill->type;
act_info.c:         if( i == skill->skill_level[ch->Class] || i == skill->race_level[ch->race] )
act_info.c:            switch ( skill->minimum_position )
act_info.c:                  bug( "%s: skill with invalid minpos, skill=%s", __func__, skill->name );
act_info.c:                          skn, skill->name, ch->pcdata->learned[normalSn], skill->skill_adept[ch->Class], buf );
act_wiz.c:         skill->skill_level[cl] = level;
act_wiz.c:         skill->skill_adept[cl] = adept;
act_wiz.c:         ch_printf( ch, "Skill \"%s\" added at level %d and %d%%.\r\n", skill->name, level, adept );
agecommand.c:            normalSn = skill_lookup( skill->name );
agecommand.c:         if( !skill || !skill->name || skill->name[0] == '\0' )
agecommand.c:         if( strcmp( skill->name, "reserved" ) == 0 && ( IS_IMMORTAL( ch ) || !CAN_CAST( ch ) ) )
agecommand.c:         if( skill->type != lasttype )
agecommand.c:                                skill_tname[skill->type] );
agecommand.c:       lasttype = skill->type;
agecommand.c:             && ( skill->guild != CLASS_NONE && ( !IS_GUILDED( ch ) || ( ch->pcdata->clan->Class != skill->guild ) ) ) )
agecommand.c:            if( ch->level >= skill->skill_level[ch->Class] )
agecommand.c:            if( ch->level >= skill->race_level[ch->race] )
agecommand.c:         pager_printf( ch, "%18.18s", skill->name );
att:act_info.c:             && ( skill->guild != CLASS_NONE && ( !IS_GUILDED( ch ) || ( ch->pcdata->clan->Class != skill->guild ) ) ) )
att:act_info.c:            if( ch->level >= skill->skill_level[ch->Class] )
att:act_info.c:            if( ch->level >= skill->race_level[ch->race] )
att:act_info.c:         if( i == skill->skill_level[ch->Class] || i == skill->race_level[ch->race] )
att:act_info.c:                          skn, skill->name, ch->pcdata->learned[normalSn], skill->skill_adept[ch->Class], buf );
att:agecommand.c:             && ( skill->guild != CLASS_NONE && ( !IS_GUILDED( ch ) || ( ch->pcdata->clan->Class != skill->guild ) ) ) )
att:agecommand.c:            if( ch->level >= skill->skill_level[ch->Class] )
att:agecommand.c:            if( ch->level >= skill->race_level[ch->race] )
att:handler.c:            if( ( retcode = ( *skill->spell_fun ) ( mod, ch->level, ch, ch ) ) == rCHAR_DIED || char_died( ch ) )
att:handler.c.backup:            if( ( retcode = ( *skill->spell_fun ) ( mod, ch->level, ch, ch ) ) == rCHAR_DIED || char_died( ch ) )
att:magic.c:         if( ch->position < skill->minimum_position && !IS_NPC( ch ) )
att:magic.c:             && skill->guild != CLASS_NONE && ( !ch->pcdata->clan || skill->guild != ch->pcdata->clan->Class ) )
att:magic.c:         if( !ch->in_room || ( skill->spell_sector && !IS_SET( skill->spell_sector, ( 1 << ch->in_room->sector_type ) ) ) )
att:magic.c:         mana = IS_NPC( ch ) ? 0 : UMAX( skill->min_mana, 100 / ( 2 + ch->level - skill->skill_level[ch->Class] ) );
att:magic.c:            mana = IS_NPC( ch ) ? 0 : UMAX( skill->min_mana, 100 / ( 2 + ch->level - skill->skill_level[ch->Class] ) );
att:magic.c:         if( !ch->alloc_ptr || !IS_VALID_SN( sn ) || skill->type != SKILL_SPELL )
att:magic.c:         mana = IS_NPC( ch ) ? 0 : UMAX( skill->min_mana, 100 / ( 2 + ch->level - skill->skill_level[ch->Class] ) );
att:magic.c:   if( !IS_NPC( ch ) && ( number_percent(  ) + skill->difficulty * 5 ) > ch->pcdata->learned[sn] )
att:magic.c:         retcode = ( *skill->spell_fun ) ( sn, ch->level, ch, vo );
att:magic.c:   if( xIS_SET( ch->in_room->room_flags, ROOM_SAFE ) && skill->target == TAR_CHAR_OFFENSIVE )
att:magic.c:         if( skill->type != SKILL_HERB && IS_SET( ch->immune, RIS_MAGIC ) )
att:misc.c:            obj_cast_spell( sn, UMIN( skill->min_level, ch->level ), ch, ch, NULL );
att:modifier:update.c:                     if( ( *skill->spell_fun ) ( paf->modifier, ch->level, ch, ch ) == rCHAR_DIED || char_died( ch ) )
att:modifier:update.c:                     if( ( *skill->spell_fun ) ( paf->modifier, ch->level, ch, ch ) == rCHAR_DIED || char_died( ch ) )
att:update.c:                     if( ( *skill->spell_fun ) ( paf->modifier, ch->level, ch, ch ) == rCHAR_DIED || char_died( ch ) )
att:act_info.c:             && ( skill->guild != CLASS_NONE && ( !IS_GUILDED( ch ) || ( ch->pcdata->clan->Class != skill->guild ) ) ) )
att:act_info.c:            if( ch->level >= skill->skill_level[ch->Class] )
att:act_info.c:            if( ch->level >= skill->race_level[ch->race] )
att:act_info.c:         if( i == skill->skill_level[ch->Class] || i == skill->race_level[ch->race] )
att:act_info.c:                          skn, skill->name, ch->pcdata->learned[normalSn], skill->skill_adept[ch->Class], buf );
att:agecommand.c:             && ( skill->guild != CLASS_NONE && ( !IS_GUILDED( ch ) || ( ch->pcdata->clan->Class != skill->guild ) ) ) )
att:agecommand.c:            if( ch->level >= skill->skill_level[ch->Class] )
att:agecommand.c:            if( ch->level >= skill->race_level[ch->race] )
att:handler.c:            if( ( retcode = ( *skill->spell_fun ) ( mod, ch->level, ch, ch ) ) == rCHAR_DIED || char_died( ch ) )
att:handler.c.backup:            if( ( retcode = ( *skill->spell_fun ) ( mod, ch->level, ch, ch ) ) == rCHAR_DIED || char_died( ch ) )
att:magic.c:         if( ch->position < skill->minimum_position && !IS_NPC( ch ) )
att:magic.c:             && skill->guild != CLASS_NONE && ( !ch->pcdata->clan || skill->guild != ch->pcdata->clan->Class ) )
att:magic.c:         if( !ch->in_room || ( skill->spell_sector && !IS_SET( skill->spell_sector, ( 1 << ch->in_room->sector_type ) ) ) )
att:magic.c:         mana = IS_NPC( ch ) ? 0 : UMAX( skill->min_mana, 100 / ( 2 + ch->level - skill->skill_level[ch->Class] ) );
att:magic.c:            mana = IS_NPC( ch ) ? 0 : UMAX( skill->min_mana, 100 / ( 2 + ch->level - skill->skill_level[ch->Class] ) );
att:magic.c:         if( !ch->alloc_ptr || !IS_VALID_SN( sn ) || skill->type != SKILL_SPELL )
att:magic.c:         mana = IS_NPC( ch ) ? 0 : UMAX( skill->min_mana, 100 / ( 2 + ch->level - skill->skill_level[ch->Class] ) );
att:magic.c:   if( !IS_NPC( ch ) && ( number_percent(  ) + skill->difficulty * 5 ) > ch->pcdata->learned[sn] )
att:magic.c:         retcode = ( *skill->spell_fun ) ( sn, ch->level, ch, vo );
att:magic.c:   if( xIS_SET( ch->in_room->room_flags, ROOM_SAFE ) && skill->target == TAR_CHAR_OFFENSIVE )
att:magic.c:         if( skill->type != SKILL_HERB && IS_SET( ch->immune, RIS_MAGIC ) )
att:misc.c:            obj_cast_spell( sn, UMIN( skill->min_level, ch->level ), ch, ch, NULL );
att:modifier:update.c:                     if( ( *skill->spell_fun ) ( paf->modifier, ch->level, ch, ch ) == rCHAR_DIED || char_died( ch ) )
att:modifier:update.c:                     if( ( *skill->spell_fun ) ( paf->modifier, ch->level, ch, ch ) == rCHAR_DIED || char_died( ch ) )
att:update.c:                     if( ( *skill->spell_fun ) ( paf->modifier, ch->level, ch, ch ) == rCHAR_DIED || char_died( ch ) )
defense:act_info.c:             && ( skill->guild != CLASS_NONE && ( !IS_GUILDED( ch ) || ( ch->pcdata->clan->Class != skill->guild ) ) ) )
defense:act_info.c:                          skn, skill->name, ch->pcdata->learned[normalSn], skill->skill_adept[ch->Class], buf );
defense:agecommand.c:             && ( skill->guild != CLASS_NONE && ( !IS_GUILDED( ch ) || ( ch->pcdata->clan->Class != skill->guild ) ) ) )
defense:att:act_info.c:             && ( skill->guild != CLASS_NONE && ( !IS_GUILDED( ch ) || ( ch->pcdata->clan->Class != skill->guild ) ) ) )
defense:att:act_info.c:                          skn, skill->name, ch->pcdata->learned[normalSn], skill->skill_adept[ch->Class], buf );
defense:att:agecommand.c:             && ( skill->guild != CLASS_NONE && ( !IS_GUILDED( ch ) || ( ch->pcdata->clan->Class != skill->guild ) ) ) )
defense:att:magic.c:             && skill->guild != CLASS_NONE && ( !ch->pcdata->clan || skill->guild != ch->pcdata->clan->Class ) )
defense:att:magic.c:   if( !IS_NPC( ch ) && ( number_percent(  ) + skill->difficulty * 5 ) > ch->pcdata->learned[sn] )
defense:att:act_info.c:             && ( skill->guild != CLASS_NONE && ( !IS_GUILDED( ch ) || ( ch->pcdata->clan->Class != skill->guild ) ) ) )
defense:att:act_info.c:                          skn, skill->name, ch->pcdata->learned[normalSn], skill->skill_adept[ch->Class], buf );
defense:att:agecommand.c:             && ( skill->guild != CLASS_NONE && ( !IS_GUILDED( ch ) || ( ch->pcdata->clan->Class != skill->guild ) ) ) )
defense:att:magic.c:             && skill->guild != CLASS_NONE && ( !ch->pcdata->clan || skill->guild != ch->pcdata->clan->Class ) )
defense:att:magic.c:   if( !IS_NPC( ch ) && ( number_percent(  ) + skill->difficulty * 5 ) > ch->pcdata->learned[sn] )
defense:magic.c:             && skill->guild != CLASS_NONE && ( !ch->pcdata->clan || skill->guild != ch->pcdata->clan->Class ) )
defense:magic.c:   if( !IS_NPC( ch ) && ( number_percent(  ) + skill->difficulty * 5 ) > ch->pcdata->learned[sn] )
defense:act_info.c:             && ( skill->guild != CLASS_NONE && ( !IS_GUILDED( ch ) || ( ch->pcdata->clan->Class != skill->guild ) ) ) )
defense:act_info.c:                          skn, skill->name, ch->pcdata->learned[normalSn], skill->skill_adept[ch->Class], buf );
defense:agecommand.c:             && ( skill->guild != CLASS_NONE && ( !IS_GUILDED( ch ) || ( ch->pcdata->clan->Class != skill->guild ) ) ) )
defense:att:act_info.c:             && ( skill->guild != CLASS_NONE && ( !IS_GUILDED( ch ) || ( ch->pcdata->clan->Class != skill->guild ) ) ) )
defense:att:act_info.c:                          skn, skill->name, ch->pcdata->learned[normalSn], skill->skill_adept[ch->Class], buf );
defense:att:agecommand.c:             && ( skill->guild != CLASS_NONE && ( !IS_GUILDED( ch ) || ( ch->pcdata->clan->Class != skill->guild ) ) ) )
defense:att:magic.c:             && skill->guild != CLASS_NONE && ( !ch->pcdata->clan || skill->guild != ch->pcdata->clan->Class ) )
defense:att:magic.c:   if( !IS_NPC( ch ) && ( number_percent(  ) + skill->difficulty * 5 ) > ch->pcdata->learned[sn] )
defense:att:act_info.c:             && ( skill->guild != CLASS_NONE && ( !IS_GUILDED( ch ) || ( ch->pcdata->clan->Class != skill->guild ) ) ) )
defense:att:act_info.c:                          skn, skill->name, ch->pcdata->learned[normalSn], skill->skill_adept[ch->Class], buf );
defense:att:agecommand.c:             && ( skill->guild != CLASS_NONE && ( !IS_GUILDED( ch ) || ( ch->pcdata->clan->Class != skill->guild ) ) ) )
defense:att:magic.c:             && skill->guild != CLASS_NONE && ( !ch->pcdata->clan || skill->guild != ch->pcdata->clan->Class ) )
defense:att:magic.c:   if( !IS_NPC( ch ) && ( number_percent(  ) + skill->difficulty * 5 ) > ch->pcdata->learned[sn] )
defense:magic.c:             && skill->guild != CLASS_NONE && ( !ch->pcdata->clan || skill->guild != ch->pcdata->clan->Class ) )
defense:magic.c:   if( !IS_NPC( ch ) && ( number_percent(  ) + skill->difficulty * 5 ) > ch->pcdata->learned[sn] )
fight.c:               if( paf->type > 0 && skill && skill->msg_off )
fight.c:                  send_to_char( skill->msg_off, ch );
fight.c:         if( skill->imm_char && skill->imm_char[0] != '\0' )
fight.c:            act( AT_HIT, skill->imm_char, ch, NULL, victim, TO_CHAR );
fight.c:         if( skill->imm_vict && skill->imm_vict[0] != '\0' )
fight.c:            act( AT_HITME, skill->imm_vict, ch, NULL, victim, TO_VICT );
fight.c:         if( skill->imm_room && skill->imm_room[0] != '\0' )
fight.c:            act( AT_ACTION, skill->imm_room, ch, NULL, victim, TO_NOTVICT );
fight.c:         if( skill->imm_char && skill->imm_char[0] != '\0' )
fight.c:            act( AT_HIT, skill->imm_char, ch, NULL, victim, TO_CHAR );
fight.c:         if( skill->imm_vict && skill->imm_vict[0] != '\0' )
fight.c:            act( AT_HITME, skill->imm_vict, ch, NULL, victim, TO_VICT );
fight.c:         if( skill->imm_room && skill->imm_room[0] != '\0' )
fight.c:            act( AT_ACTION, skill->imm_room, ch, NULL, victim, TO_NOTVICT );
fight.c:            if( skill->imm_char && skill->imm_char[0] != '\0' )
fight.c:               act( AT_HIT, skill->imm_char, ch, NULL, victim, TO_CHAR );
fight.c:            if( skill->imm_vict && skill->imm_vict[0] != '\0' )
fight.c:               act( AT_HITME, skill->imm_vict, ch, NULL, victim, TO_VICT );
fight.c:            if( skill->imm_room && skill->imm_room[0] != '\0' )
fight.c:               act( AT_ACTION, skill->imm_room, ch, NULL, victim, TO_NOTVICT );
fight.c:            if( skill->die_char && skill->die_char[0] != '\0' )
fight.c:               act( AT_DEAD, skill->die_char, ch, NULL, victim, TO_CHAR );
fight.c:            if( skill->die_vict && skill->die_vict[0] != '\0' )
fight.c:               act( AT_DEAD, skill->die_vict, ch, NULL, victim, TO_VICT );
fight.c:            if( skill->die_room && skill->die_room[0] != '\0' )
fight.c:               act( AT_DEAD, skill->die_room, ch, NULL, victim, TO_NOTVICT );
fight.c:         attack = skill->noun_damage;
fight.c:            if( skill->miss_char && skill->miss_char[0] != '\0' )
fight.c:               act( AT_HIT, skill->miss_char, ch, NULL, victim, TO_CHAR );
fight.c:            if( skill->miss_vict && skill->miss_vict[0] != '\0' )
fight.c:               act( AT_HITME, skill->miss_vict, ch, NULL, victim, TO_VICT );
fight.c:            if( skill->miss_room && skill->miss_room[0] != '\0' )
fight.c:               if( str_cmp( skill->miss_room, "supress" ) )
fight.c:                  act( AT_ACTION, skill->miss_room, ch, NULL, victim, TO_NOTVICT );
fight.c:            if( skill->hit_char && skill->hit_char[0] != '\0' )
fight.c:               act( AT_HIT, skill->hit_char, ch, NULL, victim, TO_CHAR );
fight.c:            if( skill->hit_vict && skill->hit_vict[0] != '\0' )
fight.c:               act( AT_HITME, skill->hit_vict, ch, NULL, victim, TO_VICT );
fight.c:            if( skill->hit_room && skill->hit_room[0] != '\0' )
fight.c:               act( AT_ACTION, skill->hit_room, ch, NULL, victim, TO_NOTVICT );
fight.c.orig:               if( paf->type > 0 && skill && skill->msg_off )
fight.c.orig:                  send_to_char( skill->msg_off, ch );
fight.c.orig:         if( skill->imm_char && skill->imm_char[0] != '\0' )
fight.c.orig:            act( AT_HIT, skill->imm_char, ch, NULL, victim, TO_CHAR );
fight.c.orig:         if( skill->imm_vict && skill->imm_vict[0] != '\0' )
fight.c.orig:            act( AT_HITME, skill->imm_vict, ch, NULL, victim, TO_VICT );
fight.c.orig:         if( skill->imm_room && skill->imm_room[0] != '\0' )
fight.c.orig:            act( AT_ACTION, skill->imm_room, ch, NULL, victim, TO_NOTVICT );
fight.c.orig:         if( skill->imm_char && skill->imm_char[0] != '\0' )
fight.c.orig:            act( AT_HIT, skill->imm_char, ch, NULL, victim, TO_CHAR );
fight.c.orig:         if( skill->imm_vict && skill->imm_vict[0] != '\0' )
fight.c.orig:            act( AT_HITME, skill->imm_vict, ch, NULL, victim, TO_VICT );
fight.c.orig:         if( skill->imm_room && skill->imm_room[0] != '\0' )
fight.c.orig:            act( AT_ACTION, skill->imm_room, ch, NULL, victim, TO_NOTVICT );
fight.c.orig:            if( skill->imm_char && skill->imm_char[0] != '\0' )
fight.c.orig:               act( AT_HIT, skill->imm_char, ch, NULL, victim, TO_CHAR );
fight.c.orig:            if( skill->imm_vict && skill->imm_vict[0] != '\0' )
fight.c.orig:               act( AT_HITME, skill->imm_vict, ch, NULL, victim, TO_VICT );
fight.c.orig:            if( skill->imm_room && skill->imm_room[0] != '\0' )
fight.c.orig:               act( AT_ACTION, skill->imm_room, ch, NULL, victim, TO_NOTVICT );
fight.c.orig:            if( skill->die_char && skill->die_char[0] != '\0' )
fight.c.orig:               act( AT_DEAD, skill->die_char, ch, NULL, victim, TO_CHAR );
fight.c.orig:            if( skill->die_vict && skill->die_vict[0] != '\0' )
fight.c.orig:               act( AT_DEAD, skill->die_vict, ch, NULL, victim, TO_VICT );
fight.c.orig:            if( skill->die_room && skill->die_room[0] != '\0' )
fight.c.orig:               act( AT_DEAD, skill->die_room, ch, NULL, victim, TO_NOTVICT );
fight.c.orig:         attack = skill->noun_damage;
fight.c.orig:            if( skill->miss_char && skill->miss_char[0] != '\0' )
fight.c.orig:               act( AT_HIT, skill->miss_char, ch, NULL, victim, TO_CHAR );
fight.c.orig:            if( skill->miss_vict && skill->miss_vict[0] != '\0' )
fight.c.orig:               act( AT_HITME, skill->miss_vict, ch, NULL, victim, TO_VICT );
fight.c.orig:            if( skill->miss_room && skill->miss_room[0] != '\0' )
fight.c.orig:               if( str_cmp( skill->miss_room, "supress" ) )
fight.c.orig:                  act( AT_ACTION, skill->miss_room, ch, NULL, victim, TO_NOTVICT );
fight.c.orig:            if( skill->hit_char && skill->hit_char[0] != '\0' )
fight.c.orig:               act( AT_HIT, skill->hit_char, ch, NULL, victim, TO_CHAR );
fight.c.orig:            if( skill->hit_vict && skill->hit_vict[0] != '\0' )
fight.c.orig:               act( AT_HITME, skill->hit_vict, ch, NULL, victim, TO_VICT );
fight.c.orig:            if( skill->hit_room && skill->hit_room[0] != '\0' )
fight.c.orig:               act( AT_ACTION, skill->hit_room, ch, NULL, victim, TO_NOTVICT );
handler.c:         if( IS_VALID_SN( mod ) && ( skill = skill_table[mod] ) != NULL && skill->type == SKILL_SPELL )
handler.c:         if( !IS_VALID_SN( mod ) || ( skill = skill_table[mod] ) == NULL || skill->type != SKILL_SPELL )
handler.c:         if( IS_VALID_SN( mod ) && ( skill = skill_table[mod] ) != NULL && skill->type == SKILL_SPELL )
handler.c:            if( skill->target == TAR_IGNORE || skill->target == TAR_OBJ_INV )
handler.c:            if( ( retcode = ( *skill->spell_fun ) ( mod, ch->level, ch, ch ) ) == rCHAR_DIED || char_died( ch ) )
hotboot.c:                  skill->name, paf->duration, paf->modifier, paf->location, print_bitvector( &paf->bitvector ) );
level:magic.c:   obj->timer = skill->dice ? dice_parse( ch, level, skill->dice ) : 0;
magic.c:   short chitroom = ( skill->type == SKILL_SPELL ? AT_MAGIC : AT_ACTION );
magic.c:   short chit = ( skill->type == SKILL_SPELL ? AT_MAGIC : AT_HIT );
magic.c:   if( skill->target != TAR_CHAR_OFFENSIVE )
magic.c:      if( skill->hit_char && skill->hit_char[0] != '\0' )
magic.c:         if( str_cmp( skill->hit_char, SPELL_SILENT_MARKER ) )
magic.c:            act( AT_MAGIC, skill->hit_char, ch, obj, victim, TO_CHAR );
magic.c:      else if( skill->type == SKILL_SPELL )
magic.c:   if( ch && skill->hit_room && skill->hit_room[0] != '\0' && str_cmp( skill->hit_room, SPELL_SILENT_MARKER ) )
magic.c:      act( AT_MAGIC, skill->hit_room, ch, obj, victim, TO_NOTVICT );
magic.c:   if( ch && victim && skill->hit_vict && skill->hit_vict[0] != '\0' )
magic.c:      if( str_cmp( skill->hit_vict, SPELL_SILENT_MARKER ) )
magic.c:            act( AT_MAGIC, skill->hit_vict, ch, obj, victim, TO_VICT );
magic.c:            act( AT_MAGIC, skill->hit_vict, ch, obj, victim, TO_CHAR );
magic.c:   else if( ch && ch == victim && skill->type == SKILL_SPELL )
magic.c:   else if( ch && ch == victim && skill->type == SKILL_SKILL )
magic.c:      if( skill->hit_char && ( skill->hit_char[0] != '\0' ) )
magic.c:         act( chit, skill->hit_char, ch, obj, victim, TO_CHAR );
magic.c:   short chitroom = ( skill->type == SKILL_SPELL ? AT_MAGIC : AT_ACTION );
magic.c:   short chitme = ( skill->type == SKILL_SPELL ? AT_MAGIC : AT_HITME );
magic.c:   if( skill->target != TAR_CHAR_OFFENSIVE )
magic.c:      if( skill->miss_char && skill->miss_char[0] != '\0' )
magic.c:         if( str_cmp( skill->miss_char, SPELL_SILENT_MARKER ) )
magic.c:            act( AT_MAGIC, skill->miss_char, ch, obj, victim, TO_CHAR );
magic.c:      else if( skill->type == SKILL_SPELL )
magic.c:   if( ch && skill->miss_room && skill->miss_room[0] != '\0' && str_cmp( skill->miss_room, SPELL_SILENT_MARKER ) && str_cmp( skill->miss_room, "supress" ) )   /* Back Compat -- Alty */
magic.c:      act( AT_MAGIC, skill->miss_room, ch, obj, victim, TO_NOTVICT );
magic.c:   if( ch && victim && skill->miss_vict && skill->miss_vict[0] != '\0' )
magic.c:      if( str_cmp( skill->miss_vict, SPELL_SILENT_MARKER ) )
magic.c:            act( AT_MAGIC, skill->miss_vict, ch, obj, victim, TO_VICT );
magic.c:            act( AT_MAGIC, skill->miss_vict, ch, obj, victim, TO_CHAR );
magic.c:      if( skill->miss_char && skill->miss_char[0] != '\0' )
magic.c:         if( str_cmp( skill->miss_char, SPELL_SILENT_MARKER ) )
magic.c:            act( AT_MAGIC, skill->miss_char, ch, obj, victim, TO_CHAR );
magic.c:      else if( skill->type == SKILL_SPELL )
magic.c:   short chitroom = ( skill->type == SKILL_SPELL ? AT_MAGIC : AT_ACTION );
magic.c:   short chit = ( skill->type == SKILL_SPELL ? AT_MAGIC : AT_HIT );
magic.c:   if( skill->target != TAR_CHAR_OFFENSIVE )
magic.c:      if( skill->imm_char && skill->imm_char[0] != '\0' )
magic.c:         if( str_cmp( skill->imm_char, SPELL_SILENT_MARKER ) )
magic.c:            act( AT_MAGIC, skill->imm_char, ch, obj, victim, TO_CHAR );
magic.c:      else if( skill->miss_char && skill->miss_char[0] != '\0' )
magic.c:         if( str_cmp( skill->miss_char, SPELL_SILENT_MARKER ) )
magic.c:            act( AT_MAGIC, skill->miss_char, ch, obj, victim, TO_CHAR );
magic.c:      else if( skill->type == SKILL_SPELL || skill->type == SKILL_SKILL )
magic.c:   if( ch && skill->imm_room && skill->imm_room[0] != '\0' )
magic.c:      if( str_cmp( skill->imm_room, SPELL_SILENT_MARKER ) )
magic.c:         act( AT_MAGIC, skill->imm_room, ch, obj, victim, TO_NOTVICT );
magic.c:   else if( ch && skill->miss_room && skill->miss_room[0] != '\0' )
magic.c:      if( str_cmp( skill->miss_room, SPELL_SILENT_MARKER ) )
magic.c:         act( AT_MAGIC, skill->miss_room, ch, obj, victim, TO_NOTVICT );
magic.c:   if( ch && victim && skill->imm_vict && skill->imm_vict[0] != '\0' )
magic.c:      if( str_cmp( skill->imm_vict, SPELL_SILENT_MARKER ) )
magic.c:            act( AT_MAGIC, skill->imm_vict, ch, obj, victim, TO_VICT );
magic.c:            act( AT_MAGIC, skill->imm_vict, ch, obj, victim, TO_CHAR );
magic.c:   else if( ch && victim && skill->miss_vict && skill->miss_vict[0] != '\0' )
magic.c:      if( str_cmp( skill->miss_vict, SPELL_SILENT_MARKER ) )
magic.c:            act( AT_MAGIC, skill->miss_vict, ch, obj, victim, TO_VICT );
magic.c:            act( AT_MAGIC, skill->miss_vict, ch, obj, victim, TO_CHAR );
magic.c:      if( skill->imm_char && skill->imm_char[0] != '\0' )
magic.c:         if( str_cmp( skill->imm_char, SPELL_SILENT_MARKER ) )
magic.c:            act( AT_MAGIC, skill->imm_char, ch, obj, victim, TO_CHAR );
magic.c:      else if( skill->miss_char && skill->miss_char[0] != '\0' )
magic.c:         if( str_cmp( skill->miss_char, SPELL_SILENT_MARKER ) )
magic.c:            act( AT_MAGIC, skill->miss_char, ch, obj, victim, TO_CHAR );
magic.c:      else if( skill->type == SKILL_SPELL || skill->type == SKILL_SKILL )
magic.c:   for( pName = skill->name; *pName != '\0'; pName += length )
magic.c:   snprintf( buf, MAX_STRING_LENGTH, "$n utters the words, '%s'.", skill->name );
magic.c:   const char *comp = skill->components;
magic.c:   switch ( skill->target )
magic.c:            if( skill->type != SKILL_SPELL )
magic.c:            if( !skill->spell_fun )
magic.c:         if( ch->position < skill->minimum_position && !IS_NPC( ch ) )
magic.c:                  if( skill->minimum_position <= POS_EVASIVE )
magic.c:                  if( skill->minimum_position <= POS_EVASIVE )
magic.c:                  if( skill->minimum_position <= POS_EVASIVE )
magic.c:                  if( skill->minimum_position <= POS_EVASIVE )
magic.c:         if( skill->spell_fun == spell_null )
magic.c:         if( !skill->spell_fun )
magic.c:             && skill->guild != CLASS_NONE && ( !ch->pcdata->clan || skill->guild != ch->pcdata->clan->Class ) )
magic.c:         if( !ch->in_room || ( skill->spell_sector && !IS_SET( skill->spell_sector, ( 1 << ch->in_room->sector_type ) ) ) )
magic.c:         mana = IS_NPC( ch ) ? 0 : UMAX( skill->min_mana, 100 / ( 2 + ch->level - skill->skill_level[ch->Class] ) );
magic.c:         if( skill->participants <= 1 )
magic.c:         add_timer( ch, TIMER_DO_FUN, UMIN( skill->beats / 10, 3 ), do_cast, 1 );
magic.c:            mana = IS_NPC( ch ) ? 0 : UMAX( skill->min_mana, 100 / ( 2 + ch->level - skill->skill_level[ch->Class] ) );
magic.c:         if( !ch->alloc_ptr || !IS_VALID_SN( sn ) || skill->type != SKILL_SPELL )
magic.c:         mana = IS_NPC( ch ) ? 0 : UMAX( skill->min_mana, 100 / ( 2 + ch->level - skill->skill_level[ch->Class] ) );
magic.c:         if( skill->participants > 1 )
magic.c:            if( cnt >= skill->participants )
magic.c:   if( str_cmp( skill->name, "ventriloquate" ) )
magic.c:      WAIT_STATE( ch, skill->beats );
magic.c:   if( !IS_NPC( ch ) && ( number_percent(  ) + skill->difficulty * 5 ) > ch->pcdata->learned[sn] )
magic.c:      if( ( ( skill->target == TAR_CHAR_DEFENSIVE
magic.c:              || skill->target == TAR_CHAR_SELF ) && victim && IS_SET( victim->immune, RIS_MAGIC ) ) )
magic.c:         retcode = ( *skill->spell_fun ) ( sn, ch->level, ch, vo );
magic.c:         update_userec( &time_used, &skill->userec );
magic.c:   if( victim && victim != ch && !IS_NPC( victim ) && skill->target == TAR_CHAR_DEFENSIVE )
magic.c:   if( victim && victim != ch && !IS_NPC( ch ) && skill->target == TAR_CHAR_DEFENSIVE )
magic.c:   if( victim && victim != ch && !IS_NPC( ch ) && skill->target == TAR_CHAR_OFFENSIVE )
magic.c:   if( skill->target == TAR_CHAR_OFFENSIVE && victim && !char_died( victim ) && victim != ch )
magic.c:   if( !skill || !skill->spell_fun )
magic.c:   if( xIS_SET( ch->in_room->room_flags, ROOM_SAFE ) && skill->target == TAR_CHAR_OFFENSIVE )
magic.c:   if( ch != victim && ( skill->target == TAR_CHAR_OFFENSIVE || number_bits( 7 ) == 1 )   /* 1/128 chance if non-offensive */
magic.c:       && skill->type != SKILL_HERB && !chance( ch, 95 + levdiff ) )
magic.c:            act( AT_MAGIC, "The $t spell backfires!", ch, skill->name, victim, TO_CHAR );
magic.c:               act( AT_MAGIC, "$n's $t spell backfires!", ch, skill->name, victim, TO_VICT );
magic.c:            act( AT_MAGIC, "$n's $t spell backfires!", ch, skill->name, victim, TO_NOTVICT );
magic.c:            act( AT_MAGIC, "The $t spell backfires!", ch, skill->name, victim, TO_CHAR );
magic.c:               act( AT_MAGIC, "$n's $t spell backfires!", ch, skill->name, victim, TO_VICT );
magic.c:            act( AT_MAGIC, "$n's $t spell backfires!", ch, skill->name, victim, TO_NOTVICT );
magic.c:   switch ( skill->target )
magic.c:         if( skill->type != SKILL_HERB && IS_SET( victim->immune, RIS_MAGIC ) )
magic.c:         if( skill->type != SKILL_HERB && IS_SET( ch->immune, RIS_MAGIC ) )
magic.c:   retcode = ( *skill->spell_fun ) ( sn, level, ch, vo );
magic.c:   update_userec( &time_used, &skill->userec );
magic.c:   if( skill->target == TAR_CHAR_OFFENSIVE && victim != ch && !char_died( victim ) )
magic.c:   if( skill->hit_char && skill->hit_char[0] != '\0' )
magic.c:      act( AT_MAGIC, skill->hit_char, ch, NULL, victim, TO_CHAR );
magic.c:   if( skill->hit_vict && skill->hit_vict[0] != '\0' )
magic.c:      act( AT_MAGIC, skill->hit_vict, ch, NULL, victim, TO_VICT );
magic.c:   if( skill->hit_room && skill->hit_room[0] != '\0' )
magic.c:      act( AT_MAGIC, skill->hit_room, ch, NULL, victim, TO_NOTVICT );
magic.c:   if( skill->hit_dest && skill->hit_dest[0] != '\0' )
magic.c:      act( AT_MAGIC, skill->hit_dest, ch, NULL, victim, TO_NOTVICT );
magic.c:   if( !skill->hit_char || skill->hit_char[0] == '\0' )
magic.c:      act( AT_MAGIC, skill->hit_char, ch, NULL, victim, TO_CHAR );
magic.c:   if( !skill->hit_room || skill->hit_room[0] == '\0' )
magic.c:      act( AT_MAGIC, skill->hit_room, ch, NULL, victim, TO_ROOM );
magic.c:   if( !skill->hit_vict || skill->hit_vict[0] == '\0' )
magic.c:      act( AT_MAGIC, skill->hit_vict, victim, NULL, victim, TO_ROOM );
magic.c:   if( skill->saves )
magic.c:      switch ( skill->saves )
magic.c:   if( skill->dice )
magic.c:      dam = UMAX( 0, dice_parse( ch, level, skill->dice ) );
magic.c:            act( AT_MAGIC, "$N absorbs your $t!", ch, skill->noun_damage, victim, TO_CHAR );
magic.c:            act( AT_MAGIC, "You absorb $N's $t!", victim, skill->noun_damage, ch, TO_CHAR );
magic.c:            act( AT_MAGIC, "$N absorbs $n's $t!", ch, skill->noun_damage, victim, TO_NOTVICT );
magic.c:            if( skill->first_affect )
magic.c:   if( retcode == rNONE && skill->first_affect
magic.c:   affects = ( skill->first_affect ? TRUE : FALSE );
magic.c:   if( skill->hit_char && skill->hit_char[0] != '\0' )
magic.c:      act( AT_MAGIC, skill->hit_char, ch, NULL, NULL, TO_CHAR );
magic.c:   if( skill->hit_room && skill->hit_room[0] != '\0' )
magic.c:      act( AT_MAGIC, skill->hit_room, ch, NULL, NULL, TO_ROOM );
magic.c:      else if( skill->dice )
magic.c:         dam = dice_parse( ch, level, skill->dice );
magic.c:               act( AT_MAGIC, "$N absorbs your $t!", ch, skill->noun_damage, vch, TO_CHAR );
magic.c:               act( AT_MAGIC, "You absorb $N's $t!", vch, skill->noun_damage, ch, TO_CHAR );
magic.c:               act( AT_MAGIC, "$N absorbs $n's $t!", ch, skill->noun_damage, vch, TO_NOTVICT );
magic.c:   for( saf = skill->first_affect; saf; saf = saf->next )
magic.c:   if( !skill->first_affect )
magic.c:      if( ( skill->type != SKILL_HERB
magic.c:      if( ( saf = skill->first_affect ) && !saf->next
magic.c:      if( skill->hit_char && skill->hit_char[0] != '\0' )
magic.c:         if( strstr( skill->hit_char, "$N" ) )
magic.c:            act( AT_MAGIC, skill->hit_char, ch, NULL, NULL, TO_CHAR );
magic.c:      if( skill->hit_room && skill->hit_room[0] != '\0' )
magic.c:         if( strstr( skill->hit_room, "$N" ) )
magic.c:            act( AT_MAGIC, skill->hit_room, ch, NULL, NULL, TO_ROOM );
magic.c:      if( skill->hit_vict && skill->hit_vict[0] != '\0' )
magic.c:            act( AT_MAGIC, skill->hit_vict, ch, NULL, victim, TO_VICT );
magic.c:               act( AT_MAGIC, skill->hit_room, ch, NULL, victim, TO_NOTVICT );
magic.c:               act( AT_MAGIC, skill->hit_room, ch, NULL, victim, TO_CHAR );
magic.c:            act( AT_MAGIC, skill->hit_room, ch, NULL, victim, TO_ROOM );
magic.c:               act( AT_MAGIC, skill->hit_vict, ch, NULL, ch, TO_CHAR );
magic.c:               act( AT_MAGIC, skill->hit_char, ch, NULL, ch, TO_CHAR );
magic.c:            act( AT_MAGIC, skill->hit_char, ch, NULL, victim, TO_CHAR );
magic.c:            water = UMIN( ( skill->dice ? dice_parse( ch, level, skill->dice ) : level )
magic.c:               clone->timer = skill->dice ? dice_parse( ch, level, skill->dice ) : 0;
magic.c:         if( IS_OBJ_STAT( obj, ITEM_INVIS ) || chance( ch, skill->dice ? dice_parse( ch, level, skill->dice ) : 20 ) )
magic.c:   int vnum = skill->value;
magic.c:   obj->timer = skill->dice ? dice_parse( ch, level, skill->dice ) : 0;
magic.c:   int vnum = skill->value;
magic.c:   mob->level = UMIN( lvl, skill->dice ? dice_parse( ch, level, skill->dice ) : mob->level );
magic.c:   switch ( skill->target )
magic.c:         if( skill->range > 0 && ( ( SPELL_ACTION( skill ) == SA_DESTROY
magic.c:            return ranged_attack( ch, ranged_target_name, NULL, NULL, sn, skill->range );
misc.c:         WAIT_STATE( ch, skill->beats );
misc.c:         if( skill->spell_fun )
misc.c:            obj_cast_spell( sn, UMIN( skill->min_level, ch->level ), ch, ch, NULL );
modifier:fight.c:               if( paf->type > 0 && skill && skill->msg_off )
modifier:fight.c.backup:               if( paf->type > 0 && skill && skill->msg_off )
modifier:hotboot.c:                  skill->name, paf->duration, paf->modifier, paf->location, print_bitvector( &paf->bitvector ) );
modifier:save.c:                  skill->name, paf->duration, paf->modifier, paf->location, print_bitvector( &paf->bitvector ) );
modifier:update.c:                      && ( skill = skill_table[paf->modifier] ) != NULL && skill->type == SKILL_SPELL )
modifier:update.c:                     if( ( *skill->spell_fun ) ( paf->modifier, ch->level, ch, ch ) == rCHAR_DIED || char_died( ch ) )
modifier:fight.c:               if( paf->type > 0 && skill && skill->msg_off )
modifier:fight.c.backup:               if( paf->type > 0 && skill && skill->msg_off )
modifier:hotboot.c:                  skill->name, paf->duration, paf->modifier, paf->location, print_bitvector( &paf->bitvector ) );
modifier:save.c:                  skill->name, paf->duration, paf->modifier, paf->location, print_bitvector( &paf->bitvector ) );
modifier:update.c:                      && ( skill = skill_table[paf->modifier] ) != NULL && skill->type == SKILL_SPELL )
modifier:update.c:                     if( ( *skill->spell_fun ) ( paf->modifier, ch->level, ch, ch ) == rCHAR_DIED || char_died( ch ) )
player.c:            ch_printf( ch, "%-18s\r\n", skill->name );
save.c:                  skill->name, paf->duration, paf->modifier, paf->location, print_bitvector( &paf->bitvector ) );
skills.c:   if( skill->first_affect )
skills.c:      for( aff = skill->first_affect; aff; aff = aff_next )
skills.c:         UNLINK( aff, skill->first_affect, skill->last_affect, next, prev );
skills.c:   DISPOSE( skill->name );
skills.c:   DISPOSE( skill->noun_damage );
skills.c:   DISPOSE( skill->msg_off );
skills.c:   DISPOSE( skill->hit_char );
skills.c:   DISPOSE( skill->hit_vict );
skills.c:   DISPOSE( skill->hit_room );
skills.c:   DISPOSE( skill->hit_dest );
skills.c:   DISPOSE( skill->miss_char );
skills.c:   DISPOSE( skill->miss_vict );
skills.c:   DISPOSE( skill->miss_room );
skills.c:   DISPOSE( skill->die_char );
skills.c:   DISPOSE( skill->die_vict );
skills.c:   DISPOSE( skill->die_room );
skills.c:   DISPOSE( skill->imm_char );
skills.c:   DISPOSE( skill->imm_vict );
skills.c:   DISPOSE( skill->imm_room );
skills.c:   DISPOSE( skill->dice );
skills.c:   if( skill->spell_fun_name )
skills.c:      DISPOSE( skill->spell_fun_name );
skills.c:   if( skill->skill_fun_name )
skills.c:      DISPOSE( skill->skill_fun_name );
skills.c:   DISPOSE( skill->components );
skills.c:   DISPOSE( skill->teachers );
skills.c:   skill->spell_fun = NULL;
skills.c:   skill->skill_fun = NULL;
skills.c:      ch_printf( ch, "Sn: %4d Slot: %4d %s: '%-20s'\r\n", sn, skill->slot, skill_tname[skill->type], skill->name );
skills.c:      if( skill->info )
skills.c:      if( skill->flags )
skills.c:                 spell_saves[( int )skill->saves], spell_save_effect[SPELL_SAVE( skill )] );
skills.c:      if( skill->difficulty != '\0' )
skills.c:         ch_printf( ch, "Difficulty: %d\r\n", ( int )skill->difficulty );
skills.c:                 skill_tname[skill->type],
skills.c:                 target_type[URANGE( TAR_IGNORE, skill->target, TAR_OBJ_INV )],
skills.c:                 skill->minimum_position, skill->min_mana, skill->beats, skill->range );
skills.c:                 skill->flags,
skills.c:                 skill->guild, skill->value, skill->info, skill->skill_fun ? skill->skill_fun_name : skill->spell_fun_name );
skills.c:      ch_printf( ch, "Sectors Allowed: %s\n", skill->spell_sector ? flag_string( skill->spell_sector, sec_flags ) : "All" );
skills.c:      ch_printf( ch, "Dammsg: %s\r\nWearoff: %s\n", skill->noun_damage, skill->msg_off ? skill->msg_off : "(none set)" );
skills.c:      if( skill->dice && skill->dice[0] != '\0' )
skills.c:         ch_printf( ch, "Dice: %s\r\n", skill->dice );
skills.c:      if( skill->teachers && skill->teachers[0] != '\0' )
skills.c:         ch_printf( ch, "Teachers: %s\r\n", skill->teachers );
skills.c:      if( skill->components && skill->components[0] != '\0' )
skills.c:         ch_printf( ch, "Components: %s\r\n", skill->components );
skills.c:      if( skill->participants )
skills.c:         ch_printf( ch, "Participants: %d\r\n", ( int )skill->participants );
skills.c:      if( skill->userec.num_uses )
skills.c:         send_timer( &skill->userec, ch );
skills.c:      for( aff = skill->first_affect; aff; aff = aff->next )
skills.c:         if( aff == skill->first_affect )
skills.c:      if( skill->hit_char && skill->hit_char[0] != '\0' )
skills.c:         ch_printf( ch, "Hitchar   : %s\r\n", skill->hit_char );
skills.c:      if( skill->hit_vict && skill->hit_vict[0] != '\0' )
skills.c:         ch_printf( ch, "Hitvict   : %s\r\n", skill->hit_vict );
skills.c:      if( skill->hit_room && skill->hit_room[0] != '\0' )
skills.c:         ch_printf( ch, "Hitroom   : %s\r\n", skill->hit_room );
skills.c:      if( skill->hit_dest && skill->hit_dest[0] != '\0' )
skills.c:         ch_printf( ch, "Hitdest   : %s\r\n", skill->hit_dest );
skills.c:      if( skill->miss_char && skill->miss_char[0] != '\0' )
skills.c:         ch_printf( ch, "Misschar  : %s\r\n", skill->miss_char );
skills.c:      if( skill->miss_vict && skill->miss_vict[0] != '\0' )
skills.c:         ch_printf( ch, "Missvict  : %s\r\n", skill->miss_vict );
skills.c:      if( skill->miss_room && skill->miss_room[0] != '\0' )
skills.c:         ch_printf( ch, "Missroom  : %s\r\n", skill->miss_room );
skills.c:      if( skill->die_char && skill->die_char[0] != '\0' )
skills.c:         ch_printf( ch, "Diechar   : %s\r\n", skill->die_char );
skills.c:      if( skill->die_vict && skill->die_vict[0] != '\0' )
skills.c:         ch_printf( ch, "Dievict   : %s\r\n", skill->die_vict );
skills.c:      if( skill->die_room && skill->die_room[0] != '\0' )
skills.c:         ch_printf( ch, "Dieroom   : %s\r\n", skill->die_room );
skills.c:      if( skill->imm_char && skill->imm_char[0] != '\0' )
skills.c:         ch_printf( ch, "Immchar   : %s\r\n", skill->imm_char );
skills.c:      if( skill->imm_vict && skill->imm_vict[0] != '\0' )
skills.c:         ch_printf( ch, "Immvict   : %s\r\n", skill->imm_vict );
skills.c:      if( skill->imm_room && skill->imm_room[0] != '\0' )
skills.c:         ch_printf( ch, "Immroom   : %s\r\n", skill->imm_room );
skills.c:      if( skill->type != SKILL_HERB )
skills.c:         if( skill->type != SKILL_RACIAL )
skills.c:               snprintf( buf + 3, MAX_STRING_LENGTH - 3, ") lvl: %3d max: %2d%%", skill->skill_level[iClass],
skills.c:                         skill->skill_adept[iClass] );
skills.c:                         race_table[iRace]->race_name, skill->race_level[iRace], skill->race_adept[iRace] );
skills.c:      skill->slot = 0;
skills.c:         skill->slot = max + 1;
skills.c:      skill->min_mana = 0;
skills.c:      skill->name = str_dup( argument );
skills.c:      skill->noun_damage = str_dup( "" );
skills.c:      skill->msg_off = str_dup( "" );
skills.c:      skill->spell_fun = spell_smaug;
skills.c:      skill->type = type;
skills.c:      skill->spell_sector = 0;
skills.c:      skill->guild = -1;
skills.c:         skill->type = SKILL_RACIAL;
skills.c:         skill->skill_level[i] = LEVEL_IMMORTAL;
skills.c:         skill->skill_adept[i] = 95;
skills.c:         skill->race_level[i] = LEVEL_IMMORTAL;
skills.c:         skill->race_adept[i] = 95;
skills.c:         skill->difficulty = atoi( argument );
skills.c:         skill->participants = atoi( argument );
skills.c:            TOGGLE_BIT( skill->flags, 1 << x );
skills.c:            skill->saves = x;
skills.c:            skill->skill_fun = dofun;
skills.c:            skill->spell_fun = NULL;
skills.c:            DISPOSE( skill->skill_fun_name );
skills.c:            skill->skill_fun_name = str_dup( argument );
skills.c:            skill->spell_fun = spellfun;
skills.c:            skill->skill_fun = NULL;
skills.c:            DISPOSE( skill->skill_fun_name );
skills.c:            skill->spell_fun_name = str_dup( argument );
skills.c:            skill->target = x;
skills.c:         skill->minimum_position = URANGE( POS_DEAD, atoi( argument ), POS_DRAG );
skills.c:         skill->min_level = URANGE( 1, atoi( argument ), MAX_LEVEL );
skills.c:               TOGGLE_BIT( skill->spell_sector, ( 1 << value ) );
skills.c:         skill->slot = URANGE( 0, atoi( argument ), 30000 );
skills.c:         skill->min_mana = URANGE( 0, atoi( argument ), 2000 );
skills.c:         skill->beats = URANGE( 0, atoi( argument ), 120 );
skills.c:         skill->range = URANGE( 0, atoi( argument ), 20 );
skills.c:         skill->guild = atoi( argument );
skills.c:         skill->value = atoi( argument );
skills.c:         skill->type = get_skill( argument );
skills.c:         if( !skill->first_affect )
skills.c:         for( aff = skill->first_affect; aff; aff = aff_next )
skills.c:               UNLINK( aff, skill->first_affect, skill->last_affect, next, prev );
skills.c:         LINK( aff, skill->first_affect, skill->last_affect, next, prev );
skills.c:            skill->skill_level[Class] = URANGE( 0, atoi( argument ), MAX_LEVEL );
skills.c:            skill->race_level[race] = URANGE( 0, atoi( argument ), MAX_LEVEL );
skills.c:            skill->skill_adept[Class] = URANGE( 0, atoi( argument ), 100 );
skills.c:            skill->race_adept[race] = URANGE( 0, atoi( argument ), 100 );
skills.c:         DISPOSE( skill->name );
skills.c:         skill->name = str_dup( argument );
skills.c:         DISPOSE( skill->noun_damage );
skills.c:            skill->noun_damage = str_dup( "" );
skills.c:            skill->noun_damage = str_dup( argument );
skills.c:         DISPOSE( skill->msg_off );
skills.c:            skill->msg_off = str_dup( argument );
skills.c:         if( skill->hit_char )
skills.c:            DISPOSE( skill->hit_char );
skills.c:            skill->hit_char = str_dup( argument );
skills.c:         if( skill->hit_vict )
skills.c:            DISPOSE( skill->hit_vict );
skills.c:            skill->hit_vict = str_dup( argument );
skills.c:         if( skill->hit_room )
skills.c:            DISPOSE( skill->hit_room );
skills.c:            skill->hit_room = str_dup( argument );
skills.c:         if( skill->hit_dest )
skills.c:            DISPOSE( skill->hit_dest );
skills.c:            skill->hit_dest = str_dup( argument );
skills.c:         if( skill->miss_char )
skills.c:            DISPOSE( skill->miss_char );
skills.c:            skill->miss_char = str_dup( argument );
skills.c:         if( skill->miss_vict )
skills.c:            DISPOSE( skill->miss_vict );
skills.c:            skill->miss_vict = str_dup( argument );
skills.c:         if( skill->miss_room )
skills.c:            DISPOSE( skill->miss_room );
skills.c:            skill->miss_room = str_dup( argument );
skills.c:         if( skill->die_char )
skills.c:            DISPOSE( skill->die_char );
skills.c:            skill->die_char = str_dup( argument );
skills.c:         if( skill->die_vict )
skills.c:            DISPOSE( skill->die_vict );
skills.c:            skill->die_vict = str_dup( argument );
skills.c:         if( skill->die_room )
skills.c:            DISPOSE( skill->die_room );
skills.c:            skill->die_room = str_dup( argument );
skills.c:         if( skill->imm_char )
skills.c:            DISPOSE( skill->imm_char );
skills.c:            skill->imm_char = str_dup( argument );
skills.c:         if( skill->imm_vict )
skills.c:            DISPOSE( skill->imm_vict );
skills.c:            skill->imm_vict = str_dup( argument );
skills.c:         if( skill->imm_room )
skills.c:            DISPOSE( skill->imm_room );
skills.c:            skill->imm_room = str_dup( argument );
skills.c:         if( skill->dice )
skills.c:            DISPOSE( skill->dice );
skills.c:            skill->dice = str_dup( argument );
skills.c:         if( skill->components )
skills.c:            DISPOSE( skill->components );
skills.c:            skill->components = str_dup( argument );
skills.c:         if( skill->teachers )
skills.c:            DISPOSE( skill->teachers );
skills.c:            skill->teachers = str_dup( argument );
skills.c:      if( skill->noun_damage && skill->noun_damage[0] != '\0' )
skills.c:         stxt = skill->noun_damage;
skills.c:         stxt = skill->name;
skills.c:      if( skill->type == SKILL_SPELL )
skills.c.orig:   if( skill->first_affect )
skills.c.orig:      for( aff = skill->first_affect; aff; aff = aff_next )
skills.c.orig:         UNLINK( aff, skill->first_affect, skill->last_affect, next, prev );
skills.c.orig:   DISPOSE( skill->name );
skills.c.orig:   DISPOSE( skill->noun_damage );
skills.c.orig:   DISPOSE( skill->msg_off );
skills.c.orig:   DISPOSE( skill->hit_char );
skills.c.orig:   DISPOSE( skill->hit_vict );
skills.c.orig:   DISPOSE( skill->hit_room );
skills.c.orig:   DISPOSE( skill->hit_dest );
skills.c.orig:   DISPOSE( skill->miss_char );
skills.c.orig:   DISPOSE( skill->miss_vict );
skills.c.orig:   DISPOSE( skill->miss_room );
skills.c.orig:   DISPOSE( skill->die_char );
skills.c.orig:   DISPOSE( skill->die_vict );
skills.c.orig:   DISPOSE( skill->die_room );
skills.c.orig:   DISPOSE( skill->imm_char );
skills.c.orig:   DISPOSE( skill->imm_vict );
skills.c.orig:   DISPOSE( skill->imm_room );
skills.c.orig:   DISPOSE( skill->dice );
skills.c.orig:   if( skill->spell_fun_name )
skills.c.orig:      DISPOSE( skill->spell_fun_name );
skills.c.orig:   if( skill->skill_fun_name )
skills.c.orig:      DISPOSE( skill->skill_fun_name );
skills.c.orig:   DISPOSE( skill->components );
skills.c.orig:   DISPOSE( skill->teachers );
skills.c.orig:   skill->spell_fun = NULL;
skills.c.orig:   skill->skill_fun = NULL;
skills.c.orig:      ch_printf( ch, "Sn: %4d Slot: %4d %s: '%-20s'\r\n", sn, skill->slot, skill_tname[skill->type], skill->name );
skills.c.orig:      if( skill->info )
skills.c.orig:      if( skill->flags )
skills.c.orig:                 spell_saves[( int )skill->saves], spell_save_effect[SPELL_SAVE( skill )] );
skills.c.orig:      if( skill->difficulty != '\0' )
skills.c.orig:         ch_printf( ch, "Difficulty: %d\r\n", ( int )skill->difficulty );
skills.c.orig:                 skill_tname[skill->type],
skills.c.orig:                 target_type[URANGE( TAR_IGNORE, skill->target, TAR_OBJ_INV )],
skills.c.orig:                 skill->minimum_position, skill->min_mana, skill->beats, skill->range );
skills.c.orig:                 skill->flags,
skills.c.orig:                 skill->guild, skill->value, skill->info, skill->skill_fun ? skill->skill_fun_name : skill->spell_fun_name );
skills.c.orig:      ch_printf( ch, "Sectors Allowed: %s\n", skill->spell_sector ? flag_string( skill->spell_sector, sec_flags ) : "All" );
skills.c.orig:      ch_printf( ch, "Dammsg: %s\r\nWearoff: %s\n", skill->noun_damage, skill->msg_off ? skill->msg_off : "(none set)" );
skills.c.orig:      if( skill->dice && skill->dice[0] != '\0' )
skills.c.orig:         ch_printf( ch, "Dice: %s\r\n", skill->dice );
skills.c.orig:      if( skill->teachers && skill->teachers[0] != '\0' )
skills.c.orig:         ch_printf( ch, "Teachers: %s\r\n", skill->teachers );
skills.c.orig:      if( skill->components && skill->components[0] != '\0' )
skills.c.orig:         ch_printf( ch, "Components: %s\r\n", skill->components );
skills.c.orig:      if( skill->participants )
skills.c.orig:         ch_printf( ch, "Participants: %d\r\n", ( int )skill->participants );
skills.c.orig:      if( skill->userec.num_uses )
skills.c.orig:         send_timer( &skill->userec, ch );
skills.c.orig:      for( aff = skill->first_affect; aff; aff = aff->next )
skills.c.orig:         if( aff == skill->first_affect )
skills.c.orig:      if( skill->hit_char && skill->hit_char[0] != '\0' )
skills.c.orig:         ch_printf( ch, "Hitchar   : %s\r\n", skill->hit_char );
skills.c.orig:      if( skill->hit_vict && skill->hit_vict[0] != '\0' )
skills.c.orig:         ch_printf( ch, "Hitvict   : %s\r\n", skill->hit_vict );
skills.c.orig:      if( skill->hit_room && skill->hit_room[0] != '\0' )
skills.c.orig:         ch_printf( ch, "Hitroom   : %s\r\n", skill->hit_room );
skills.c.orig:      if( skill->hit_dest && skill->hit_dest[0] != '\0' )
skills.c.orig:         ch_printf( ch, "Hitdest   : %s\r\n", skill->hit_dest );
skills.c.orig:      if( skill->miss_char && skill->miss_char[0] != '\0' )
skills.c.orig:         ch_printf( ch, "Misschar  : %s\r\n", skill->miss_char );
skills.c.orig:      if( skill->miss_vict && skill->miss_vict[0] != '\0' )
skills.c.orig:         ch_printf( ch, "Missvict  : %s\r\n", skill->miss_vict );
skills.c.orig:      if( skill->miss_room && skill->miss_room[0] != '\0' )
skills.c.orig:         ch_printf( ch, "Missroom  : %s\r\n", skill->miss_room );
skills.c.orig:      if( skill->die_char && skill->die_char[0] != '\0' )
skills.c.orig:         ch_printf( ch, "Diechar   : %s\r\n", skill->die_char );
skills.c.orig:      if( skill->die_vict && skill->die_vict[0] != '\0' )
skills.c.orig:         ch_printf( ch, "Dievict   : %s\r\n", skill->die_vict );
skills.c.orig:      if( skill->die_room && skill->die_room[0] != '\0' )
skills.c.orig:         ch_printf( ch, "Dieroom   : %s\r\n", skill->die_room );
skills.c.orig:      if( skill->imm_char && skill->imm_char[0] != '\0' )
skills.c.orig:         ch_printf( ch, "Immchar   : %s\r\n", skill->imm_char );
skills.c.orig:      if( skill->imm_vict && skill->imm_vict[0] != '\0' )
skills.c.orig:         ch_printf( ch, "Immvict   : %s\r\n", skill->imm_vict );
skills.c.orig:      if( skill->imm_room && skill->imm_room[0] != '\0' )
skills.c.orig:         ch_printf( ch, "Immroom   : %s\r\n", skill->imm_room );
skills.c.orig:      if( skill->type != SKILL_HERB )
skills.c.orig:         if( skill->type != SKILL_RACIAL )
skills.c.orig:               snprintf( buf + 3, MAX_STRING_LENGTH - 3, ") lvl: %3d max: %2d%%", skill->skill_level[iClass],
skills.c.orig:                         skill->skill_adept[iClass] );
skills.c.orig:                         race_table[iRace]->race_name, skill->race_level[iRace], skill->race_adept[iRace] );
skills.c.orig:      skill->slot = 0;
skills.c.orig:         skill->slot = max + 1;
skills.c.orig:      skill->min_mana = 0;
skills.c.orig:      skill->name = str_dup( argument );
skills.c.orig:      skill->noun_damage = str_dup( "" );
skills.c.orig:      skill->msg_off = str_dup( "" );
skills.c.orig:      skill->spell_fun = spell_smaug;
skills.c.orig:      skill->type = type;
skills.c.orig:      skill->spell_sector = 0;
skills.c.orig:      skill->guild = -1;
skills.c.orig:         skill->type = SKILL_RACIAL;
skills.c.orig:         skill->skill_level[i] = LEVEL_IMMORTAL;
skills.c.orig:         skill->skill_adept[i] = 95;
skills.c.orig:         skill->race_level[i] = LEVEL_IMMORTAL;
skills.c.orig:         skill->race_adept[i] = 95;
skills.c.orig:         skill->difficulty = atoi( argument );
skills.c.orig:         skill->participants = atoi( argument );
skills.c.orig:            TOGGLE_BIT( skill->flags, 1 << x );
skills.c.orig:            skill->saves = x;
skills.c.orig:            skill->skill_fun = dofun;
skills.c.orig:            skill->spell_fun = NULL;
skills.c.orig:            DISPOSE( skill->skill_fun_name );
skills.c.orig:            skill->skill_fun_name = str_dup( argument );
skills.c.orig:            skill->spell_fun = spellfun;
skills.c.orig:            skill->skill_fun = NULL;
skills.c.orig:            DISPOSE( skill->skill_fun_name );
skills.c.orig:            skill->spell_fun_name = str_dup( argument );
skills.c.orig:            skill->target = x;
skills.c.orig:         skill->minimum_position = URANGE( POS_DEAD, atoi( argument ), POS_DRAG );
skills.c.orig:         skill->min_level = URANGE( 1, atoi( argument ), MAX_LEVEL );
skills.c.orig:               TOGGLE_BIT( skill->spell_sector, ( 1 << value ) );
skills.c.orig:         skill->slot = URANGE( 0, atoi( argument ), 30000 );
skills.c.orig:         skill->min_mana = URANGE( 0, atoi( argument ), 2000 );
skills.c.orig:         skill->beats = URANGE( 0, atoi( argument ), 120 );
skills.c.orig:         skill->range = URANGE( 0, atoi( argument ), 20 );
skills.c.orig:         skill->guild = atoi( argument );
skills.c.orig:         skill->value = atoi( argument );
skills.c.orig:         skill->type = get_skill( argument );
skills.c.orig:         if( !skill->first_affect )
skills.c.orig:         for( aff = skill->first_affect; aff; aff = aff_next )
skills.c.orig:               UNLINK( aff, skill->first_affect, skill->last_affect, next, prev );
skills.c.orig:         LINK( aff, skill->first_affect, skill->last_affect, next, prev );
skills.c.orig:            skill->skill_level[Class] = URANGE( 0, atoi( argument ), MAX_LEVEL );
skills.c.orig:            skill->race_level[race] = URANGE( 0, atoi( argument ), MAX_LEVEL );
skills.c.orig:            skill->skill_adept[Class] = URANGE( 0, atoi( argument ), 100 );
skills.c.orig:            skill->race_adept[race] = URANGE( 0, atoi( argument ), 100 );
skills.c.orig:         DISPOSE( skill->name );
skills.c.orig:         skill->name = str_dup( argument );
skills.c.orig:         DISPOSE( skill->noun_damage );
skills.c.orig:            skill->noun_damage = str_dup( "" );
skills.c.orig:            skill->noun_damage = str_dup( argument );
skills.c.orig:         DISPOSE( skill->msg_off );
skills.c.orig:            skill->msg_off = str_dup( argument );
skills.c.orig:         if( skill->hit_char )
skills.c.orig:            DISPOSE( skill->hit_char );
skills.c.orig:            skill->hit_char = str_dup( argument );
skills.c.orig:         if( skill->hit_vict )
skills.c.orig:            DISPOSE( skill->hit_vict );
skills.c.orig:            skill->hit_vict = str_dup( argument );
skills.c.orig:         if( skill->hit_room )
skills.c.orig:            DISPOSE( skill->hit_room );
skills.c.orig:            skill->hit_room = str_dup( argument );
skills.c.orig:         if( skill->hit_dest )
skills.c.orig:            DISPOSE( skill->hit_dest );
skills.c.orig:            skill->hit_dest = str_dup( argument );
skills.c.orig:         if( skill->miss_char )
skills.c.orig:            DISPOSE( skill->miss_char );
skills.c.orig:            skill->miss_char = str_dup( argument );
skills.c.orig:         if( skill->miss_vict )
skills.c.orig:            DISPOSE( skill->miss_vict );
skills.c.orig:            skill->miss_vict = str_dup( argument );
skills.c.orig:         if( skill->miss_room )
skills.c.orig:            DISPOSE( skill->miss_room );
skills.c.orig:            skill->miss_room = str_dup( argument );
skills.c.orig:         if( skill->die_char )
skills.c.orig:            DISPOSE( skill->die_char );
skills.c.orig:            skill->die_char = str_dup( argument );
skills.c.orig:         if( skill->die_vict )
skills.c.orig:            DISPOSE( skill->die_vict );
skills.c.orig:            skill->die_vict = str_dup( argument );
skills.c.orig:         if( skill->die_room )
skills.c.orig:            DISPOSE( skill->die_room );
skills.c.orig:            skill->die_room = str_dup( argument );
skills.c.orig:         if( skill->imm_char )
skills.c.orig:            DISPOSE( skill->imm_char );
skills.c.orig:            skill->imm_char = str_dup( argument );
skills.c.orig:         if( skill->imm_vict )
skills.c.orig:            DISPOSE( skill->imm_vict );
skills.c.orig:            skill->imm_vict = str_dup( argument );
skills.c.orig:         if( skill->imm_room )
skills.c.orig:            DISPOSE( skill->imm_room );
skills.c.orig:            skill->imm_room = str_dup( argument );
skills.c.orig:         if( skill->dice )
skills.c.orig:            DISPOSE( skill->dice );
skills.c.orig:            skill->dice = str_dup( argument );
skills.c.orig:         if( skill->components )
skills.c.orig:            DISPOSE( skill->components );
skills.c.orig:            skill->components = str_dup( argument );
skills.c.orig:         if( skill->teachers )
skills.c.orig:            DISPOSE( skill->teachers );
skills.c.orig:            skill->teachers = str_dup( argument );
skills.c.orig:      if( skill->noun_damage && skill->noun_damage[0] != '\0' )
skills.c.orig:         stxt = skill->noun_damage;
skills.c.orig:         stxt = skill->name;
skills.c.orig:      if( skill->type == SKILL_SPELL )
tables.c:         for( aff = skill->first_affect; aff; aff = aff->next )
tables.c:   fprintf( fpout, "Name         %s~\n", skill->name );
tables.c:   fprintf( fpout, "Type         %s\n", skill_tname[skill->type] );
tables.c:   fprintf( fpout, "Info         %d\n", skill->info );
tables.c:   fprintf( fpout, "Flags        %d\n", skill->flags );
tables.c:   if( skill->target )
tables.c:      fprintf( fpout, "Target       %d\n", skill->target );
tables.c:   if( skill->minimum_position )
tables.c:      fprintf( fpout, "Minpos       %d\n", skill->minimum_position + 100 );
tables.c:   if( skill->spell_sector )
tables.c:      fprintf( fpout, "Ssector      %d\n", skill->spell_sector );
tables.c:   if( skill->saves )
tables.c:      fprintf( fpout, "Saves        %d\n", skill->saves );
tables.c:   if( skill->slot )
tables.c:      fprintf( fpout, "Slot         %d\n", skill->slot );
tables.c:   if( skill->min_mana )
tables.c:      fprintf( fpout, "Mana         %d\n", skill->min_mana );
tables.c:   if( skill->beats )
tables.c:      fprintf( fpout, "Rounds       %d\n", skill->beats );
tables.c:   if( skill->range )
tables.c:      fprintf( fpout, "Range        %d\n", skill->range );
tables.c:   if( skill->guild != -1 )
tables.c:      fprintf( fpout, "Guild        %d\n", skill->guild );
tables.c:   if( skill->skill_fun )
tables.c:      fprintf( fpout, "Code         %s\n", skill->skill_fun_name );
tables.c:   else if( skill->spell_fun )
tables.c:      fprintf( fpout, "Code         %s\n", skill->spell_fun_name );
tables.c:   fprintf( fpout, "Dammsg       %s~\n", skill->noun_damage );
tables.c:   if( skill->msg_off && skill->msg_off[0] != '\0' )
tables.c:      fprintf( fpout, "Wearoff      %s~\n", skill->msg_off );
tables.c:   if( skill->hit_char && skill->hit_char[0] != '\0' )
tables.c:      fprintf( fpout, "Hitchar      %s~\n", skill->hit_char );
tables.c:   if( skill->hit_vict && skill->hit_vict[0] != '\0' )
tables.c:      fprintf( fpout, "Hitvict      %s~\n", skill->hit_vict );
tables.c:   if( skill->hit_room && skill->hit_room[0] != '\0' )
tables.c:      fprintf( fpout, "Hitroom      %s~\n", skill->hit_room );
tables.c:   if( skill->hit_dest && skill->hit_dest[0] != '\0' )
tables.c:      fprintf( fpout, "Hitdest      %s~\n", skill->hit_dest );
tables.c:   if( skill->miss_char && skill->miss_char[0] != '\0' )
tables.c:      fprintf( fpout, "Misschar     %s~\n", skill->miss_char );
tables.c:   if( skill->miss_vict && skill->miss_vict[0] != '\0' )
tables.c:      fprintf( fpout, "Missvict     %s~\n", skill->miss_vict );
tables.c:   if( skill->miss_room && skill->miss_room[0] != '\0' )
tables.c:      fprintf( fpout, "Missroom     %s~\n", skill->miss_room );
tables.c:   if( skill->die_char && skill->die_char[0] != '\0' )
tables.c:      fprintf( fpout, "Diechar      %s~\n", skill->die_char );
tables.c:   if( skill->die_vict && skill->die_vict[0] != '\0' )
tables.c:      fprintf( fpout, "Dievict      %s~\n", skill->die_vict );
tables.c:   if( skill->die_room && skill->die_room[0] != '\0' )
tables.c:      fprintf( fpout, "Dieroom      %s~\n", skill->die_room );
tables.c:   if( skill->imm_char && skill->imm_char[0] != '\0' )
tables.c:      fprintf( fpout, "Immchar      %s~\n", skill->imm_char );
tables.c:   if( skill->imm_vict && skill->imm_vict[0] != '\0' )
tables.c:      fprintf( fpout, "Immvict      %s~\n", skill->imm_vict );
tables.c:   if( skill->imm_room && skill->imm_room[0] != '\0' )
tables.c:      fprintf( fpout, "Immroom      %s~\n", skill->imm_room );
tables.c:   if( skill->dice && skill->dice[0] != '\0' )
tables.c:      fprintf( fpout, "Dice         %s~\n", skill->dice );
tables.c:   if( skill->value )
tables.c:      fprintf( fpout, "Value        %d\n", skill->value );
tables.c:   if( skill->difficulty )
tables.c:      fprintf( fpout, "Difficulty   %d\n", skill->difficulty );
tables.c:   if( skill->participants )
tables.c:      fprintf( fpout, "Participants %d\n", skill->participants );
tables.c:   if( skill->components && skill->components[0] != '\0' )
tables.c:      fprintf( fpout, "Components   %s~\n", skill->components );
tables.c:   if( skill->teachers && skill->teachers[0] != '\0' )
tables.c:      fprintf( fpout, "Teachers     %s~\n", skill->teachers );
tables.c:   for( aff = skill->first_affect; aff; aff = aff->next )
tables.c:   if( skill->type != SKILL_HERB )
tables.c:         if( skill->skill_level[y] < min )
tables.c:            min = skill->skill_level[y];
tables.c:         if( skill->race_level[y] < min )
tables.c:            min = skill->race_level[y];
tables.c:   skill->slot = 0;
tables.c:   skill->min_mana = 0;
tables.c:      skill->skill_level[x] = LEVEL_IMMORTAL;
tables.c:      skill->skill_adept[x] = 95;
tables.c:      skill->race_level[x] = LEVEL_IMMORTAL;
tables.c:      skill->race_adept[x] = 95;
tables.c:   skill->guild = -1;
tables.c:   skill->target = 0;
tables.c:   skill->skill_fun = NULL;
tables.c:   skill->spell_fun = NULL;
tables.c:   skill->spell_sector = 0;
tables.c:               LINK( aff, skill->first_affect, skill->last_affect, next, prev );
tables.c:            KEY( "Alignment", skill->alignment, fread_number( fp ) );
tables.c:               skill->skill_level[Class] = fread_number( fp );
tables.c:               skill->skill_adept[Class] = fread_number( fp );
tables.c:                  skill->skill_fun = dofun;
tables.c:                  skill->spell_fun = NULL;
tables.c:                  skill->skill_fun_name = str_dup( w );
tables.c:                  skill->spell_fun = spellfun;
tables.c:                  skill->skill_fun = NULL;
tables.c:                  skill->spell_fun_name = str_dup( w );
tables.c:                  skill->spell_fun = spell_null;
tables.c:            KEY( "Components", skill->components, fread_string_nohash( fp ) );
tables.c:            KEY( "Dammsg", skill->noun_damage, fread_string_nohash( fp ) );
tables.c:            KEY( "Dice", skill->dice, fread_string_nohash( fp ) );
tables.c:            KEY( "Diechar", skill->die_char, fread_string_nohash( fp ) );
tables.c:            KEY( "Dieroom", skill->die_room, fread_string_nohash( fp ) );
tables.c:            KEY( "Dievict", skill->die_vict, fread_string_nohash( fp ) );
tables.c:            KEY( "Difficulty", skill->difficulty, fread_number( fp ) );
tables.c:               if( skill->saves != 0 && SPELL_SAVE( skill ) == SE_NONE )
tables.c:                  bug( "%s (%s):  Has saving throw (%d) with no saving effect.", __func__, skill->name, skill->saves );
tables.c:               skill->flags = fread_number( fp );
tables.c:                  skill->info = skill->flags & ( BV11 - 1 );
tables.c:                  if( IS_SET( skill->flags, OLD_SF_SAVE_NEGATES ) )
tables.c:                     if( IS_SET( skill->flags, OLD_SF_SAVE_HALF_DAMAGE ) )
tables.c:                        REMOVE_BIT( skill->flags, OLD_SF_SAVE_HALF_DAMAGE );
tables.c:                     REMOVE_BIT( skill->flags, OLD_SF_SAVE_NEGATES );
tables.c:                  else if( IS_SET( skill->flags, OLD_SF_SAVE_HALF_DAMAGE ) )
tables.c:                     REMOVE_BIT( skill->flags, OLD_SF_SAVE_HALF_DAMAGE );
tables.c:                  skill->flags >>= 11;
tables.c:            KEY( "Guild", skill->guild, fread_number( fp ) );
tables.c:            KEY( "Hitchar", skill->hit_char, fread_string_nohash( fp ) );
tables.c:            KEY( "Hitdest", skill->hit_dest, fread_string_nohash( fp ) );
tables.c:            KEY( "Hitroom", skill->hit_room, fread_string_nohash( fp ) );
tables.c:            KEY( "Hitvict", skill->hit_vict, fread_string_nohash( fp ) );
tables.c:            KEY( "Immchar", skill->imm_char, fread_string_nohash( fp ) );
tables.c:            KEY( "Immroom", skill->imm_room, fread_string_nohash( fp ) );
tables.c:            KEY( "Immvict", skill->imm_vict, fread_string_nohash( fp ) );
tables.c:               skill->info = fread_number( fp );
tables.c:            KEY( "Mana", skill->min_mana, fread_number( fp ) );
tables.c:               skill->minimum_position = fread_number( fp );
tables.c:               if( skill->minimum_position < 100 )
tables.c:                  switch ( skill->minimum_position )
tables.c:                        skill->minimum_position = 6;
tables.c:                        skill->minimum_position = 8;
tables.c:                        skill->minimum_position = 9;
tables.c:                        skill->minimum_position = 12;
tables.c:                        skill->minimum_position = 13;
tables.c:                        skill->minimum_position = 14;
tables.c:                        skill->minimum_position = 15;
tables.c:                  skill->minimum_position -= 100;
tables.c:            KEY( "Misschar", skill->miss_char, fread_string_nohash( fp ) );
tables.c:            KEY( "Missroom", skill->miss_room, fread_string_nohash( fp ) );
tables.c:            KEY( "Missvict", skill->miss_vict, fread_string_nohash( fp ) );
tables.c:            KEY( "Name", skill->name, fread_string_nohash( fp ) );
tables.c:            KEY( "Participants", skill->participants, fread_number( fp ) );
tables.c:            KEY( "Range", skill->range, fread_number( fp ) );
tables.c:            KEY( "Rounds", skill->beats, fread_number( fp ) );
tables.c:               skill->race_level[race] = fread_number( fp );
tables.c:               skill->race_adept[race] = fread_number( fp );
tables.c:            KEY( "Saves", skill->saves, fread_number( fp ) );
tables.c:            KEY( "Slot", skill->slot, fread_number( fp ) );
tables.c:            KEY( "Ssector", skill->spell_sector, fread_number( fp ) );
tables.c:            KEY( "Target", skill->target, fread_number( fp ) );
tables.c:            KEY( "Teachers", skill->teachers, fread_string_nohash( fp ) );
tables.c:            KEY( "Type", skill->type, get_skill( fread_word( fp ) ) );
tables.c:            KEY( "Value", skill->value, fread_number( fp ) );
tables.c:            KEY( "Wearoff", skill->msg_off, fread_string_nohash( fp ) );
update.c:                      && ( skill = skill_table[paf->modifier] ) != NULL && skill->type == SKILL_SPELL )
update.c:                    if( ( *skill->spell_fun ) ( paf->modifier, ch->level, ch, ch ) == rCHAR_DIED || char_died( ch ) )
