act_comm.c:   drunk = ch->pcdata->condition[COND_DRUNK];
act_comm.c:            ch_printf( ch, "(%d) ", ( !IS_NPC( ch ) ) ? ch->pcdata->wizinvis : ch->mobinvis );
act_comm.c:            ch_printf( ch, "(%d) ", ( !IS_NPC( ch ) ) ? ch->pcdata->wizinvis : ch->mobinvis );
act_comm.c:            ch_printf( ch, "(%d) ", ( !IS_NPC( ch ) ) ? ch->pcdata->wizinvis : ch->mobinvis );
act_comm.c:            ch_printf( ch, "(%d) ", ( !IS_NPC( ch ) ) ? ch->pcdata->wizinvis : ch->mobinvis );
act_comm.c:            ch_printf( ch, "(%d) ", ( !IS_NPC( ch ) ) ? ch->pcdata->wizinvis : ch->mobinvis );
act_comm.c:            ch_printf( ch, "(%d) ", ( !IS_NPC( ch ) ) ? ch->pcdata->wizinvis : ch->mobinvis );
act_comm.c:             ( !IS_NPC( och ) && !IS_SET( och->pcdata->flags, PCFLAG_RETIRED ) ) )
act_comm.c:               && !( och->pcdata->council && !str_cmp( och->pcdata->council->name, "Newbie Council" ) ) ) )
act_comm.c:            if( vch->pcdata->clan != ch->pcdata->clan )
act_comm.c:            if( vch->pcdata->council != ch->pcdata->council )
act_comm.c:            snprintf( lbuf, MAX_INPUT_LENGTH + 4, "(%d) ", ( !IS_NPC( ch ) ) ? ch->pcdata->wizinvis : ch->mobinvis );
act_comm.c:         if( !IS_NPC( ch ) && ch->pcdata->nuisance
act_comm.c:             && ch->pcdata->nuisance->flags > 7
act_comm.c:             && ( number_percent(  ) < ( ( ch->pcdata->nuisance->flags - 7 ) * 10 * ch->pcdata->nuisance->power ) ) )
act_comm.c:         if( !IS_NPC( vch ) && vch->pcdata->nuisance &&
act_comm.c:             vch->pcdata->nuisance->flags > 7
act_comm.c:             && ( number_percent(  ) < ( ( vch->pcdata->nuisance->flags - 7 ) * 10 * vch->pcdata->nuisance->power ) ) )
act_comm.c:   if( IS_NPC( ch ) || !ch->pcdata->clan
act_comm.c:       || ch->pcdata->clan->clan_type == CLAN_ORDER || ch->pcdata->clan->clan_type == CLAN_GUILD )
act_comm.c:            && !( ch->pcdata->council && !str_cmp( ch->pcdata->council->name, "Newbie Council" ) ) ) )
act_comm.c:   if( IS_NPC( ch ) || !ch->pcdata->clan || ch->pcdata->clan->clan_type != CLAN_ORDER )
act_comm.c:   if( IS_NPC( ch ) || !ch->pcdata->council )
act_comm.c:   if( IS_NPC( ch ) || !ch->pcdata->clan || ch->pcdata->clan->clan_type != CLAN_GUILD )
act_comm.c:   if( !IS_IMMORTAL( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_RETIRED ) )
act_comm.c:   if( IS_SET( ch->pcdata->flags, PCFLAG_NOBECKON ) )
act_comm.c:   if( !IS_SET( victim->pcdata->flags, PCFLAG_BECKON ) && !IS_IMMORTAL( ch ) )
act_comm.c:   if( !IS_NPC( victim ) && IS_IMMORTAL( victim ) && victim->pcdata->tell_history &&
act_comm.c:      victim->pcdata->lt_index = tolower( IS_NPC( ch ) ? ch->short_descr[0] : ch->name[0] ) - 'a';
act_comm.c:      if( victim->pcdata->tell_history[victim->pcdata->lt_index] )
act_comm.c:         STRFREE( victim->pcdata->tell_history[victim->pcdata->lt_index] );
act_comm.c:      victim->pcdata->tell_history[victim->pcdata->lt_index] = STRALLOC( buf );
act_comm.c:   if( !IS_NPC( victim ) && IS_IMMORTAL( victim ) && victim->pcdata->tell_history &&
act_comm.c:      victim->pcdata->lt_index = tolower( IS_NPC( ch ) ? ch->short_descr[0] : ch->name[0] ) - 'a';
act_comm.c:      if( victim->pcdata->tell_history[victim->pcdata->lt_index] )
act_comm.c:         STRFREE( victim->pcdata->tell_history[victim->pcdata->lt_index] );
act_comm.c:      victim->pcdata->tell_history[victim->pcdata->lt_index] = STRALLOC( buf );
act_comm.c:   if( !IS_NPC( victim ) && IS_IMMORTAL( victim ) && victim->pcdata->tell_history &&
act_comm.c:      victim->pcdata->lt_index = tolower( IS_NPC( ch ) ? ch->short_descr[0] : ch->name[0] ) - 'a';
act_comm.c:      if( victim->pcdata->tell_history[victim->pcdata->lt_index] )
act_comm.c:         STRFREE( victim->pcdata->tell_history[victim->pcdata->lt_index] );
act_comm.c:      victim->pcdata->tell_history[victim->pcdata->lt_index] = STRALLOC( buf );
act_comm.c:   if( IS_NPC( ch ) || !IS_IMMORTAL( ch ) || !ch->pcdata->tell_history )
act_comm.c:      tindex = ch->pcdata->lt_index;
act_comm.c:   if( ch->pcdata->tell_history[tindex] )
act_comm.c:      send_to_char( ch->pcdata->tell_history[tindex], ch );
act_comm.c:   if( get_trust( ch ) >= LEVEL_ASCENDANT || is_name( "bug", ch->pcdata->bestowments ) )
act_comm.c:   if( ch->level >= LEVEL_HERO && !ch->pcdata->pet ) /* Pet crash fix */
act_comm.c:   if( sysdata.save_pets && ch->pcdata->pet )
act_comm.c:      act( AT_BYE, "$N follows $S master into the Void.", ch, NULL, ch->pcdata->pet, TO_ROOM );
act_comm.c:      extract_char( ch->pcdata->pet, TRUE );
act_comm.c:   if( ch->pcdata->clan )
act_comm.c:      save_clan( ch->pcdata->clan );
act_comm.c:   if( !ch->pcdata->council )
act_comm.c:   if( str_cmp( ch->pcdata->council->name, "Newbie Council" ) )
act_comm.c:                               && victim->pcdata->council && !str_cmp( victim->pcdata->council->name, "Newbie Council" ) ) )
act_comm.c:      master->pcdata->pet = ch;
act_comm.c:   if( IS_NPC( ch ) && !IS_NPC( ch->master ) && ch->master->pcdata->pet == ch )
act_comm.c:      ch->master->pcdata->pet = NULL;
act_comm.c:         ch->master->pcdata->charmies--;
act_comm.c:                          IS_VAMPIRE( gch ) ? gch->pcdata->condition[COND_BLOODTHIRST] : gch->mana,
act_comm.c:      if( ch->pcdata->clan == cch->pcdata->clan && ch->pcdata->clan != NULL )
act_comm.c:               return ch->pcdata->learned[sn];
act_comm.c:            if( ch->pcdata->learned[sn] >= 99 )
act_comm.c:            if( lang_array[langs] == LANG_CLAN && ( IS_NPC( ch ) || !ch->pcdata->clan ) )
act_comm.c:          lang_array[lang] == LANG_COMMON || ch->pcdata->learned[sn] >= 99 )
act_comm.c:      if( countlangs( ch->speaks ) >= ( ch->level / 10 ) && ch->pcdata->learned[sn] <= 0 )
act_comm.c:      ch->pcdata->learned[sn] += prct;
act_comm.c:      ch->pcdata->learned[sn] = UMIN( ch->pcdata->learned[sn], 99 );
act_comm.c:      if( ch->pcdata->learned[sn] == prct )
act_comm.c:      else if( ch->pcdata->learned[sn] < 60 )
act_comm.c:      else if( ch->pcdata->learned[sn] < 60 + prct )
act_comm.c:      else if( ch->pcdata->learned[sn] < 99 )
act_info.c:      * ( IS_NPC( ch ) ? 1 : ( ch->pcdata->condition[COND_DRUNK] ? ( ch->pcdata->condition[COND_DRUNK] / 12 ) : 1 ) );
act_info.c:         snprintf( buf1, MAX_STRING_LENGTH, "(Invis %d) ", victim->pcdata->wizinvis );
act_info.c:      if( victim->pcdata->clan
act_info.c:          && IS_SET( victim->pcdata->flags, PCFLAG_DEADLY )
act_info.c:          && victim->pcdata->clan->badge
act_info.c:          && ( victim->pcdata->clan->clan_type != CLAN_ORDER && victim->pcdata->clan->clan_type != CLAN_GUILD ) )
act_info.c:         ch_printf_color( ch, "&P%s ", victim->pcdata->clan->badge );
act_info.c:               mudstrlcat( buf, victim->pcdata->title, MAX_STRING_LENGTH );
act_info.c:    mudstrlcat( buf, victim->pcdata->title, MAX_STRING_LENGTH );
act_info.c:    mudstrlcat( buf, victim->pcdata->cpose, MAX_STRING_LENGTH );
act_info.c:   else if( ch->pcdata->learned[gsn_peek] > 0 )
act_info.c:      SET_BIT( ch->pcdata->flags, PCFLAG_HELPSTART );
act_info.c:      if( wch->level < iLevelLower || wch->level > iLevelUpper || ( fPkill && !CAN_PKILL( wch ) ) || ( fImmortalOnly && wch->level < LEVEL_IMMORTAL ) || ( fClassRestrict && !rgfClass[wch->Class] ) || ( fRaceRestrict && !rgfRace[wch->race] ) || ( fClanMatch && ( pClan != wch->pcdata->clan ) )  /* SB */
act_info.c:          || ( fCouncilMatch && ( pCouncil != wch->pcdata->council ) )  /* SB */
act_info.c:          || ( fDeityMatch && ( pDeity != wch->pcdata->deity ) ) )
act_info.c:      if( fLeader && !( wch->pcdata->council &&
act_info.c:                        ( ( wch->pcdata->council->head2 &&
act_info.c:                            !str_cmp( wch->pcdata->council->head2, wch->name ) ) ||
act_info.c:                          ( wch->pcdata->council->head &&
act_info.c:                            !str_cmp( wch->pcdata->council->head, wch->name ) ) ) ) &&
act_info.c:          !( wch->pcdata->clan && ( ( wch->pcdata->clan->deity &&
act_info.c:                                      !str_cmp( wch->pcdata->clan->deity, wch->name ) )
act_info.c:                                    || ( wch->pcdata->clan->leader
act_info.c:                                         && !str_cmp( wch->pcdata->clan->leader, wch->name ) )
act_info.c:                                    || ( wch->pcdata->clan->number1
act_info.c:                                         && !str_cmp( wch->pcdata->clan->number1, wch->name ) )
act_info.c:                                    || ( wch->pcdata->clan->number2
act_info.c:                                         && !str_cmp( wch->pcdata->clan->number2, wch->name ) ) ) ) )
act_info.c:      if( fGroup && !wch->leader && !IS_SET( wch->pcdata->flags, PCFLAG_GROUPWHO ) && ( !whogr_p || !whogr_p->indent ) )
act_info.c:      if( fShowHomepage && wch->pcdata->homepage && wch->pcdata->homepage[0] != '\0' )
act_info.c:         snprintf( char_name, MAX_INPUT_LENGTH, "<A HREF=\"%s\">%s</A>", show_tilde( wch->pcdata->homepage ), wch->name );
act_info.c:      else if( wch->pcdata->clan
act_info.c:               && !str_cmp( wch->name, wch->pcdata->clan->leader ) && wch->pcdata->clan->leadrank[0] != '\0' )
act_info.c:         Class = wch->pcdata->clan->leadrank;
act_info.c:      else if( wch->pcdata->clan
act_info.c:               && !str_cmp( wch->name, wch->pcdata->clan->number1 ) && wch->pcdata->clan->onerank[0] != '\0' )
act_info.c:         Class = wch->pcdata->clan->onerank;
act_info.c:      else if( wch->pcdata->clan
act_info.c:               && !str_cmp( wch->name, wch->pcdata->clan->number2 ) && wch->pcdata->clan->tworank[0] != '\0' )
act_info.c:         Class = wch->pcdata->clan->tworank;
act_info.c:      else if( wch->pcdata->rank && wch->pcdata->rank[0] != '\0' )
act_info.c:         Class = wch->pcdata->rank;
act_info.c:      if( wch->pcdata->clan )
act_info.c:         CLAN_DATA *pclan = wch->pcdata->clan;
act_info.c:      if( wch->pcdata->council )
act_info.c:         if( wch->pcdata->council->head2 == NULL )
act_info.c:            if( !str_cmp( wch->name, wch->pcdata->council->head ) )
act_info.c:            if( !str_cmp( wch->name, wch->pcdata->council->head ) || !str_cmp( wch->name, wch->pcdata->council->head2 ) )
act_info.c:         mudstrlcat( council_name, wch->pcdata->council_name, MAX_INPUT_LENGTH );
act_info.c:         snprintf( invis_str, MAX_INPUT_LENGTH, "(%d) ", wch->pcdata->wizinvis );
act_info.c:                wch->pcdata->customclass,
act_info.c:                char_name, wch->pcdata->title, extra_title, clan_name, council_name );
act_info.c:       && IS_SET( victim->pcdata->flags, PCFLAG_DND ) && get_trust( ch ) < get_trust( victim ) )
act_info.c:             && ( get_trust( ch ) >= get_trust( victim ) || !IS_SET( victim->pcdata->flags, PCFLAG_DND ) ) )
act_info.c:            else if( CAN_PKILL( victim ) && victim->pcdata->clan
act_info.c:                     && victim->pcdata->clan->clan_type != CLAN_ORDER && victim->pcdata->clan->clan_type != CLAN_GUILD )
act_info.c:               pager_printf_color( ch, "%-18s\t", victim->pcdata->clan->badge );
act_info.c:             && ( skill->guild != CLASS_NONE && ( !IS_GUILDED( ch ) || ( ch->pcdata->clan->Class != skill->guild ) ) ) )
act_info.c:         if( ch->pcdata->learned[sn] <= 0 && SPELL_FLAG( skill, SF_SECRETSKILL ) )
act_info.c:         if( ch->pcdata->learned[normalSn] > 0 )
act_info.c:         pager_printf( ch, " %3d%% ", ch->pcdata->learned[normalSn] );
act_info.c:	     && ch->pcdata->clan->class != skill_table[sn]->guild )
act_info.c:      if( ch->pcdata->learned[sn] >= adept )
act_info.c:         ch->pcdata->learned[sn] += int_app[get_curr_int( ch )].learn;
act_info.c:         if( ch->pcdata->learned[sn] >= adept )
act_info.c:            ch->pcdata->learned[sn] = adept;
act_info.c:   DISPOSE( ch->pcdata->pwd );
act_info.c:   ch->pcdata->pwd = str_dup( pwdnew );
act_info.c:      if( !IS_NPC( ch ) && ch->pcdata->clan )
act_info.c:         if( ch->pcdata->clan->clan_type == CLAN_ORDER )
act_info.c:         else if( ch->pcdata->clan->clan_type == CLAN_GUILD )
act_info.c:      if( IS_IMMORTAL( ch ) || ( ch->pcdata->council && !str_cmp( ch->pcdata->council->name, "Newbie Council" ) ) )
act_info.c:      if( !IS_NPC( ch ) && ch->pcdata->council )
act_info.c:      if( !IS_NPC( ch ) && IS_SET( ch->pcdata->flags, PCFLAG_RETIRED ) )
act_info.c:      else if( !str_cmp( arg + 1, "clan" ) && !IS_NPC( ch ) && ch->pcdata->clan
act_info.c:               && ch->pcdata->clan->clan_type != CLAN_ORDER && ch->pcdata->clan->clan_type != CLAN_GUILD )
act_info.c:      else if( !str_cmp( arg + 1, "council" ) && !IS_NPC( ch ) && ch->pcdata->council )
act_info.c:      else if( !str_cmp( arg + 1, "guild" ) && !IS_NPC( ch ) && ch->pcdata->clan
act_info.c:               && ch->pcdata->clan->clan_type == CLAN_GUILD )
act_info.c:                                                  || ( ch->pcdata->council
act_info.c:                                                       && !str_cmp( ch->pcdata->council->name, "Newbie Council" ) ) ) )
act_info.c:      else if( !str_cmp( arg + 1, "order" ) && !IS_NPC( ch ) && ch->pcdata->clan
act_info.c:               && ch->pcdata->clan->clan_type == CLAN_ORDER )
act_info.c:          * if (ch->pcdata->clan)
act_info.c:          * if (ch->pcdata->council)
act_info.c:          * if (ch->pcdata->guild)
act_info.c:          * if (ch->pcdata->clan)
act_info.c:          * if (ch->pcdata->council)
act_info.c:                 IS_SET( ch->pcdata->flags, PCFLAG_PAGERON ) ? "[+] PAGER"
act_info.c:                 IS_SET( ch->pcdata->flags, PCFLAG_GAG ) ? "[+] GAG"
act_info.c:                 IS_SET( ch->pcdata->flags, PCFLAG_NORECALL ) ? "[+] NORECALL"
act_info.c:                 : "[-] norecall", IS_SET( ch->pcdata->flags, PCFLAG_NOSUMMON ) ? "[+] NOSUMMON" : "[-] nosummon" );
act_info.c:      if( !IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
act_info.c:                 IS_SET( ch->pcdata->flags, PCFLAG_GROUPWHO ) ? "[+] GROUPWHO" : "[-] groupwho",
act_info.c:                 IS_SET( ch->pcdata->flags, PCFLAG_NOINTRO ) ? "[+] NOINTRO" : "[-] nointro",
act_info.c:                 IS_SET( ch->pcdata->flags, PCFLAG_BECKON ) ? "[+] BECKON" : "[-] beckon" );
act_info.c:      ch_printf_color( ch, "Pager Length (%d)    Wimpy (&W%d&w)", ch->pcdata->pagerlen, ch->wimpy );
act_info.c:                 IS_SET( ch->pcdata->flags, PCFLAG_NODESC ) ? " You are not permitted to set your description.\r\n" : "" );
act_info.c:         if( ( bit == PLR_FLEE || bit == PLR_NICE || bit == PLR_SHOVEDRAG ) && IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
act_info.c:            SET_BIT( ch->pcdata->flags, bit );
act_info.c:            REMOVE_BIT( ch->pcdata->flags, bit );
act_info.c:         if( ch->pcdata->learned[normalSn] <= 0 && SPELL_FLAG( skill, SF_SECRETSKILL ) )
act_info.c:                          skn, skill->name, ch->pcdata->learned[normalSn], skill->skill_adept[ch->Class], buf );
act_info.c:                 victim->pcdata->title,
act_info.c:                 victim->sex == SEX_FEMALE ? "She" : "It", IS_SET( victim->pcdata->flags, PCFLAG_DEADLY ) ? "" : "non-" );
act_info.c:   if( ( pclan = victim->pcdata->clan ) != NULL )
act_info.c:   if( victim->pcdata->council )
act_info.c:      if( !str_cmp( victim->name, victim->pcdata->council->head ) )
act_info.c:            victim->pcdata->council->head2 == NULL ? "Head" : "Co-Head",
act_info.c:            victim->pcdata->council->name );
act_info.c:      else if( victim->pcdata->council->head2 && !str_cmp ( victim->name, victim->pcdata->council->head2 ) )
act_info.c:            victim->pcdata->council->name );
act_info.c:            victim->pcdata->council->name );
act_info.c:   if( victim->pcdata->deity )
act_info.c:                    victim->sex == SEX_MALE ? "He" : victim->sex == SEX_FEMALE ? "She" : "It", victim->pcdata->deity->name );
act_info.c:   if( victim->pcdata->homepage && victim->pcdata->homepage[0] != '\0' )
act_info.c:                    victim->sex == SEX_FEMALE ? "Her" : "Its", show_tilde( victim->pcdata->homepage ) );
act_info.c:   if( victim->pcdata->bio && victim->pcdata->bio[0] != '\0' )
act_info.c:      pager_printf( ch, " %s's personal bio:\r\n%s", victim->name, victim->pcdata->bio );
act_info.c:      if( victim->pcdata->authed_by && victim->pcdata->authed_by[0] != '\0' )
act_info.c:         pager_printf( ch, "%s was authorized by %s.\r\n", victim->name, victim->pcdata->authed_by );
act_info.c:                    victim->name, victim->pcdata->mkills, victim->pcdata->mdeaths );
act_info.c:      if( victim->pcdata->pkills || victim->pcdata->pdeaths )
act_info.c:                       victim->name, victim->pcdata->pkills, victim->pcdata->pdeaths );
act_info.c:      if( victim->pcdata->illegal_pk )
act_info.c:         pager_printf( ch, "%s has committed %d illegal player kills.\r\n", victim->name, victim->pcdata->illegal_pk );
act_info.c:                    victim->name, ( victim->pcdata->release_date == 0 ) ? "not " : "" );
act_info.c:      if( victim->pcdata->nuisance )
act_info.c:                             victim->pcdata->nuisance->flags, MAX_NUISANCE_STAGE, victim->pcdata->nuisance->power,
act_info.c:                             ctime( &victim->pcdata->nuisance->set_time ) );
act_info.c:      if( victim->pcdata->release_date != 0 )
act_info.c:                       victim->pcdata->helled_by, ctime( &victim->pcdata->release_date ) );
act_info.c:         || xIS_SET( victim->act, PLR_NO_TELL ) || IS_SET( victim->pcdata->flags, PCFLAG_NOBECKON ) || IS_SET( victim->pcdata->flags, PCFLAG_NOTITLE )
act_info.c:         || IS_SET( victim->pcdata->flags, PCFLAG_NODESC ) || IS_SET( victim->pcdata->flags, PCFLAG_NOBIO ) || IS_SET( victim->pcdata->flags, PCFLAG_NOCPOSE ) )
act_info.c:         if( IS_SET( victim->pcdata->flags, PCFLAG_NOBECKON ) )
act_info.c:         if( IS_SET( victim->pcdata->flags, PCFLAG_NOTITLE ) )
act_info.c:         if( IS_SET( victim->pcdata->flags, PCFLAG_NOBIO ) )
act_info.c:         if( IS_SET( victim->pcdata->flags, PCFLAG_NODESC ) )
act_info.c:         if( IS_SET( victim->pcdata->flags, PCFLAG_NOCPOSE ) )
act_info.c:      else if( victim->pcdata->recent_site )
act_info.c:         pager_printf( ch, "%s's most recent IP: %s\r\n ", victim->name, victim->pcdata->recent_site );
act_info.c:      if( IS_SET( ch->pcdata->flags, PCFLAG_PAGERON ) )
act_info.c:         ch_printf( ch, "Pager is now enabled at %d lines.\r\n", ch->pcdata->pagerlen );
act_info.c:   ch->pcdata->pagerlen = atoi( arg );
act_info.c:   if( ch->pcdata->pagerlen < 5 )
act_info.c:      ch->pcdata->pagerlen = 5;
act_info.c:   ch_printf( ch, "Page pausing set to %d lines.\r\n", ch->pcdata->pagerlen );
act_info.c:      if( !ch->pcdata->first_ignored )
act_info.c:      for( temp = ch->pcdata->first_ignored; temp; temp = temp->next )
act_info.c:      for( temp = ch->pcdata->first_ignored; temp; temp = next )
act_info.c:         UNLINK( temp, ch->pcdata->first_ignored, ch->pcdata->last_ignored, next, prev );
act_info.c:      for( temp = ch->pcdata->first_ignored, i = 0; temp; temp = temp->next, i++ )
act_info.c:            UNLINK( temp, ch->pcdata->first_ignored, ch->pcdata->last_ignored, next, prev );
act_info.c:         LINK( inew, ch->pcdata->first_ignored, ch->pcdata->last_ignored, next, prev );
act_info.c:   for( temp = ch->pcdata->first_ignored; temp; temp = temp->next )
act_move.c: if( ch->pcdata->cpose )
act_move.c:      ch->pcdata->cpose = str_dup( " is here." );
act_move.c:      if( ch->pcdata->nuisance && ch->pcdata->nuisance->flags > 8 &&
act_move.c:          number_percent(  ) > ( ch->pcdata->nuisance->flags * ch->pcdata->nuisance->power ) )
act_move.c:        if ( IS_IMMORTAL( ch ) && IS_SET( ch->pcdata->flags, PCFLAG_BUILDWALK ) )
act_move.c:        if ( !IS_SET( ch->pcdata->flags, PCFLAG_BUILDWALK ) )
act_move.c:        if ( IS_IMMORTAL( ch ) && IS_SET( ch->pcdata->flags, PCFLAG_BUILDWALK ) )
act_move.c:        if ( !IS_SET( ch->pcdata->flags, PCFLAG_BUILDWALK ) )
act_move.c:        if ( IS_IMMORTAL( ch ) && IS_SET( ch->pcdata->flags, PCFLAG_BUILDWALK ) )
act_move.c:        if ( !IS_SET( ch->pcdata->flags, PCFLAG_BUILDWALK ) )
act_move.c:        if ( IS_IMMORTAL( ch ) && IS_SET( ch->pcdata->flags, PCFLAG_BUILDWALK ) )
act_move.c:        if ( !IS_SET( ch->pcdata->flags, PCFLAG_BUILDWALK ) )
act_move.c:        if ( IS_IMMORTAL( ch ) && IS_SET( ch->pcdata->flags, PCFLAG_BUILDWALK ) )
act_move.c:        if ( !IS_SET( ch->pcdata->flags, PCFLAG_BUILDWALK ) )
act_move.c:        if ( IS_IMMORTAL( ch ) && IS_SET( ch->pcdata->flags, PCFLAG_BUILDWALK ) )
act_move.c:        if ( !IS_SET( ch->pcdata->flags, PCFLAG_BUILDWALK ) )
act_move.c:        if ( IS_IMMORTAL( ch ) && IS_SET( ch->pcdata->flags, PCFLAG_BUILDWALK ) )
act_move.c:        if ( !IS_SET( ch->pcdata->flags, PCFLAG_BUILDWALK ) )
act_move.c:        if ( IS_IMMORTAL( ch ) && IS_SET( ch->pcdata->flags, PCFLAG_BUILDWALK ) )
act_move.c:        if ( !IS_SET( ch->pcdata->flags, PCFLAG_BUILDWALK ) )
act_move.c:        if ( IS_IMMORTAL( ch ) && IS_SET( ch->pcdata->flags, PCFLAG_BUILDWALK ) )
act_move.c:        if ( !IS_SET( ch->pcdata->flags, PCFLAG_BUILDWALK ) )
act_move.c:        if ( IS_IMMORTAL( ch ) && IS_SET( ch->pcdata->flags, PCFLAG_BUILDWALK ) )
act_move.c:        if ( !IS_SET( ch->pcdata->flags, PCFLAG_BUILDWALK ) )
act_move.c:    if ( IS_IMMORTAL( ch ) && IS_SET( ch->pcdata->flags, PCFLAG_BUILDWALK ) )
act_move.c:            location = make_room( vnum, ch->pcdata->area );
act_obj.c:                && !IS_NPC( ch ) && IS_SET( ch->pcdata->flags, PCFLAG_DEADLY )
act_obj.c:   if( !IS_NPC( ch ) && ( !IS_PKILL( ch ) || ( IS_PKILL( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_GAG ) ) ) )
act_obj.c:   if( IS_NPC( ch ) || ch->pcdata->learned[gsn_dual_wield] )
act_obj.c:   if( ch->pcdata->tier < obj->tier )
act_obj.c:   if( !IS_NPC( ch ) && ch->pcdata->deity && ch->pcdata->deity->name[0] != '\0' )
act_obj.c:      mudstrlcpy( name, ch->pcdata->deity->name, 50 );
act_obj.c:   else if( !IS_NPC( ch ) && ch->pcdata->clan && ch->pcdata->clan->deity[0] != '\0' )
act_obj.c:      mudstrlcpy( name, ch->pcdata->clan->deity, 50 );
act_obj.c:         if( !IS_NPC( vch ) && xIS_SET( vch->act, PLR_WIZINVIS ) && vch->pcdata->wizinvis >= LEVEL_IMMORTAL )
act_wiz.c:      if( IS_SET( ch->pcdata->flags, PCFLAG_DND ) )
act_wiz.c:         REMOVE_BIT( ch->pcdata->flags, PCFLAG_DND );
act_wiz.c:         SET_BIT( ch->pcdata->flags, PCFLAG_DND );
act_wiz.c:            SET_BIT( vic->pcdata->flags, PCFLAG_WATCH );
act_wiz.c:            SET_BIT( vic->pcdata->flags, PCFLAG_WATCH );
act_wiz.c:      victim->pcdata->auth_state = 3;
act_wiz.c:      if( victim->pcdata->authed_by )
act_wiz.c:         STRFREE( victim->pcdata->authed_by );
act_wiz.c:      victim->pcdata->authed_by = QUICKLINK( ch->name );
act_wiz.c:      victim->pcdata->auth_state = 2;
act_wiz.c:      victim->pcdata->auth_state = 2;
act_wiz.c:      victim->pcdata->auth_state = 2;
act_wiz.c:      victim->pcdata->auth_state = 2;
act_wiz.c:      victim->pcdata->auth_state = 2;
act_wiz.c:      victim->pcdata->auth_state = 2;
act_wiz.c:      DISPOSE( ch->pcdata->bamfin );
act_wiz.c:      ch->pcdata->bamfin = newbamf;
act_wiz.c:      DISPOSE( ch->pcdata->bamfout );
act_wiz.c:      ch->pcdata->bamfout = newbamf;
act_wiz.c:   DISPOSE( ch->pcdata->rank );
act_wiz.c:      ch->pcdata->rank = str_dup( "" );
act_wiz.c:      ch->pcdata->rank = newrank;
act_wiz.c:      REMOVE_BIT( victim->pcdata->flags, PCFLAG_RETIRED );
act_wiz.c:      SET_BIT( victim->pcdata->flags, PCFLAG_RETIRED );
act_wiz.c:            || victim->desc->connected == CON_EDITING ) && IS_SET( victim->pcdata->flags, PCFLAG_DND ) )
act_wiz.c:   if( wch && !IS_NPC( wch ) && IS_SET( wch->pcdata->flags, PCFLAG_DND ) && get_trust( ch ) < get_trust( wch ) )
act_wiz.c:   if( !IS_NPC( victim ) && victim->pcdata->clan )
act_wiz.c:                          victim->pcdata->clan->clan_type == CLAN_ORDER ? "Order" :
act_wiz.c:                          victim->pcdata->clan->clan_type == CLAN_GUILD ? "Guild" : "Clan", victim->pcdata->clan->name );
act_wiz.c:                          victim->trust, victim->pcdata->authed_by[0] != '\0' ? victim->pcdata->authed_by : "(unknown)" );
act_wiz.c:      pager_printf_color( ch, "&cRecent IP: &w%-15s", victim->pcdata->recent_site ?
act_wiz.c:         victim->pcdata->recent_site : "Unknown" );
act_wiz.c:      pager_printf_color( ch, "&cPrevious IP: &w%-15s", victim->pcdata->prev_site ?
act_wiz.c:         victim->pcdata->prev_site : "Unknown" );
act_wiz.c:         str_cmp( victim->pcdata->rank, "" ) ? victim->pcdata->rank : "(default)" );
act_wiz.c:   if( !IS_NPC( victim ) && victim->pcdata->release_date != 0 )
act_wiz.c:                          ctime( &victim->pcdata->release_date ), victim->pcdata->helled_by );
act_wiz.c:                       IS_NPC( victim ) ? victim->pIndexData->killed : victim->pcdata->mdeaths + victim->pcdata->pdeaths );
act_wiz.c:                       victim->pcdata->str, victim->pcdata->intel, victim->pcdata->dex, victim->pcdata->lck );
act_wiz.c:   pager_printf_color( ch, "&cLevel   : &P%-2d        &cTier: &W%d&D      \r", victim->level, victim->pcdata->tier );
act_wiz.c:      snprintf( bdbuf, MAX_STRING_LENGTH, "%d/%d", victim->pcdata->condition[COND_BLOODTHIRST], 10 + victim->level );
act_wiz.c:                          victim->pcdata->deity ? victim->pcdata->deity->name : "(none)",
act_wiz.c:                          victim->pcdata->favor, victim->pcdata->quest_curr, victim->pcdata->quest_accum );
act_wiz.c:                          victim->pcdata->condition[COND_THIRST],
act_wiz.c:                          victim->pcdata->condition[COND_FULL], victim->pcdata->condition[COND_DRUNK] );
act_wiz.c:      pager_printf_color( ch, "&cPcflags    : &w%s\r\n", flag_string( victim->pcdata->flags, pc_flags ) );
act_wiz.c:      if( victim->pcdata->nuisance )
act_wiz.c:                             victim->pcdata->nuisance->flags, MAX_NUISANCE_STAGE, victim->pcdata->nuisance->power,
act_wiz.c:                             ctime( &victim->pcdata->nuisance->set_time ) );
act_wiz.c:   if( victim->pcdata && victim->pcdata->bestowments && victim->pcdata->bestowments[0] != '\0' )
act_wiz.c:      pager_printf_color( ch, "&cBestowments: &w%s\r\n", victim->pcdata->bestowments );
act_wiz.c:   if( owner->pcdata->deity )
act_wiz.c:                          owner->level, owner->pcdata->favor, owner->pcdata->deity->name, owner->pcdata->deity->scorpse );
act_wiz.c:   if( get_trust( victim ) >= get_trust( ch ) || ( victim->pcdata && victim->pcdata->min_snoop > get_trust( ch ) ) )
act_wiz.c:      if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
act_wiz.c:      if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
act_wiz.c:      victim->pcdata->learned[sn] = 0;
act_wiz.c:         if( victim->pcdata->bestowments )
act_wiz.c:            DISPOSE( victim->pcdata->bestowments );
act_wiz.c:         victim->pcdata->bestowments = str_dup( "" );
act_wiz.c:         victim->pcdata->learned[sn] = 0;
act_wiz.c:      DISPOSE( victim->pcdata->rank );
act_wiz.c:      victim->pcdata->rank = str_dup( "" );
act_wiz.c:      victim->pcdata->wizinvis = victim->trust;
act_wiz.c:         victim->pcdata->wizinvis = 0;
act_wiz.c:   if( victim->pcdata->clan )
act_wiz.c:      if( victim->pcdata->clan->clan_type == CLAN_GUILD )
act_wiz.c:            if( skill_table[sn]->guild == victim->pcdata->clan->Class && skill_table[sn]->name != NULL )
act_wiz.c:               victim->pcdata->learned[sn] = 0;
act_wiz.c:      --victim->pcdata->clan->members;
act_wiz.c:      if( !str_cmp( victim->name, victim->pcdata->clan->leader ) )
act_wiz.c:         STRFREE( victim->pcdata->clan->leader );
act_wiz.c:         victim->pcdata->clan->leader = STRALLOC( "" );
act_wiz.c:      if( !str_cmp( victim->name, victim->pcdata->clan->number1 ) )
act_wiz.c:         STRFREE( victim->pcdata->clan->number1 );
act_wiz.c:         victim->pcdata->clan->number1 = STRALLOC( "" );
act_wiz.c:      if( !str_cmp( victim->name, victim->pcdata->clan->number2 ) )
act_wiz.c:         STRFREE( victim->pcdata->clan->number2 );
act_wiz.c:         victim->pcdata->clan->number2 = STRALLOC( "" );
act_wiz.c:      victim->pcdata->clan = NULL;
act_wiz.c:      STRFREE( victim->pcdata->clan_name );
act_wiz.c:   CREATE( victim->pcdata->tell_history, const char *, 26 );
act_wiz.c:      victim->pcdata->tell_history[i] = NULL;
act_wiz.c:      ch->pcdata->restore_time = current_time;
act_wiz.c:            if( deity && vch->pcdata->deity != deity )
act_wiz.c:            vch->pcdata->condition[COND_BLOODTHIRST] = ( 10 + vch->level );
act_wiz.c:         victim->pcdata->condition[COND_BLOODTHIRST] = ( 10 + victim->level );
act_wiz.c:   if( !ch->pcdata->restore_time )
act_wiz.c:   time_passed = current_time - ch->pcdata->restore_time;
act_wiz.c:   if( IS_SET( victim->pcdata->flags, PCFLAG_NOCPOSE ) )
act_wiz.c:      REMOVE_BIT( victim->pcdata->flags, PCFLAG_NOCPOSE );
act_wiz.c:      SET_BIT( victim->pcdata->flags, PCFLAG_NOCPOSE );
act_wiz.c:      STRFREE( victim->pcdata->cpose );
act_wiz.c:      victim->pcdata->cpose = STRALLOC( "" );
act_wiz.c:   if( IS_SET( victim->pcdata->flags, PCFLAG_NODESC ) )
act_wiz.c:      REMOVE_BIT( victim->pcdata->flags, PCFLAG_NODESC );
act_wiz.c:      SET_BIT( victim->pcdata->flags, PCFLAG_NODESC );
act_wiz.c:   if( IS_SET( victim->pcdata->flags, PCFLAG_NOBIO ) )
act_wiz.c:      REMOVE_BIT( victim->pcdata->flags, PCFLAG_NOBIO );
act_wiz.c:      SET_BIT( victim->pcdata->flags, PCFLAG_NOBIO );
act_wiz.c:      STRFREE( victim->pcdata->bio );
act_wiz.c:      victim->pcdata->bio = STRALLOC( "" );
act_wiz.c:   if( IS_SET( victim->pcdata->flags, PCFLAG_NOBECKON ) )
act_wiz.c:      REMOVE_BIT( victim->pcdata->flags, PCFLAG_NOBECKON );
act_wiz.c:      SET_BIT( victim->pcdata->flags, PCFLAG_NOBECKON );
act_wiz.c:   if( IS_SET( victim->pcdata->flags, PCFLAG_NOTITLE ) )
act_wiz.c:      REMOVE_BIT( victim->pcdata->flags, PCFLAG_NOTITLE );
act_wiz.c:      SET_BIT( victim->pcdata->flags, PCFLAG_NOTITLE );
act_wiz.c:         ch->pcdata->wizinvis = level;
act_wiz.c:   if( ch->pcdata->wizinvis < 2 )
act_wiz.c:      ch->pcdata->wizinvis = ch->level;
act_wiz.c:         victim->pcdata->learned[sn] = 0;
act_wiz.c:      DISPOSE( victim->pcdata->rank );
act_wiz.c:      victim->pcdata->rank = str_dup( "" );
act_wiz.c:         victim->pcdata->wizinvis = victim->trust;
act_wiz.c:         victim->pcdata->wizinvis = victim->trust;
act_wiz.c:   if( !victim->pcdata->bestowments )
act_wiz.c:      victim->pcdata->bestowments = str_dup( "" );
act_wiz.c:      extract_area_names( victim->pcdata->bestowments, buf );
act_wiz.c:      remove_area_names( victim->pcdata->bestowments, buf );
act_wiz.c:      DISPOSE( victim->pcdata->bestowments );
act_wiz.c:      victim->pcdata->bestowments = str_dup( buf );
act_wiz.c:   snprintf( buf, MAX_STRING_LENGTH, "%s %s", victim->pcdata->bestowments, argument );
act_wiz.c:   DISPOSE( victim->pcdata->bestowments );
act_wiz.c:   victim->pcdata->bestowments = str_dup( buf );
act_wiz.c:   if( !victim->pcdata->bestowments )
act_wiz.c:      victim->pcdata->bestowments = str_dup( "" );
act_wiz.c:      ch_printf( ch, "Current bestowed commands on %s: %s.\r\n", victim->name, victim->pcdata->bestowments );
act_wiz.c:      DISPOSE( victim->pcdata->bestowments );
act_wiz.c:      victim->pcdata->bestowments = str_dup( "" );
act_wiz.c:      cmd_buf = victim->pcdata->bestowments;
act_wiz.c:   snprintf( buf, MAX_STRING_LENGTH, "%s %s", victim->pcdata->bestowments, arg_buf );
act_wiz.c:   DISPOSE( victim->pcdata->bestowments );
act_wiz.c:   victim->pcdata->bestowments = str_dup( buf );
act_wiz.c:   if( victim->pcdata->release_date != 0 )
act_wiz.c:                 ctime( &victim->pcdata->release_date ), victim->pcdata->helled_by );
act_wiz.c:   victim->pcdata->release_date = mktime( tms );
act_wiz.c:   victim->pcdata->helled_by = STRALLOC( ch->name );
act_wiz.c:   ch_printf( ch, "%s will be released from hell at %24.24s.\r\n", victim->name, ctime( &victim->pcdata->release_date ) );
act_wiz.c:   if( victim->pcdata->clan )
act_wiz.c:      location = get_room_index( victim->pcdata->clan->recall );
act_wiz.c:   if( victim->pcdata->helled_by )
act_wiz.c:      if( str_cmp( ch->name, victim->pcdata->helled_by ) )
act_wiz.c:                    victim->pcdata->helled_by );
act_wiz.c:      STRFREE( victim->pcdata->helled_by );
act_wiz.c:      victim->pcdata->helled_by = NULL;
act_wiz.c:   victim->pcdata->release_date = 0;
act_wiz.c:      victim->pcdata->condition[COND_DRUNK] = 0;
act_wiz.c:      if( str_cmp( ch->pcdata->council_name, "Quest Council" ) && ( get_trust( ch ) < LEVEL_DEMI ) )
act_wiz.c:      victim->pcdata->quest_curr += amount;
act_wiz.c:      victim->pcdata->quest_accum += amount;
act_wiz.c:      if( victim->pcdata->quest_curr - amount < 0 )
act_wiz.c:         victim->pcdata->quest_curr -= amount;
act_wiz.c:              victim->name, victim->pcdata->quest_curr, victim->pcdata->quest_accum );
act_wiz.c:   for( track = 0; track < MAX_KILLTRACK && vch->pcdata->killed[track].vnum; track++ )
act_wiz.c:      tmob = get_mob_index( vch->pcdata->killed[track].vnum );
act_wiz.c:      ch_printf( ch, "    - killed %d times.\r\n", vch->pcdata->killed[track].count );
act_wiz.c:      if( str_cmp( ch->pcdata->council_name, "Code Council" )
act_wiz.c:      if( get_trust( ch ) < LEVEL_GOD && str_cmp( ch->pcdata->council_name, "Code Council" ) )
act_wiz.c:      if( get_trust( ch ) < LEVEL_GOD && str_cmp( ch->pcdata->council_name, "Code Council" ) )
act_wiz.c:      if( str_cmp( ch->pcdata->council_name, "Code Council" ) && get_trust( ch ) < LEVEL_ASCENDANT )
act_wiz.c:          && pproject->coder && str_cmp( pproject->coder, ch->name ) && str_cmp( ch->pcdata->council_name, "Code Council" ) )
act_wiz.c:             get_trust( ch ) < LEVEL_GREATER && str_cmp( ch->pcdata->council_name, "Code Council" ) )
act_wiz.c:             && str_cmp( ch->name, pproject->coder ) && str_cmp( ch->pcdata->council_name, "Code Council" ) )
act_wiz.c:             pproject->coder && str_cmp( ch->name, pproject->coder ) && str_cmp( ch->pcdata->council_name, "Code Council" ) )
act_wiz.c:             && str_cmp( ch->name, pproject->coder ) && str_cmp( ch->pcdata->council_name, "Code Council" ) )
act_wiz.c:   if( victim->pcdata->nuisance )
act_wiz.c:   CREATE( victim->pcdata->nuisance, NUISANCE_DATA, 1 );
act_wiz.c:   victim->pcdata->nuisance->set_time = current_time;
act_wiz.c:   victim->pcdata->nuisance->flags = 1;
act_wiz.c:   victim->pcdata->nuisance->power = power;
act_wiz.c:   victim->pcdata->nuisance->max_time = mktime( now_time );
act_wiz.c:   if( !victim->pcdata->nuisance )
act_wiz.c:   DISPOSE( victim->pcdata->nuisance );
act_wiz.c:   snprintf( oldname, MAX_STRING_LENGTH, "%s%c/%s", PLAYER_DIR, tolower( victim->pcdata->filename[0] ),
act_wiz.c:             capitalize( victim->pcdata->filename ) );
act_wiz.c:   snprintf( backname, MAX_STRING_LENGTH, "%s%c/%s", BACKUP_DIR, tolower( victim->pcdata->filename[0] ),
act_wiz.c:             capitalize( victim->pcdata->filename ) );
act_wiz.c:      snprintf( godname, MAX_STRING_LENGTH, "%s%s", GOD_DIR, capitalize( victim->pcdata->filename ) );
act_wiz.c:   if( victim->pcdata->area )
act_wiz.c:   STRFREE( victim->pcdata->filename );
act_wiz.c:   victim->pcdata->filename = STRALLOC( capitalize( arg2 ) );
act_wiz.c:      if( victim->pcdata->area )
act_wiz.c:         close_area( victim->pcdata->area );
act_wiz.c:      victim->pcdata->area = NULL;
act_wiz.c:      victim->pcdata->r_range_lo = 0;
act_wiz.c:      victim->pcdata->r_range_hi = 0;
act_wiz.c:      victim->pcdata->o_range_lo = 0;
act_wiz.c:      victim->pcdata->o_range_hi = 0;
act_wiz.c:      victim->pcdata->m_range_lo = 0;
act_wiz.c:      victim->pcdata->m_range_hi = 0;
act_wiz.c:   if( victim->pcdata->area && lo != 0 )
act_wiz.c:   victim->pcdata->r_range_lo = lo;
act_wiz.c:   victim->pcdata->r_range_hi = hi;
act_wiz.c:   victim->pcdata->o_range_lo = lo;
act_wiz.c:   victim->pcdata->o_range_hi = hi;
act_wiz.c:   victim->pcdata->m_range_lo = lo;
act_wiz.c:   victim->pcdata->m_range_hi = hi;
act_wiz.c:   if( !victim->pcdata->area )
act_wiz.c:   tarea = victim->pcdata->area;
act_wiz.c:    if ( IS_SET( ch->pcdata->flags, PCFLAG_BUILDWALK ) )
act_wiz.c:        REMOVE_BIT( ch->pcdata->flags, PCFLAG_BUILDWALK );
act_wiz.c:        SET_BIT( ch->pcdata->flags, PCFLAG_BUILDWALK );
agecommand.c:             && ( skill->guild != CLASS_NONE && ( !IS_GUILDED( ch ) || ( ch->pcdata->clan->Class != skill->guild ) ) ) )
agecommand.c:         if( ch->pcdata->learned[sn] <= 0 && SPELL_FLAG( skill, SF_SECRETSKILL ) )
agecommand.c:if ( ch->pcdata->learned[normalSn] <= 99 )
agecommand.c://         if( ch->pcdata->learned[normalSn] > 99 )
agecommand.c://         if( ch->pcdata->learned[normalSn] < 99 )
agecommand.c:        if ( ch->pcdata->souls <= 1999)
agecommand.c:        ch->pcdata->souls -= 2000;
agecommand.c:   if( IS_SET( ch->pcdata->flags, PCFLAG_NOCPOSE ) )
agecommand.c:      ch->pcdata->cpose = str_dup( " is here." );
agecommand.c:   ch->pcdata->cpose = STRALLOC( buf );
agecommand.c:      ch->pcdata->customclass = str_dup( "Adventurer" );
agecommand.c:   ch->pcdata->customclass = STRALLOC( buf );
agecommand.c:pager_printf( ch, "&CYou are a level %d %s %s from %s.\r\n", ch->level, capitalize( get_race( ch ) ),  ch->pcdata->customclass, ch->pcdata->hometown  );
agecommand.c:pager_printf( ch, "Your TIER rank is %d.\r\n\r\n", ch->pcdata->tier);
agecommand.c:                    (ch->pcdata->str + ch->mod_str) , (ch->mod_str + ch->pcdata->str + ch->damroll) );
agecommand.c:                    (ch->pcdata->dex + ch->mod_dex), ((ch->pcdata->def )  + GET_AC(ch) *-1) );
agecommand.c:                    (ch->pcdata->intel + ch->mod_int) , (ch->saving_poison_death + ch->saving_wand + ch->saving_para_petri + ch->saving_breath + ch->saving_spell_staff));
agecommand.c:                    (ch->pcdata->lck + ch->mod_lck ) );
agecommand.c:                    ch->gold, ch->pcdata->ap, ch->practice );
agecommand.c:pager_printf( ch, "Your Cpose is set at '%s'\r\n", ch->pcdata->cpose );
agecommand.c:                    ch->pcdata->pkills, ch->pcdata->illegal_pk, ch->pcdata->pdeaths );
agecommand.c:   if( ch->pcdata->clan && ch->pcdata->clan->clan_type != CLAN_ORDER && ch->pcdata->clan->clan_type != CLAN_GUILD )
agecommand.c:                    ch->pcdata->clan->name, ch->pcdata->clan->pkills[6],
agecommand.c:                    ( ch->pcdata->clan->pkills[1] + ch->pcdata->clan->pkills[2] +
agecommand.c:                      ch->pcdata->clan->pkills[3] + ch->pcdata->clan->pkills[4] + ch->pcdata->clan->pkills[5] ) );
agecommand.c:                    ch->pcdata->clan->pdeaths[6],
agecommand.c:                    ( ch->pcdata->clan->pdeaths[1] + ch->pcdata->clan->pdeaths[2] +
agecommand.c:                      ch->pcdata->clan->pdeaths[3] + ch->pcdata->clan->pdeaths[4] + ch->pcdata->clan->pdeaths[5] ) );
agecommand.c:                    xIS_SET( ch->act, PLR_WIZINVIS ) ? "X" : " ", ch->pcdata->wizinvis );
agecommand.c:      pager_printf( ch, "Bamfin:  %s\r\n", ( ch->pcdata->bamfin[0] != '\0' )
agecommand.c:                    ? ch->pcdata->bamfin : "An immortal appears." );
agecommand.c:      pager_printf( ch, "Bamfout: %s\r\n", ( ch->pcdata->bamfout[0] != '\0' )
agecommand.c:                    ? ch->pcdata->bamfout : "The immortal disappears." );
agecommand.c:      if( ch->pcdata->area )
agecommand.c:                       ch->pcdata->area->low_r_vnum, ch->pcdata->area->hi_r_vnum,
agecommand.c:                       ch->pcdata->area->low_o_vnum, ch->pcdata->area->hi_o_vnum,
agecommand.c:                       ch->pcdata->area->low_m_vnum, ch->pcdata->area->hi_m_vnum );
agecommand.c:         pager_printf( ch, "Area Loaded [%s]\r\n", ( IS_SET( ch->pcdata->area->status, AREA_LOADED ) ) ? "yes" : "no" );
agecommand.c:	ch->name, ch->level, ch->pcdata->customclass );
agecommand.c:                    ch->gold, ch->pcdata->ap, ch->practice );
agecommand.c:  int AP = ch->pcdata->ap;
agecommand.c:			ch->pcdata->str++;
agecommand.c:			ch->pcdata->ap = AP-30;
agecommand.c:			ch->pcdata->dex++;
agecommand.c:			ch->pcdata->ap = AP-30;
agecommand.c:			ch->pcdata->intel++;
agecommand.c:			ch->pcdata->ap = AP-20;
agecommand.c:			ch->pcdata->lck++;
agecommand.c:			ch->pcdata->ap = AP-30;
agecommand.c:			ch->pcdata->ap = AP-50;
agecommand.c:			ch->pcdata->ap = AP-50;
agecommand.c:			ch->pcdata->ap = AP-30;
agemobcomm.c:   victim->pcdata->learned[sn] = 100;
agemobcomm.c:   victim->pcdata->learned[sn] = 0;
att:act_comm.c:   drunk = ch->pcdata->condition[COND_DRUNK];
att:act_comm.c:            ch_printf( ch, "(%d) ", ( !IS_NPC( ch ) ) ? ch->pcdata->wizinvis : ch->mobinvis );
att:act_comm.c:            ch_printf( ch, "(%d) ", ( !IS_NPC( ch ) ) ? ch->pcdata->wizinvis : ch->mobinvis );
att:act_comm.c:            ch_printf( ch, "(%d) ", ( !IS_NPC( ch ) ) ? ch->pcdata->wizinvis : ch->mobinvis );
att:act_comm.c:            ch_printf( ch, "(%d) ", ( !IS_NPC( ch ) ) ? ch->pcdata->wizinvis : ch->mobinvis );
att:act_comm.c:            ch_printf( ch, "(%d) ", ( !IS_NPC( ch ) ) ? ch->pcdata->wizinvis : ch->mobinvis );
att:act_comm.c:            ch_printf( ch, "(%d) ", ( !IS_NPC( ch ) ) ? ch->pcdata->wizinvis : ch->mobinvis );
att:act_comm.c:             ( !IS_NPC( och ) && !IS_SET( och->pcdata->flags, PCFLAG_RETIRED ) ) )
att:act_comm.c:               && !( och->pcdata->council && !str_cmp( och->pcdata->council->name, "Newbie Council" ) ) ) )
att:act_comm.c:            if( vch->pcdata->clan != ch->pcdata->clan )
att:act_comm.c:            if( vch->pcdata->council != ch->pcdata->council )
att:act_comm.c:            snprintf( lbuf, MAX_INPUT_LENGTH + 4, "(%d) ", ( !IS_NPC( ch ) ) ? ch->pcdata->wizinvis : ch->mobinvis );
att:act_comm.c:         if( !IS_NPC( ch ) && ch->pcdata->nuisance
att:act_comm.c:             && ch->pcdata->nuisance->flags > 7
att:act_comm.c:             && ( number_percent(  ) < ( ( ch->pcdata->nuisance->flags - 7 ) * 10 * ch->pcdata->nuisance->power ) ) )
att:act_comm.c:         if( !IS_NPC( vch ) && vch->pcdata->nuisance &&
att:act_comm.c:             vch->pcdata->nuisance->flags > 7
att:act_comm.c:             && ( number_percent(  ) < ( ( vch->pcdata->nuisance->flags - 7 ) * 10 * vch->pcdata->nuisance->power ) ) )
att:act_comm.c:   if( IS_NPC( ch ) || !ch->pcdata->clan
att:act_comm.c:       || ch->pcdata->clan->clan_type == CLAN_ORDER || ch->pcdata->clan->clan_type == CLAN_GUILD )
att:act_comm.c:            && !( ch->pcdata->council && !str_cmp( ch->pcdata->council->name, "Newbie Council" ) ) ) )
att:act_comm.c:   if( IS_NPC( ch ) || !ch->pcdata->clan || ch->pcdata->clan->clan_type != CLAN_ORDER )
att:act_comm.c:   if( IS_NPC( ch ) || !ch->pcdata->council )
att:act_comm.c:   if( IS_NPC( ch ) || !ch->pcdata->clan || ch->pcdata->clan->clan_type != CLAN_GUILD )
att:act_comm.c:   if( !IS_IMMORTAL( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_RETIRED ) )
att:act_comm.c:   if( IS_SET( ch->pcdata->flags, PCFLAG_NOBECKON ) )
att:act_comm.c:      victim->pcdata->lt_index = tolower( IS_NPC( ch ) ? ch->short_descr[0] : ch->name[0] ) - 'a';
att:act_comm.c:      victim->pcdata->lt_index = tolower( IS_NPC( ch ) ? ch->short_descr[0] : ch->name[0] ) - 'a';
att:act_comm.c:      victim->pcdata->lt_index = tolower( IS_NPC( ch ) ? ch->short_descr[0] : ch->name[0] ) - 'a';
att:act_comm.c:   if( IS_NPC( ch ) || !IS_IMMORTAL( ch ) || !ch->pcdata->tell_history )
att:act_comm.c:      tindex = ch->pcdata->lt_index;
att:act_comm.c:   if( ch->pcdata->tell_history[tindex] )
att:act_comm.c:      send_to_char( ch->pcdata->tell_history[tindex], ch );
att:act_comm.c:   if( get_trust( ch ) >= LEVEL_ASCENDANT || is_name( "bug", ch->pcdata->bestowments ) )
att:act_comm.c:   if( ch->level >= LEVEL_HERO && !ch->pcdata->pet ) /* Pet crash fix */
att:act_comm.c:   if( sysdata.save_pets && ch->pcdata->pet )
att:act_comm.c:      act( AT_BYE, "$N follows $S master into the Void.", ch, NULL, ch->pcdata->pet, TO_ROOM );
att:act_comm.c:      extract_char( ch->pcdata->pet, TRUE );
att:act_comm.c:   if( ch->pcdata->clan )
att:act_comm.c:      save_clan( ch->pcdata->clan );
att:act_comm.c:   if( !ch->pcdata->council )
att:act_comm.c:   if( str_cmp( ch->pcdata->council->name, "Newbie Council" ) )
att:act_comm.c:   if( IS_NPC( ch ) && !IS_NPC( ch->master ) && ch->master->pcdata->pet == ch )
att:act_comm.c:      ch->master->pcdata->pet = NULL;
att:act_comm.c:         ch->master->pcdata->charmies--;
att:act_comm.c:                          IS_VAMPIRE( gch ) ? gch->pcdata->condition[COND_BLOODTHIRST] : gch->mana,
att:act_comm.c:      if( ch->pcdata->clan == cch->pcdata->clan && ch->pcdata->clan != NULL )
att:act_comm.c:               return ch->pcdata->learned[sn];
att:act_comm.c:            if( ch->pcdata->learned[sn] >= 99 )
att:act_comm.c:            if( lang_array[langs] == LANG_CLAN && ( IS_NPC( ch ) || !ch->pcdata->clan ) )
att:act_comm.c:          lang_array[lang] == LANG_COMMON || ch->pcdata->learned[sn] >= 99 )
att:act_comm.c:      if( countlangs( ch->speaks ) >= ( ch->level / 10 ) && ch->pcdata->learned[sn] <= 0 )
att:act_comm.c:      ch->pcdata->learned[sn] += prct;
att:act_comm.c:      ch->pcdata->learned[sn] = UMIN( ch->pcdata->learned[sn], 99 );
att:act_comm.c:      if( ch->pcdata->learned[sn] == prct )
att:act_comm.c:      else if( ch->pcdata->learned[sn] < 60 )
att:act_comm.c:      else if( ch->pcdata->learned[sn] < 60 + prct )
att:act_comm.c:      else if( ch->pcdata->learned[sn] < 99 )
att:act_info.c:      * ( IS_NPC( ch ) ? 1 : ( ch->pcdata->condition[COND_DRUNK] ? ( ch->pcdata->condition[COND_DRUNK] / 12 ) : 1 ) );
att:act_info.c:   else if( ch->pcdata->learned[gsn_peek] > 0 )
att:act_info.c:      SET_BIT( ch->pcdata->flags, PCFLAG_HELPSTART );
att:act_info.c:      if( wch->level < iLevelLower || wch->level > iLevelUpper || ( fPkill && !CAN_PKILL( wch ) ) || ( fImmortalOnly && wch->level < LEVEL_IMMORTAL ) || ( fClassRestrict && !rgfClass[wch->Class] ) || ( fRaceRestrict && !rgfRace[wch->race] ) || ( fClanMatch && ( pClan != wch->pcdata->clan ) )  /* SB */
att:act_info.c:          || ( fCouncilMatch && ( pCouncil != wch->pcdata->council ) )  /* SB */
att:act_info.c:          || ( fDeityMatch && ( pDeity != wch->pcdata->deity ) ) )
att:act_info.c:      if( fLeader && !( wch->pcdata->council &&
att:act_info.c:                        ( ( wch->pcdata->council->head2 &&
att:act_info.c:                            !str_cmp( wch->pcdata->council->head2, wch->name ) ) ||
att:act_info.c:                          ( wch->pcdata->council->head &&
att:act_info.c:                            !str_cmp( wch->pcdata->council->head, wch->name ) ) ) ) &&
att:act_info.c:          !( wch->pcdata->clan && ( ( wch->pcdata->clan->deity &&
att:act_info.c:                                      !str_cmp( wch->pcdata->clan->deity, wch->name ) )
att:act_info.c:                                    || ( wch->pcdata->clan->leader
att:act_info.c:                                         && !str_cmp( wch->pcdata->clan->leader, wch->name ) )
att:act_info.c:                                    || ( wch->pcdata->clan->number1
att:act_info.c:                                         && !str_cmp( wch->pcdata->clan->number1, wch->name ) )
att:act_info.c:                                    || ( wch->pcdata->clan->number2
att:act_info.c:                                         && !str_cmp( wch->pcdata->clan->number2, wch->name ) ) ) ) )
att:act_info.c:      if( fGroup && !wch->leader && !IS_SET( wch->pcdata->flags, PCFLAG_GROUPWHO ) && ( !whogr_p || !whogr_p->indent ) )
att:act_info.c:      if( fShowHomepage && wch->pcdata->homepage && wch->pcdata->homepage[0] != '\0' )
att:act_info.c:         snprintf( char_name, MAX_INPUT_LENGTH, "<A HREF=\"%s\">%s</A>", show_tilde( wch->pcdata->homepage ), wch->name );
att:act_info.c:      else if( wch->pcdata->clan
att:act_info.c:               && !str_cmp( wch->name, wch->pcdata->clan->leader ) && wch->pcdata->clan->leadrank[0] != '\0' )
att:act_info.c:         Class = wch->pcdata->clan->leadrank;
att:act_info.c:      else if( wch->pcdata->clan
att:act_info.c:               && !str_cmp( wch->name, wch->pcdata->clan->number1 ) && wch->pcdata->clan->onerank[0] != '\0' )
att:act_info.c:         Class = wch->pcdata->clan->onerank;
att:act_info.c:      else if( wch->pcdata->clan
att:act_info.c:               && !str_cmp( wch->name, wch->pcdata->clan->number2 ) && wch->pcdata->clan->tworank[0] != '\0' )
att:act_info.c:         Class = wch->pcdata->clan->tworank;
att:act_info.c:      else if( wch->pcdata->rank && wch->pcdata->rank[0] != '\0' )
att:act_info.c:         Class = wch->pcdata->rank;
att:act_info.c:      if( wch->pcdata->clan )
att:act_info.c:         CLAN_DATA *pclan = wch->pcdata->clan;
att:act_info.c:      if( wch->pcdata->council )
att:act_info.c:         if( wch->pcdata->council->head2 == NULL )
att:act_info.c:            if( !str_cmp( wch->name, wch->pcdata->council->head ) )
att:act_info.c:            if( !str_cmp( wch->name, wch->pcdata->council->head ) || !str_cmp( wch->name, wch->pcdata->council->head2 ) )
att:act_info.c:         mudstrlcat( council_name, wch->pcdata->council_name, MAX_INPUT_LENGTH );
att:act_info.c:         snprintf( invis_str, MAX_INPUT_LENGTH, "(%d) ", wch->pcdata->wizinvis );
att:act_info.c:                wch->pcdata->customclass,
att:act_info.c:                char_name, wch->pcdata->title, extra_title, clan_name, council_name );
att:act_info.c:             && ( skill->guild != CLASS_NONE && ( !IS_GUILDED( ch ) || ( ch->pcdata->clan->Class != skill->guild ) ) ) )
att:act_info.c:         if( ch->pcdata->learned[sn] <= 0 && SPELL_FLAG( skill, SF_SECRETSKILL ) )
att:act_info.c:         if( ch->pcdata->learned[normalSn] > 0 )
att:act_info.c:         pager_printf( ch, " %3d%% ", ch->pcdata->learned[normalSn] );
att:act_info.c:	     && ch->pcdata->clan->class != skill_table[sn]->guild )
att:act_info.c:      if( ch->pcdata->learned[sn] >= adept )
att:act_info.c:         ch->pcdata->learned[sn] += int_app[get_curr_int( ch )].learn;
att:act_info.c:         if( ch->pcdata->learned[sn] >= adept )
att:act_info.c:            ch->pcdata->learned[sn] = adept;
att:act_info.c:   DISPOSE( ch->pcdata->pwd );
att:act_info.c:   ch->pcdata->pwd = str_dup( pwdnew );
att:act_info.c:      if( !IS_NPC( ch ) && ch->pcdata->clan )
att:act_info.c:         if( ch->pcdata->clan->clan_type == CLAN_ORDER )
att:act_info.c:         else if( ch->pcdata->clan->clan_type == CLAN_GUILD )
att:act_info.c:      if( IS_IMMORTAL( ch ) || ( ch->pcdata->council && !str_cmp( ch->pcdata->council->name, "Newbie Council" ) ) )
att:act_info.c:      if( !IS_NPC( ch ) && ch->pcdata->council )
att:act_info.c:      if( !IS_NPC( ch ) && IS_SET( ch->pcdata->flags, PCFLAG_RETIRED ) )
att:act_info.c:      else if( !str_cmp( arg + 1, "clan" ) && !IS_NPC( ch ) && ch->pcdata->clan
att:act_info.c:               && ch->pcdata->clan->clan_type != CLAN_ORDER && ch->pcdata->clan->clan_type != CLAN_GUILD )
att:act_info.c:      else if( !str_cmp( arg + 1, "council" ) && !IS_NPC( ch ) && ch->pcdata->council )
att:act_info.c:      else if( !str_cmp( arg + 1, "guild" ) && !IS_NPC( ch ) && ch->pcdata->clan
att:act_info.c:               && ch->pcdata->clan->clan_type == CLAN_GUILD )
att:act_info.c:                                                  || ( ch->pcdata->council
att:act_info.c:                                                       && !str_cmp( ch->pcdata->council->name, "Newbie Council" ) ) ) )
att:act_info.c:      else if( !str_cmp( arg + 1, "order" ) && !IS_NPC( ch ) && ch->pcdata->clan
att:act_info.c:               && ch->pcdata->clan->clan_type == CLAN_ORDER )
att:act_info.c:          * if (ch->pcdata->clan)
att:act_info.c:          * if (ch->pcdata->council)
att:act_info.c:          * if (ch->pcdata->guild)
att:act_info.c:          * if (ch->pcdata->clan)
att:act_info.c:          * if (ch->pcdata->council)
att:act_info.c:                 IS_SET( ch->pcdata->flags, PCFLAG_PAGERON ) ? "[+] PAGER"
att:act_info.c:                 IS_SET( ch->pcdata->flags, PCFLAG_GAG ) ? "[+] GAG"
att:act_info.c:                 IS_SET( ch->pcdata->flags, PCFLAG_NORECALL ) ? "[+] NORECALL"
att:act_info.c:                 : "[-] norecall", IS_SET( ch->pcdata->flags, PCFLAG_NOSUMMON ) ? "[+] NOSUMMON" : "[-] nosummon" );
att:act_info.c:      if( !IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
att:act_info.c:                 IS_SET( ch->pcdata->flags, PCFLAG_GROUPWHO ) ? "[+] GROUPWHO" : "[-] groupwho",
att:act_info.c:                 IS_SET( ch->pcdata->flags, PCFLAG_NOINTRO ) ? "[+] NOINTRO" : "[-] nointro",
att:act_info.c:                 IS_SET( ch->pcdata->flags, PCFLAG_BECKON ) ? "[+] BECKON" : "[-] beckon" );
att:act_info.c:      ch_printf_color( ch, "Pager Length (%d)    Wimpy (&W%d&w)", ch->pcdata->pagerlen, ch->wimpy );
att:act_info.c:                 IS_SET( ch->pcdata->flags, PCFLAG_NODESC ) ? " You are not permitted to set your description.\r\n" : "" );
att:act_info.c:         if( ( bit == PLR_FLEE || bit == PLR_NICE || bit == PLR_SHOVEDRAG ) && IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
att:act_info.c:            SET_BIT( ch->pcdata->flags, bit );
att:act_info.c:            REMOVE_BIT( ch->pcdata->flags, bit );
att:act_info.c:         if( ch->pcdata->learned[normalSn] <= 0 && SPELL_FLAG( skill, SF_SECRETSKILL ) )
att:act_info.c:                          skn, skill->name, ch->pcdata->learned[normalSn], skill->skill_adept[ch->Class], buf );
att:act_info.c:      if( IS_SET( ch->pcdata->flags, PCFLAG_PAGERON ) )
att:act_info.c:         ch_printf( ch, "Pager is now enabled at %d lines.\r\n", ch->pcdata->pagerlen );
att:act_info.c:   ch->pcdata->pagerlen = atoi( arg );
att:act_info.c:   if( ch->pcdata->pagerlen < 5 )
att:act_info.c:      ch->pcdata->pagerlen = 5;
att:act_info.c:   ch_printf( ch, "Page pausing set to %d lines.\r\n", ch->pcdata->pagerlen );
att:act_info.c:      if( !ch->pcdata->first_ignored )
att:act_info.c:      for( temp = ch->pcdata->first_ignored; temp; temp = temp->next )
att:act_info.c:      for( temp = ch->pcdata->first_ignored; temp; temp = next )
att:act_info.c:         UNLINK( temp, ch->pcdata->first_ignored, ch->pcdata->last_ignored, next, prev );
att:act_info.c:      for( temp = ch->pcdata->first_ignored, i = 0; temp; temp = temp->next, i++ )
att:act_info.c:            UNLINK( temp, ch->pcdata->first_ignored, ch->pcdata->last_ignored, next, prev );
att:act_info.c:         LINK( inew, ch->pcdata->first_ignored, ch->pcdata->last_ignored, next, prev );
att:act_info.c:   for( temp = ch->pcdata->first_ignored; temp; temp = temp->next )
att:act_move.c: if( ch->pcdata->cpose )
att:act_move.c:      ch->pcdata->cpose = str_dup( " is here." );
att:act_move.c:      if( ch->pcdata->nuisance && ch->pcdata->nuisance->flags > 8 &&
att:act_move.c:          number_percent(  ) > ( ch->pcdata->nuisance->flags * ch->pcdata->nuisance->power ) )
att:act_obj.c:                && !IS_NPC( ch ) && IS_SET( ch->pcdata->flags, PCFLAG_DEADLY )
att:act_obj.c:   if( !IS_NPC( ch ) && ( !IS_PKILL( ch ) || ( IS_PKILL( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_GAG ) ) ) )
att:act_obj.c:   if( IS_NPC( ch ) || ch->pcdata->learned[gsn_dual_wield] )
att:act_obj.c:   if( !IS_NPC( ch ) && ch->pcdata->deity && ch->pcdata->deity->name[0] != '\0' )
att:act_obj.c:      mudstrlcpy( name, ch->pcdata->deity->name, 50 );
att:act_obj.c:   else if( !IS_NPC( ch ) && ch->pcdata->clan && ch->pcdata->clan->deity[0] != '\0' )
att:act_obj.c:      mudstrlcpy( name, ch->pcdata->clan->deity, 50 );
att:act_obj.c:         if( !IS_NPC( vch ) && xIS_SET( vch->act, PLR_WIZINVIS ) && vch->pcdata->wizinvis >= LEVEL_IMMORTAL )
att:act_wiz.c:      if( IS_SET( ch->pcdata->flags, PCFLAG_DND ) )
att:act_wiz.c:         REMOVE_BIT( ch->pcdata->flags, PCFLAG_DND );
att:act_wiz.c:         SET_BIT( ch->pcdata->flags, PCFLAG_DND );
att:act_wiz.c:      victim->pcdata->authed_by = QUICKLINK( ch->name );
att:act_wiz.c:      DISPOSE( ch->pcdata->bamfin );
att:act_wiz.c:      ch->pcdata->bamfin = newbamf;
att:act_wiz.c:      DISPOSE( ch->pcdata->bamfout );
att:act_wiz.c:      ch->pcdata->bamfout = newbamf;
att:act_wiz.c:   DISPOSE( ch->pcdata->rank );
att:act_wiz.c:      ch->pcdata->rank = str_dup( "" );
att:act_wiz.c:      ch->pcdata->rank = newrank;
att:act_wiz.c:   if( wch && !IS_NPC( wch ) && IS_SET( wch->pcdata->flags, PCFLAG_DND ) && get_trust( ch ) < get_trust( wch ) )
att:act_wiz.c:      if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
att:act_wiz.c:      if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
att:act_wiz.c:      ch->pcdata->restore_time = current_time;
att:act_wiz.c:            if( deity && vch->pcdata->deity != deity )
att:act_wiz.c:            vch->pcdata->condition[COND_BLOODTHIRST] = ( 10 + vch->level );
att:act_wiz.c:   if( !ch->pcdata->restore_time )
att:act_wiz.c:   time_passed = current_time - ch->pcdata->restore_time;
att:act_wiz.c:         ch->pcdata->wizinvis = level;
att:act_wiz.c:   if( ch->pcdata->wizinvis < 2 )
att:act_wiz.c:      ch->pcdata->wizinvis = ch->level;
att:act_wiz.c:   victim->pcdata->helled_by = STRALLOC( ch->name );
att:act_wiz.c:      if( str_cmp( ch->name, victim->pcdata->helled_by ) )
att:act_wiz.c:      if( str_cmp( ch->pcdata->council_name, "Quest Council" ) && ( get_trust( ch ) < LEVEL_DEMI ) )
att:act_wiz.c:   for( track = 0; track < MAX_KILLTRACK && vch->pcdata->killed[track].vnum; track++ )
att:act_wiz.c:      tmob = get_mob_index( vch->pcdata->killed[track].vnum );
att:act_wiz.c:      ch_printf( ch, "    - killed %d times.\r\n", vch->pcdata->killed[track].count );
att:act_wiz.c:      if( str_cmp( ch->pcdata->council_name, "Code Council" )
att:act_wiz.c:      if( get_trust( ch ) < LEVEL_GOD && str_cmp( ch->pcdata->council_name, "Code Council" ) )
att:act_wiz.c:      if( get_trust( ch ) < LEVEL_GOD && str_cmp( ch->pcdata->council_name, "Code Council" ) )
att:act_wiz.c:      if( str_cmp( ch->pcdata->council_name, "Code Council" ) && get_trust( ch ) < LEVEL_ASCENDANT )
att:act_wiz.c:          && pproject->coder && str_cmp( pproject->coder, ch->name ) && str_cmp( ch->pcdata->council_name, "Code Council" ) )
att:act_wiz.c:             get_trust( ch ) < LEVEL_GREATER && str_cmp( ch->pcdata->council_name, "Code Council" ) )
att:act_wiz.c:             && str_cmp( ch->name, pproject->coder ) && str_cmp( ch->pcdata->council_name, "Code Council" ) )
att:act_wiz.c:             pproject->coder && str_cmp( ch->name, pproject->coder ) && str_cmp( ch->pcdata->council_name, "Code Council" ) )
att:act_wiz.c:             && str_cmp( ch->name, pproject->coder ) && str_cmp( ch->pcdata->council_name, "Code Council" ) )
att:agecommand.c:             && ( skill->guild != CLASS_NONE && ( !IS_GUILDED( ch ) || ( ch->pcdata->clan->Class != skill->guild ) ) ) )
att:agecommand.c:         if( ch->pcdata->learned[sn] <= 0 && SPELL_FLAG( skill, SF_SECRETSKILL ) )
att:agecommand.c:if ( ch->pcdata->learned[normalSn] <= 99 )
att:agecommand.c:         if( ch->pcdata->learned[normalSn] > 99 )
att:agecommand.c:         if( ch->pcdata->learned[normalSn] < 99 )
att:agecommand.c:pager_printf( ch, "You have a balance of %d\r\n", ch->pcdata->balance);
att:agecommand.c:      amount = ch->pcdata->balance;
att:agecommand.c:   if( amount > ch->pcdata->balance )
att:agecommand.c:   ch->pcdata->balance -= amount;
att:agecommand.c:   ch->pcdata->balance += amount;
att:agecommand.c:        if ( ch->pcdata->souls <= 1999)
att:agecommand.c:        ch->pcdata->souls -= 2000;
att:agecommand.c:   if( IS_SET( ch->pcdata->flags, PCFLAG_NOCPOSE ) )
att:agecommand.c:      ch->pcdata->cpose = str_dup( " is here." );
att:agecommand.c:   ch->pcdata->cpose = STRALLOC( buf );
att:agecommand.c:      ch->pcdata->customclass = str_dup( "Adventurer" );
att:agecommand.c:   ch->pcdata->customclass = STRALLOC( buf );
att:agecommand.c:pager_printf( ch, "&CYou are a level %d %s %s from %s.\r\n", ch->level, capitalize( get_race( ch ) ),  ch->pcdata->customclass, ch->pcdata->hometown  );
att:agecommand.c:pager_printf( ch, "Your TIER rank is %d.\r\n\r\n", ch->pcdata->tier);
att:agecommand.c:                    (ch->pcdata->str + ch->pcdata->strplus), (ch->pcdata->str + ch->pcdata->att + ch->damroll),  ch->pcdata->attlevel );
att:agecommand.c:                    (ch->pcdata->dex + ch->pcdata->strplus), (ch->pcdata->def + ch->pcdata->defplus) , ch->pcdata->deflevel );
att:agecommand.c:                    (ch->pcdata->intel + ch->pcdata->intplus) , (ch->pcdata->mdef + ch->pcdata->mdefplus), ch->pcdata->mlevel );
att:agecommand.c:                    (ch->pcdata->lck + ch->pcdata->lckplus ) );
att:agecommand.c:                    ch->gold, ch->pcdata->ap, ch->practice );
att:agecommand.c:pager_printf( ch, "Your Cpose is set at '%s'\r\n", ch->pcdata->cpose );
att:agecommand.c:                    ch->pcdata->pkills, ch->pcdata->illegal_pk, ch->pcdata->pdeaths );
att:agecommand.c:   if( ch->pcdata->clan && ch->pcdata->clan->clan_type != CLAN_ORDER && ch->pcdata->clan->clan_type != CLAN_GUILD )
att:agecommand.c:                    ch->pcdata->clan->name, ch->pcdata->clan->pkills[6],
att:agecommand.c:                    ( ch->pcdata->clan->pkills[1] + ch->pcdata->clan->pkills[2] +
att:agecommand.c:                      ch->pcdata->clan->pkills[3] + ch->pcdata->clan->pkills[4] + ch->pcdata->clan->pkills[5] ) );
att:agecommand.c:                    ch->pcdata->clan->pdeaths[6],
att:agecommand.c:                    ( ch->pcdata->clan->pdeaths[1] + ch->pcdata->clan->pdeaths[2] +
att:agecommand.c:                      ch->pcdata->clan->pdeaths[3] + ch->pcdata->clan->pdeaths[4] + ch->pcdata->clan->pdeaths[5] ) );
att:agecommand.c:                    xIS_SET( ch->act, PLR_WIZINVIS ) ? "X" : " ", ch->pcdata->wizinvis );
att:agecommand.c:      pager_printf( ch, "Bamfin:  %s\r\n", ( ch->pcdata->bamfin[0] != '\0' )
att:agecommand.c:                    ? ch->pcdata->bamfin : "An immortal appears." );
att:agecommand.c:      pager_printf( ch, "Bamfout: %s\r\n", ( ch->pcdata->bamfout[0] != '\0' )
att:agecommand.c:                    ? ch->pcdata->bamfout : "The immortal disappears." );
att:agecommand.c:      if( ch->pcdata->area )
att:agecommand.c:                       ch->pcdata->area->low_r_vnum, ch->pcdata->area->hi_r_vnum,
att:agecommand.c:                       ch->pcdata->area->low_o_vnum, ch->pcdata->area->hi_o_vnum,
att:agecommand.c:                       ch->pcdata->area->low_m_vnum, ch->pcdata->area->hi_m_vnum );
att:agecommand.c:         pager_printf( ch, "Area Loaded [%s]\r\n", ( IS_SET( ch->pcdata->area->status, AREA_LOADED ) ) ? "yes" : "no" );
att:bank.c:   ch->pcdata->balance += amount;
att:bank.c:      amount = ch->pcdata->balance;
att:bank.c:   if( amount > ch->pcdata->balance )
att:bank.c:   ch->pcdata->balance -= amount;
att:bank.c:   ch_printf( ch, "You have %d gold in the bank.\r\n", ch->pcdata->balance );
att:boards.c:      if( ch->pcdata->clan && !str_cmp( ch->pcdata->clan->name, board->read_group ) )
att:boards.c:      if( ch->pcdata->council && !str_cmp( ch->pcdata->council->name, board->read_group ) )
att:boards.c:      if( ch->pcdata->clan && !str_cmp( ch->pcdata->clan->name, board->post_group ) )
att:boards.c:      if( ch->pcdata->council && !str_cmp( ch->pcdata->council->name, board->post_group ) )
att:build.c:   if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
att:build.c:   if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
att:build.c:   if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
att:build.c:   if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
att:build.c:   if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
att:build.c:      if( !IS_NPC( fch ) && get_trust( ch ) < get_trust( fch ) && IS_SET( fch->pcdata->flags, PCFLAG_DND ) )
att:build.c:      if( get_trust( ch ) < LEVEL_CREATOR || vnum < 1 || IS_NPC( ch ) || !ch->pcdata->area )
att:build.c:         if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
att:build.c:      location = make_room( vnum, ch->pcdata->area );
att:build.c:             && ch->pcdata->bamfout[0] != '\0' ) ? ch->pcdata->bamfout : ( char * )"The immortal disappears.", TO_ROOM );
att:build.c:             && ch->pcdata->bamfin[0] != '\0' ) ? ch->pcdata->bamfin : ( char * )"An immortal appears.", TO_ROOM );
att:build.c:         if( ch->pcdata && ch->pcdata->subprompt )
att:build.c:            STRFREE( ch->pcdata->subprompt );
att:build.c:            ch->pcdata->subprompt = NULL;
att:build.c:         if( ch->pcdata->subprompt )
att:build.c:            STRFREE( ch->pcdata->subprompt );
att:build.c:         ch->pcdata->subprompt = STRALLOC( buf );
att:build.c:         if( ch->pcdata && ch->pcdata->subprompt )
att:build.c:            STRFREE( ch->pcdata->subprompt );
att:build.c:            ch->pcdata->subprompt = NULL;
att:build.c:         if( ch->pcdata->subprompt )
att:build.c:            STRFREE( ch->pcdata->subprompt );
att:build.c:         ch->pcdata->subprompt = STRALLOC( buf );
att:build.c:                && get_trust( ch ) < LEVEL_GREATER && !is_name( "protoflag", ch->pcdata->bestowments ) )
att:build.c:   if( !ch->pcdata->area )
att:build.c:      pArea = ch->pcdata->area;
att:build.c:      location->area = ch->pcdata->area;
att:build.c:   pArea = ch->pcdata->area;
att:build.c:         location->area = ch->pcdata->area;
att:build.c:   if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
att:build.c:         if( ch->pcdata && ch->pcdata->subprompt )
att:build.c:            STRFREE( ch->pcdata->subprompt );
att:build.c:            ch->pcdata->subprompt = NULL;
att:build.c:         if( ch->pcdata->subprompt )
att:build.c:            STRFREE( ch->pcdata->subprompt );
att:build.c:         ch->pcdata->subprompt = STRALLOC( "<&CRedit &W#%r&w> %i" );
att:build.c:      if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
att:build.c:      if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
att:build.c:   if( get_trust( ch ) > LEVEL_IMMORTAL && ch->pcdata->r_range_lo && ch->pcdata->r_range_hi )
att:build.c:      tarea = ch->pcdata->area;
att:build.c:      tarea->low_r_vnum = ch->pcdata->r_range_lo;
att:build.c:      tarea->low_o_vnum = ch->pcdata->o_range_lo;
att:build.c:      tarea->low_m_vnum = ch->pcdata->m_range_lo;
att:build.c:      tarea->hi_r_vnum = ch->pcdata->r_range_hi;
att:build.c:      tarea->hi_o_vnum = ch->pcdata->o_range_hi;
att:build.c:      tarea->hi_m_vnum = ch->pcdata->m_range_hi;
att:build.c:      ch->pcdata->area = tarea;
att:build.c:      ch->pcdata->area = NULL;
att:build.c:      if( !ch->pcdata->area )
att:build.c:       || ( is_name( buf, ch->pcdata->bestowments )
att:build.c:       || ( ch->pcdata->council && is_name( buf, ch->pcdata->council->powers ) ) )
att:build.c:                || is_name( tmp->filename, ch->pcdata->bestowments )
att:build.c:                || ( ch->pcdata->council
att:build.c:                     && ( is_name( buf, ch->pcdata->council->powers )
att:build.c:                          || is_name( "aassign", ch->pcdata->council->powers ) ) ) )
att:build.c:   ch->pcdata->area = tarea;
att:build.c:   if( IS_NPC( ch ) || get_trust( ch ) < LEVEL_CREATOR || !ch->pcdata || ( argument[0] == '\0' && !ch->pcdata->area ) )
att:build.c:      tarea = ch->pcdata->area;
att:build.c:   if( IS_NPC( ch ) || get_trust( ch ) < LEVEL_CREATOR || !ch->pcdata || ( argument[0] == '\0' && !ch->pcdata->area ) )
att:build.c:      tarea = ch->pcdata->area;
att:build.c:       || ( !ch->pcdata->area && get_trust( ch ) < LEVEL_GREATER ) )
att:build.c:   tarea = ch->pcdata->area;
att:build.c:       || ( !ch->pcdata->area && get_trust( ch ) < LEVEL_GREATER ) )
att:build.c:   tarea = ch->pcdata->area;
att:build.c:       || ( !ch->pcdata->area && get_trust( ch ) < LEVEL_GREATER ) )
att:build.c:   tarea = ch->pcdata->area;
att:build.c:       && ( obj->vnum < ch->pcdata->area->low_o_vnum || obj->vnum > ch->pcdata->area->hi_o_vnum ) )
att:build.c:       && ( mob->vnum < ch->pcdata->area->low_m_vnum || mob->vnum > ch->pcdata->area->hi_m_vnum ) )
att:build.c:       || ( !ch->pcdata->area && get_trust( ch ) < LEVEL_GREATER ) )
att:build.c:   tarea = ch->pcdata->area;
att:calendar.c:   ch->pcdata->timezone = i;
att:calendar.c:   ch_printf( ch, "&wYour local time        :  &W %s&D\r\n", c_time( current_time, ch->pcdata->timezone ) );
att:calendar.c:      if( day == ch->pcdata->day + 1 && time_info.month == ch->pcdata->month )
att:chess.c:         ch->pcdata->game_board = NULL;
att:chess.c:         ch->pcdata->game_board = NULL;
att:chess.c:      if( ch->pcdata->game_board )
att:chess.c:      ch->pcdata->game_board = board;
att:chess.c:      ch->pcdata->game_board->player1 = QUICKLINK( ch->name );
att:chess.c:      if( ch->pcdata->game_board )
att:chess.c:         ch->pcdata->game_board = board;
att:chess.c:      board = vch->pcdata->game_board;
att:chess.c:      ch->pcdata->game_board = board;
att:chess.c:   if( !ch->pcdata->game_board )
att:chess.c:      free_game( ch->pcdata->game_board );
att:chess.c:      GAME_BOARD_DATA *board = ch->pcdata->game_board;
att:chess.c:      send_to_char( print_big_board( ch, ch->pcdata->game_board ), ch );
att:chess.c:      if( !ch->pcdata->game_board->player1 || !ch->pcdata->game_board->player2 )
att:chess.c:      if( ch->pcdata->game_board->turn < 0 )
att:chess.c:      if( king_in_checkmate( ch->pcdata->game_board, BLACK_KING ) )
att:chess.c:      if( king_in_checkmate( ch->pcdata->game_board, WHITE_KING ) )
att:chess.c:      if( ch->pcdata->game_board->turn % 2 == 1 && !str_cmp( ch->pcdata->game_board->player1, ch->name ) )
att:chess.c:      if( ch->pcdata->game_board->turn % 2 == 0 && !str_cmp( ch->pcdata->game_board->player2, ch->name ) )
att:chess.c:      ret = is_valid_move( ch, ch->pcdata->game_board, x, y, dx, dy );
att:chess.c:         board = ch->pcdata->game_board;
att:chess.c:            if( ch->pcdata->game_board->type == TYPE_IMC )
att:chess.c:               imc_send_chess( ch->pcdata->game_board->player1, ch->pcdata->game_board->player2, arg );
att:chess.c:      if( !str_cmp( ch->name, ch->pcdata->game_board->player1 ) )
att:chess.c:         opp = get_char_world( ch, ch->pcdata->game_board->player2 );
att:chess.c:            mudstrlcpy( opp_name, ch->pcdata->game_board->player2, MAX_INPUT_LENGTH );
att:chess.c:         opp = get_char_world( ch, ch->pcdata->game_board->player1 );
att:chess.c:            mudstrlcpy( opp_name, ch->pcdata->game_board->player1, MAX_INPUT_LENGTH );
att:chess.c:         if( ch->pcdata->game_board->type == TYPE_LOCAL ) \
att:chess.c:         if( ch->pcdata->game_board->type == TYPE_IMC ) \
att:chess.c:         if( ch->pcdata->game_board->type == TYPE_LOCAL ) \
att:clans.c:   if( IS_NPC( ch ) || !ch->pcdata->clan )
att:clans.c:   for( roster = ch->pcdata->clan->first_member; roster; roster = roster->next )
att:clans.c:         roster->kills = ch->pcdata->mkills;
att:clans.c:         roster->deaths = ch->pcdata->mdeaths;
att:clans.c:         save_clan( ch->pcdata->clan );
att:clans.c:   add_roster( ch->pcdata->clan, ch->name, ch->Class, ch->level, ch->pcdata->mkills, ch->pcdata->mdeaths );
att:clans.c:   save_clan( ch->pcdata->clan );
att:clans.c:   if( IS_NPC( ch ) || !ch->pcdata->clan )
att:clans.c:   clan = ch->pcdata->clan;
att:clans.c:   if( IS_NPC( ch ) || !ch->pcdata->clan )
att:clans.c:   clan = ch->pcdata->clan;
att:clans.c:   if( ( ch->pcdata && ch->pcdata->bestowments
att:clans.c:         && is_name( "caninduct", ch->pcdata->bestowments ) )
att:clans.c:   if( IS_NPC( ch ) || !ch->pcdata->council )
att:clans.c:   council = ch->pcdata->council;
att:clans.c:   if( IS_NPC( ch ) || !ch->pcdata->clan )
att:clans.c:   clan = ch->pcdata->clan;
att:clans.c:   if( ( ch->pcdata && ch->pcdata->bestowments
att:clans.c:         && is_name( "canoutcast", ch->pcdata->bestowments ) )
att:clans.c:      if( ch->pcdata->clan->clan_type == CLAN_ORDER )
att:clans.c:      else if( ch->pcdata->clan->clan_type == CLAN_GUILD )
att:clans.c:   if( victim->pcdata->clan != ch->pcdata->clan )
att:clans.c:      if( ch->pcdata->clan->clan_type == CLAN_ORDER )
att:clans.c:      else if( ch->pcdata->clan->clan_type == CLAN_GUILD )
att:clans.c:   if( !str_cmp( victim->name, ch->pcdata->clan->number1 ) )
att:clans.c:      STRFREE( ch->pcdata->clan->number1 );
att:clans.c:      ch->pcdata->clan->number1 = STRALLOC( "" );
att:clans.c:   if( !str_cmp( victim->name, ch->pcdata->clan->number2 ) )
att:clans.c:      STRFREE( ch->pcdata->clan->number2 );
att:clans.c:      ch->pcdata->clan->number2 = STRALLOC( "" );
att:clans.c:   if( !str_cmp( victim->name, ch->pcdata->clan->deity ) )
att:clans.c:      STRFREE( ch->pcdata->clan->deity );
att:clans.c:      ch->pcdata->clan->deity = STRALLOC( "" );
att:clans.c:   if( IS_NPC( ch ) || !ch->pcdata->council )
att:clans.c:   council = ch->pcdata->council;
att:clans.c:   if( victim->pcdata->council != ch->pcdata->council )
att:clans.c:   if( council->head2 && !str_cmp( victim->name, ch->pcdata->council->head2 ) )
att:clans.c:      STRFREE( ch->pcdata->council->head2 );
att:clans.c:      ch->pcdata->council->head2 = NULL;
att:clans.c:   if( IS_NPC( ch ) || !ch->pcdata->clan )
att:clans.c:   if( ch->pcdata->clan->clan_type != CLAN_ORDER && ch->pcdata->clan->clan_type != CLAN_GUILD )
att:clans.c:      snprintf( filename, 256, "%s%s.defeats", CLAN_DIR, ch->pcdata->clan->name );
att:clans.c:      if( !str_cmp( ch->name, ch->pcdata->clan->leader ) && !str_cmp( argument, "clean" ) )
att:clans.c:   if( IS_NPC( ch ) || !ch->pcdata->clan )
att:clans.c:   if( ch->pcdata->clan->clan_type != CLAN_ORDER && ch->pcdata->clan->clan_type != CLAN_GUILD )
att:clans.c:      snprintf( filename, 256, "%s%s.record", CLAN_DIR, ch->pcdata->clan->name );
att:clans.c:      if( !str_cmp( ch->name, ch->pcdata->clan->leader ) && !str_cmp( argument, "clean" ) )
att:clans.c:   if( IS_NPC( ch ) || !IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
att:clans.c:   if( !IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) && IS_SET( victim->pcdata->flags, PCFLAG_DEADLY ) )
att:clans.c:      if( IS_SET( victim->pcdata->flags, PCFLAG_DEADLY ) && IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
att:color.c:      if( IS_NPC( ch ) || !IS_SET( ch->pcdata->flags, PCFLAG_PAGERON ) )
att:comm.c:      log_printf_plus( LOG_COMM, UMAX( sysdata.log_level, ch->level ), "Closing link to %s. (INRoom %d)", ch->pcdata->filename, ( ch->in_room ? ch->in_room->vnum : -1 ) );
att:comm.c:   if( !IS_SET( ch->pcdata->flags, PCFLAG_NOINTRO ) )
att:comm.c:   if( str_cmp( sha256_crypt( argument ), ch->pcdata->pwd ) )
att:comm.c:   if( check_playing( d, ch->pcdata->filename, TRUE ) )
att:comm.c:chk = check_reconnect( d, ch->pcdata->filename, TRUE );
att:comm.c:   mudstrlcpy( buf, ch->pcdata->filename, MAX_STRING_LENGTH );
att:comm.c:   DISPOSE( ch->pcdata->pwd );
att:comm.c:   ch->pcdata->pwd = str_dup( pwdnew );
att:comm.c:   if( str_cmp( sha256_crypt( argument ), ch->pcdata->pwd ) )
att:comm.c:   ch->pcdata->cpose = str_dup( " is here." );
att:comm.c:   ch->pcdata->customclass = str_dup( "Adventurer" );
att:comm.c:   ch->pcdata->str = 4;
att:comm.c:   ch->pcdata->intel = 3;
att:comm.c:   ch->pcdata->dex = 4;
att:comm.c:   ch->pcdata->lck = 2;
att:comm.c:   ch->pcdata->att = 10;
att:comm.c:   ch->pcdata->def = 15;
att:comm.c:   ch->pcdata->mdef = 5;
att:comm.c:   ch->pcdata->matt = 5;
att:comm.c:   ch->pcdata->strplus = 0;
att:comm.c:   ch->pcdata->intplus = 0;
att:comm.c:   ch->pcdata->dexplus = 0;
att:comm.c:   ch->pcdata->lckplus = 0;
att:comm.c:   ch->pcdata->attplus = 0;
att:comm.c:   ch->pcdata->defplus = 0;
att:comm.c:   ch->pcdata->mattplus = 0;
att:comm.c:   ch->pcdata->mdefplus = 0;
att:comm.c:   ch->pcdata->mlevel = 1;
att:comm.c:   ch->pcdata->deflevel = 1;
att:comm.c:   ch->pcdata->attlevel = 1;
att:comm.c:   ch->pcdata->hometown = str_dup( "Kroridge" );
att:comm.c:   ch->pcdata->hometown = str_dup( "O'ran Thalore" );
att:comm.c:   ch->pcdata->hometown = str_dup( "Kimlodar" );
att:comm.c:   ch->pcdata->hometown = str_dup( "Shireton" );
att:comm.c:   ch->pcdata->hometown = str_dup( "BeachCastle" );
att:comm.c:   ch->pcdata->hometown = str_dup( "Calmarnock" );
att:comm.c:   ch->pcdata->hometown = str_dup( "Tarnstead" );
att:comm.c:   ch->pcdata->hometown = str_dup( "Dhubrokh" );
att:comm.c:      SET_BIT( ch->pcdata->flags, PCFLAG_WATCH );
att:comm.c:      REMOVE_BIT( ch->pcdata->flags, PCFLAG_WATCH );
att:comm.c:      ch->pcdata->clan = NULL;
att:comm.c:         ch->pcdata->learned[iLang] = 100;
att:comm.c:                  ch->pcdata->learned[uLang] = 100;
att:comm.c:      ch->pcdata->day = time_info.day;
att:comm.c:      ch->pcdata->month = time_info.month;
att:comm.c:      ch->pcdata->year = time_info.year - 17;
att:comm.c:      ch->pcdata->age = 17;
att:comm.c:      ch->pcdata->age_bonus = 0;
att:comm.c:         ch->pcdata->auth_state = 0;
att:comm.c:         SET_BIT( ch->pcdata->flags, PCFLAG_UNAUTHED );
att:comm.c:   else if( !IS_IMMORTAL( ch ) && ch->pcdata->release_date > 0 && ch->pcdata->release_date > current_time )
att:comm.c:   if( ch->pcdata->pet )
att:comm.c:      act( AT_ACTION, "$n returns to $s master from the Void.", ch->pcdata->pet, NULL, ch, TO_NOTVICT );
att:comm.c:      act( AT_ACTION, "$N returns with you to the realms.", ch, NULL, ch->pcdata->pet, TO_CHAR );
att:comm.c:   if( str_cmp( sha256_crypt( argument ), ch->pcdata->pwd ) )
att:comm.c:      if( !IS_NPC( ch ) && ( !fConn || !ch->desc ) && ch->pcdata->filename && !str_cmp( name, ch->pcdata->filename ) )
att:comm.c:            d->character->pcdata->pwd = str_dup( ch->pcdata->pwd );
att:comm.c:               ch->pcdata->recent_site = STRALLOC( d->host );
att:comm.c:            log_printf_plus( LOG_COMM, sysdata.log_level, "%s already connected.", ch->pcdata->filename );
att:comm.c:            ch->pcdata->recent_site = STRALLOC( d->host );
att:comm.c:                          ch->pcdata->filename, d->host );
att:comm.c:   REMOVE_BIT( ch->pcdata->flags, PCFLAG_IDLE );
att:comm.c:         && ( get_trust(to) < ( ch->pcdata ? ch->pcdata->wizinvis : 0 ) ) ) ) ) )
att:comm.c:   if( !NOT_AUTHED( ch ) || ch->pcdata->auth_state != 2 )
att:comm.c:   STRFREE( ch->pcdata->filename );
att:comm.c:   ch->pcdata->filename = STRALLOC( ucase_argument );
att:comm.c:   ch->pcdata->auth_state = 0;
att:comm.c:   if( !IS_NPC( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_HELPSTART ) )
att:comm.c:   else if( !IS_NPC( ch ) && ch->substate != SUB_NONE && ch->pcdata->subprompt && ch->pcdata->subprompt[0] != '\0' )
att:comm.c:      prompt = ch->pcdata->subprompt;
att:comm.c:   else if( IS_NPC( ch ) || ( !ch->fighting && ( !ch->pcdata->prompt || !*ch->pcdata->prompt ) ) )
att:comm.c:      if( !ch->pcdata->fprompt || !*ch->pcdata->fprompt )
att:comm.c:         prompt = ch->pcdata->fprompt;
att:comm.c:      prompt = ch->pcdata->prompt;
att:comm.c:                     pstat = ch->pcdata->condition[COND_BLOODTHIRST];
att:comm.c:                     if( IS_SET( ch->pcdata->flags, PCFLAG_DND ) )
att:comm.c:                               ( IS_NPC( ch ) ? ch->mobinvis : ch->pcdata->wizinvis ) );
att:comm.c:                            : ( xIS_SET( ch->act, PLR_WIZINVIS ) ? ch->pcdata->wizinvis : 0 ) );
att:comm.c:   pclines = UMAX( ch->pcdata->pagerlen, 5 ) - 1;
att:comm.c.backup:      log_printf_plus( LOG_COMM, UMAX( sysdata.log_level, ch->level ), "Closing link to %s. (INRoom %d)", ch->pcdata->filename, ( ch->in_room ? ch->in_room->vnum : -1 ) );
att:comm.c.backup:   if( !IS_SET( ch->pcdata->flags, PCFLAG_NOINTRO ) )
att:comm.c.backup:   if( str_cmp( sha256_crypt( argument ), ch->pcdata->pwd ) )
att:comm.c.backup:   if( check_playing( d, ch->pcdata->filename, TRUE ) )
att:comm.c.backup:chk = check_reconnect( d, ch->pcdata->filename, TRUE );
att:comm.c.backup:   mudstrlcpy( buf, ch->pcdata->filename, MAX_STRING_LENGTH );
att:comm.c.backup:   DISPOSE( ch->pcdata->pwd );
att:comm.c.backup:   ch->pcdata->pwd = str_dup( pwdnew );
att:comm.c.backup:   if( str_cmp( sha256_crypt( argument ), ch->pcdata->pwd ) )
att:comm.c.backup:   ch->pcdata->customclass = str_dup( "Adventurer" );
att:comm.c.backup:      SET_BIT( ch->pcdata->flags, PCFLAG_WATCH );
att:comm.c.backup:      REMOVE_BIT( ch->pcdata->flags, PCFLAG_WATCH );
att:comm.c.backup:      ch->pcdata->clan = NULL;
att:comm.c.backup:         ch->pcdata->learned[iLang] = 100;
att:comm.c.backup:                  ch->pcdata->learned[uLang] = 100;
att:comm.c.backup:      ch->pcdata->day = time_info.day;
att:comm.c.backup:      ch->pcdata->month = time_info.month;
att:comm.c.backup:      ch->pcdata->year = time_info.year - 17;
att:comm.c.backup:      ch->pcdata->age = 17;
att:comm.c.backup:      ch->pcdata->age_bonus = 0;
att:comm.c.backup:         ch->pcdata->auth_state = 0;
att:comm.c.backup:         SET_BIT( ch->pcdata->flags, PCFLAG_UNAUTHED );
att:comm.c.backup:   else if( !IS_IMMORTAL( ch ) && ch->pcdata->release_date > 0 && ch->pcdata->release_date > current_time )
att:comm.c.backup:   if( ch->pcdata->pet )
att:comm.c.backup:      act( AT_ACTION, "$n returns to $s master from the Void.", ch->pcdata->pet, NULL, ch, TO_NOTVICT );
att:comm.c.backup:      act( AT_ACTION, "$N returns with you to the realms.", ch, NULL, ch->pcdata->pet, TO_CHAR );
att:comm.c.backup:   if( str_cmp( sha256_crypt( argument ), ch->pcdata->pwd ) )
att:comm.c.backup:      if( !IS_NPC( ch ) && ( !fConn || !ch->desc ) && ch->pcdata->filename && !str_cmp( name, ch->pcdata->filename ) )
att:comm.c.backup:            d->character->pcdata->pwd = str_dup( ch->pcdata->pwd );
att:comm.c.backup:               ch->pcdata->recent_site = STRALLOC( d->host );
att:comm.c.backup:            log_printf_plus( LOG_COMM, sysdata.log_level, "%s already connected.", ch->pcdata->filename );
att:comm.c.backup:            ch->pcdata->recent_site = STRALLOC( d->host );
att:comm.c.backup:                          ch->pcdata->filename, d->host );
att:comm.c.backup:   REMOVE_BIT( ch->pcdata->flags, PCFLAG_IDLE );
att:comm.c.backup:         && ( get_trust(to) < ( ch->pcdata ? ch->pcdata->wizinvis : 0 ) ) ) ) ) )
att:comm.c.backup:   if( !NOT_AUTHED( ch ) || ch->pcdata->auth_state != 2 )
att:comm.c.backup:   STRFREE( ch->pcdata->filename );
att:comm.c.backup:   ch->pcdata->filename = STRALLOC( ucase_argument );
att:comm.c.backup:   ch->pcdata->auth_state = 0;
att:comm.c.backup:   if( !IS_NPC( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_HELPSTART ) )
att:comm.c.backup:   else if( !IS_NPC( ch ) && ch->substate != SUB_NONE && ch->pcdata->subprompt && ch->pcdata->subprompt[0] != '\0' )
att:comm.c.backup:      prompt = ch->pcdata->subprompt;
att:comm.c.backup:   else if( IS_NPC( ch ) || ( !ch->fighting && ( !ch->pcdata->prompt || !*ch->pcdata->prompt ) ) )
att:comm.c.backup:      if( !ch->pcdata->fprompt || !*ch->pcdata->fprompt )
att:comm.c.backup:         prompt = ch->pcdata->fprompt;
att:comm.c.backup:      prompt = ch->pcdata->prompt;
att:comm.c.backup:                     pstat = ch->pcdata->condition[COND_BLOODTHIRST];
att:comm.c.backup:                     if( IS_SET( ch->pcdata->flags, PCFLAG_DND ) )
att:comm.c.backup:                               ( IS_NPC( ch ) ? ch->mobinvis : ch->pcdata->wizinvis ) );
att:comm.c.backup:                            : ( xIS_SET( ch->act, PLR_WIZINVIS ) ? ch->pcdata->wizinvis : 0 ) );
att:comm.c.backup:   pclines = UMAX( ch->pcdata->pagerlen, 5 ) - 1;
att:comm.c.bak:      log_printf_plus( LOG_COMM, UMAX( sysdata.log_level, ch->level ), "Closing link to %s. (INRoom %d)", ch->pcdata->filename, ( ch->in_room ? ch->in_room->vnum : -1 ) );
att:comm.c.bak:   if( !IS_SET( ch->pcdata->flags, PCFLAG_NOINTRO ) )
att:comm.c.bak:   if( str_cmp( sha256_crypt( argument ), ch->pcdata->pwd ) )
att:comm.c.bak:   if( check_playing( d, ch->pcdata->filename, TRUE ) )
att:comm.c.bak:chk = check_reconnect( d, ch->pcdata->filename, TRUE );
att:comm.c.bak:   mudstrlcpy( buf, ch->pcdata->filename, MAX_STRING_LENGTH );
att:comm.c.bak:   DISPOSE( ch->pcdata->pwd );
att:comm.c.bak:   ch->pcdata->pwd = str_dup( pwdnew );
att:comm.c.bak:   if( str_cmp( sha256_crypt( argument ), ch->pcdata->pwd ) )
att:comm.c.bak:   ch->pcdata->customclass = str_dup( "Adventurer" );
att:comm.c.bak:      SET_BIT( ch->pcdata->flags, PCFLAG_WATCH );
att:comm.c.bak:      REMOVE_BIT( ch->pcdata->flags, PCFLAG_WATCH );
att:comm.c.bak:      ch->pcdata->clan = NULL;
att:comm.c.bak:         ch->pcdata->learned[iLang] = 100;
att:comm.c.bak:                  ch->pcdata->learned[uLang] = 100;
att:comm.c.bak:      ch->pcdata->day = time_info.day;
att:comm.c.bak:      ch->pcdata->month = time_info.month;
att:comm.c.bak:      ch->pcdata->year = time_info.year - 17;
att:comm.c.bak:      ch->pcdata->age = 17;
att:comm.c.bak:      ch->pcdata->age_bonus = 0;
att:comm.c.bak:         ch->pcdata->auth_state = 0;
att:comm.c.bak:         SET_BIT( ch->pcdata->flags, PCFLAG_UNAUTHED );
att:comm.c.bak:   else if( !IS_IMMORTAL( ch ) && ch->pcdata->release_date > 0 && ch->pcdata->release_date > current_time )
att:comm.c.bak:   if( ch->pcdata->pet )
att:comm.c.bak:      act( AT_ACTION, "$n returns to $s master from the Void.", ch->pcdata->pet, NULL, ch, TO_NOTVICT );
att:comm.c.bak:      act( AT_ACTION, "$N returns with you to the realms.", ch, NULL, ch->pcdata->pet, TO_CHAR );
att:comm.c.bak:   if( str_cmp( sha256_crypt( argument ), ch->pcdata->pwd ) )
att:comm.c.bak:      if( !IS_NPC( ch ) && ( !fConn || !ch->desc ) && ch->pcdata->filename && !str_cmp( name, ch->pcdata->filename ) )
att:comm.c.bak:            d->character->pcdata->pwd = str_dup( ch->pcdata->pwd );
att:comm.c.bak:               ch->pcdata->recent_site = STRALLOC( d->host );
att:comm.c.bak:            log_printf_plus( LOG_COMM, sysdata.log_level, "%s already connected.", ch->pcdata->filename );
att:comm.c.bak:            ch->pcdata->recent_site = STRALLOC( d->host );
att:comm.c.bak:                          ch->pcdata->filename, d->host );
att:comm.c.bak:   REMOVE_BIT( ch->pcdata->flags, PCFLAG_IDLE );
att:comm.c.bak:         && ( get_trust(to) < ( ch->pcdata ? ch->pcdata->wizinvis : 0 ) ) ) ) ) )
att:comm.c.bak:   if( !NOT_AUTHED( ch ) || ch->pcdata->auth_state != 2 )
att:comm.c.bak:   STRFREE( ch->pcdata->filename );
att:comm.c.bak:   ch->pcdata->filename = STRALLOC( ucase_argument );
att:comm.c.bak:   ch->pcdata->auth_state = 0;
att:comm.c.bak:   if( !IS_NPC( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_HELPSTART ) )
att:comm.c.bak:   else if( !IS_NPC( ch ) && ch->substate != SUB_NONE && ch->pcdata->subprompt && ch->pcdata->subprompt[0] != '\0' )
att:comm.c.bak:      prompt = ch->pcdata->subprompt;
att:comm.c.bak:   else if( IS_NPC( ch ) || ( !ch->fighting && ( !ch->pcdata->prompt || !*ch->pcdata->prompt ) ) )
att:comm.c.bak:      if( !ch->pcdata->fprompt || !*ch->pcdata->fprompt )
att:comm.c.bak:         prompt = ch->pcdata->fprompt;
att:comm.c.bak:      prompt = ch->pcdata->prompt;
att:comm.c.bak:                     pstat = ch->pcdata->condition[COND_BLOODTHIRST];
att:comm.c.bak:                     if( IS_SET( ch->pcdata->flags, PCFLAG_DND ) )
att:comm.c.bak:                               ( IS_NPC( ch ) ? ch->mobinvis : ch->pcdata->wizinvis ) );
att:comm.c.bak:                            : ( xIS_SET( ch->act, PLR_WIZINVIS ) ? ch->pcdata->wizinvis : 0 ) );
att:comm.c.bak:   pclines = UMAX( ch->pcdata->pagerlen, 5 ) - 1;
att:db.c:      if( ch->pcdata->pet )
att:db.c:         extract_char( ch->pcdata->pet, TRUE );
att:db.c:         ch->pcdata->pet = NULL;
att:db.c:      for( temp = ch->pcdata->first_ignored; temp; temp = next )
att:db.c:         UNLINK( temp, ch->pcdata->first_ignored, ch->pcdata->last_ignored, next, prev );
att:db.c:      STRFREE( ch->pcdata->filename );
att:db.c:      STRFREE( ch->pcdata->deity_name );
att:db.c:      STRFREE( ch->pcdata->clan_name );
att:db.c:      STRFREE( ch->pcdata->council_name );
att:db.c:      if( ch->pcdata->recent_site )
att:db.c:         STRFREE( ch->pcdata->recent_site );
att:db.c:      if( ch->pcdata->prev_site )
att:db.c:         STRFREE( ch->pcdata->prev_site );
att:db.c:      DISPOSE( ch->pcdata->pwd );   /* no hash */
att:db.c:      DISPOSE( ch->pcdata->bamfin );   /* no hash */
att:db.c:      DISPOSE( ch->pcdata->bamfout );  /* no hash */
att:db.c:      DISPOSE( ch->pcdata->rank );
att:db.c:      STRFREE( ch->pcdata->title );
att:db.c:      STRFREE( ch->pcdata->bio );
att:db.c:      DISPOSE( ch->pcdata->bestowments ); /* no hash */
att:db.c:      DISPOSE( ch->pcdata->homepage ); /* no hash */
att:db.c:      STRFREE( ch->pcdata->authed_by );
att:db.c:      STRFREE( ch->pcdata->prompt );
att:db.c:      STRFREE( ch->pcdata->fprompt );
att:db.c:      if( ch->pcdata->helled_by )
att:db.c:         STRFREE( ch->pcdata->helled_by );
att:db.c:      if( ch->pcdata->subprompt )
att:db.c:         STRFREE( ch->pcdata->subprompt );
att:db.c:      if( ch->pcdata->tell_history )
att:db.c:            if( ch->pcdata->tell_history[i] )
att:db.c:               STRFREE( ch->pcdata->tell_history[i] );
att:db.c:         DISPOSE( ch->pcdata->tell_history );
att:deity.c:            if( vch->pcdata->deity == deity )
att:deity.c:               snprintf( buf, MAX_STRING_LENGTH, "&R\r\nYour deity, %s, has met its demise!\r\n", vch->pcdata->deity_name );
att:deity.c:               xREMOVE_BITS( vch->affected_by, vch->pcdata->deity->affected );
att:deity.c:               REMOVE_BIT( vch->resistant, vch->pcdata->deity->element );
att:deity.c:               REMOVE_BIT( vch->susceptible, vch->pcdata->deity->suscept );
att:deity.c:               vch->pcdata->deity = NULL;
att:deity.c:               STRFREE( vch->pcdata->deity_name );
att:deity.c:               vch->pcdata->deity_name = STRALLOC( "" );
att:deity.c:      if( !ch->pcdata->deity )
att:deity.c:      --ch->pcdata->deity->worshippers;
att:deity.c:      if( ch->pcdata->deity->worshippers < 0 )
att:deity.c:         ch->pcdata->deity->worshippers = 0;
att:deity.c:      ch->pcdata->favor = -2500;
att:deity.c:      xREMOVE_BITS( ch->affected_by, ch->pcdata->deity->affected );
att:deity.c:      REMOVE_BIT( ch->resistant, ch->pcdata->deity->element );
att:deity.c:      REMOVE_BIT( ch->susceptible, ch->pcdata->deity->suscept );
att:deity.c:      save_deity( ch->pcdata->deity );
att:deity.c:      ch->pcdata->deity = NULL;
att:deity.c:      STRFREE( ch->pcdata->deity_name );
att:deity.c:      ch->pcdata->deity_name = STRALLOC( "" );
att:deity.c:   if( ch->pcdata->deity )
att:deity.c:   STRFREE( ch->pcdata->deity_name );
att:deity.c:   ch->pcdata->deity_name = QUICKLINK( deity->name );
att:deity.c:   ch->pcdata->deity = deity;
att:deity.c:   if( ch->pcdata->favor > deity->affectednum )
att:deity.c:      xSET_BITS( ch->affected_by, ch->pcdata->deity->affected );
att:deity.c:   if( ch->pcdata->favor > deity->elementnum )
att:deity.c:      SET_BIT( ch->resistant, ch->pcdata->deity->element );
att:deity.c:   if( ch->pcdata->favor < deity->susceptnum )
att:deity.c:      SET_BIT( ch->susceptible, ch->pcdata->deity->suscept );
att:deity.c:   act( AT_MAGIC, "Body and soul, you devote yourself to $t!", ch, ch->pcdata->deity_name, NULL, TO_CHAR );
att:deity.c:   ++ch->pcdata->deity->worshippers;
att:deity.c:   save_deity( ch->pcdata->deity );
att:deity.c:   if( IS_NPC( ch ) || !ch->pcdata->deity )
att:deity.c:   oldfavor = ch->pcdata->favor;
att:deity.c:      if( ch->pcdata->favor < ch->pcdata->deity->scorpse )
att:deity.c:                  ch->pcdata->favor -= ch->pcdata->deity->scorpse;
att:deity.c:      ch->pcdata->favor -= ch->pcdata->deity->scorpse;
att:deity.c:      if( ch->pcdata->favor < ch->pcdata->deity->susceptnum )
att:deity.c:         SET_BIT( ch->susceptible, ch->pcdata->deity->suscept );
att:deity.c:      if( ( oldfavor > ch->pcdata->deity->affectednum &&
att:deity.c:            ch->pcdata->favor <= ch->pcdata->deity->affectednum ) ||
att:deity.c:          ( oldfavor > ch->pcdata->deity->elementnum &&
att:deity.c:            ch->pcdata->favor <= ch->pcdata->deity->elementnum ) ||
att:deity.c:          ( oldfavor < ch->pcdata->deity->susceptnum && ch->pcdata->favor >= ch->pcdata->deity->susceptnum ) )
att:deity.c:      if( ch->pcdata->favor < ch->pcdata->deity->savatar )
att:deity.c:      snprintf( buf, MAX_STRING_LENGTH, victim->short_descr, ch->pcdata->deity->name );
att:deity.c:      snprintf( buf, MAX_STRING_LENGTH, victim->long_descr, ch->pcdata->deity->name );
att:deity.c:      snprintf( buf, MAX_STRING_LENGTH, victim->description, ch->pcdata->deity->name );
att:deity.c:      victim->hit = ch->hit * 6 + ch->pcdata->favor;
att:deity.c:      victim->alignment = ch->pcdata->deity->alignment;
att:deity.c:      victim->max_hit = ch->hit * 6 + ch->pcdata->favor;
att:deity.c:      ch->pcdata->favor -= ch->pcdata->deity->savatar;
att:deity.c:      if( ch->pcdata->favor < ch->pcdata->deity->susceptnum )
att:deity.c:         SET_BIT( ch->susceptible, ch->pcdata->deity->suscept );
att:deity.c:      if( ( oldfavor > ch->pcdata->deity->affectednum &&
att:deity.c:            ch->pcdata->favor <= ch->pcdata->deity->affectednum ) ||
att:deity.c:          ( oldfavor > ch->pcdata->deity->elementnum &&
att:deity.c:            ch->pcdata->favor <= ch->pcdata->deity->elementnum ) ||
att:deity.c:          ( oldfavor < ch->pcdata->deity->susceptnum && ch->pcdata->favor >= ch->pcdata->deity->susceptnum ) )
att:deity.c:      if( ch->pcdata->favor < ch->pcdata->deity->sdeityobj )
att:deity.c:      snprintf( buf, MAX_STRING_LENGTH, "sigil %s", ch->pcdata->deity->name );
att:deity.c:      snprintf( buf, MAX_STRING_LENGTH, obj->short_descr, ch->pcdata->deity->name );
att:deity.c:      snprintf( buf, MAX_STRING_LENGTH, obj->description, ch->pcdata->deity->name );
att:deity.c:      ch->pcdata->favor -= ch->pcdata->deity->sdeityobj;
att:deity.c:      if( ch->pcdata->favor < ch->pcdata->deity->susceptnum )
att:deity.c:         SET_BIT( ch->susceptible, ch->pcdata->deity->suscept );
att:deity.c:      if( ( oldfavor > ch->pcdata->deity->affectednum &&
att:deity.c:            ch->pcdata->favor <= ch->pcdata->deity->affectednum ) ||
att:deity.c:          ( oldfavor > ch->pcdata->deity->elementnum &&
att:deity.c:            ch->pcdata->favor <= ch->pcdata->deity->elementnum ) ||
att:deity.c:          ( oldfavor < ch->pcdata->deity->susceptnum && ch->pcdata->favor >= ch->pcdata->deity->susceptnum ) )
att:deity.c:      switch ( ch->pcdata->deity->objstat )
att:deity.c:      if( ch->pcdata->favor < ch->pcdata->deity->srecall )
att:deity.c:      if( !IS_NPC( ch ) && ch->pcdata->clan )
att:deity.c:         location = get_room_index( ch->pcdata->clan->recall );
att:deity.c:      if( !IS_NPC( ch ) && !location && ch->level >= 5 && IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
att:deity.c:      ch->pcdata->favor -= ch->pcdata->deity->srecall;
att:deity.c:      if( ch->pcdata->favor < ch->pcdata->deity->susceptnum )
att:deity.c:         SET_BIT( ch->susceptible, ch->pcdata->deity->suscept );
att:deity.c:      if( ( oldfavor > ch->pcdata->deity->affectednum &&
att:deity.c:            ch->pcdata->favor <= ch->pcdata->deity->affectednum ) ||
att:deity.c:          ( oldfavor > ch->pcdata->deity->elementnum &&
att:deity.c:            ch->pcdata->favor <= ch->pcdata->deity->elementnum ) ||
att:deity.c:          ( oldfavor < ch->pcdata->deity->susceptnum && ch->pcdata->favor >= ch->pcdata->deity->susceptnum ) )
att:deity.c:   if( IS_NPC( ch ) || !ch->pcdata->deity )
att:deity.c:   oldfavor = ch->pcdata->favor;
att:deity.c:   if( ( ch->alignment - ch->pcdata->deity->alignment > 650
att:deity.c:         || ch->alignment - ch->pcdata->deity->alignment < -650 ) && ch->pcdata->deity->alignment != 0 )
att:deity.c:      ch->pcdata->favor -= 2;
att:deity.c:      ch->pcdata->favor = URANGE( -2500, ch->pcdata->favor, 2500 );
att:deity.c:      if( ch->pcdata->favor > ch->pcdata->deity->affectednum )
att:deity.c:         xSET_BITS( ch->affected_by, ch->pcdata->deity->affected );
att:deity.c:      if( ch->pcdata->favor > ch->pcdata->deity->elementnum )
att:deity.c:         SET_BIT( ch->resistant, ch->pcdata->deity->element );
att:deity.c:      if( ch->pcdata->favor < ch->pcdata->deity->susceptnum )
att:deity.c:         SET_BIT( ch->susceptible, ch->pcdata->deity->suscept );
att:deity.c:      if( ( oldfavor > ch->pcdata->deity->affectednum &&
att:deity.c:            ch->pcdata->favor <= ch->pcdata->deity->affectednum ) ||
att:deity.c:          ( oldfavor > ch->pcdata->deity->elementnum &&
att:deity.c:            ch->pcdata->favor <= ch->pcdata->deity->elementnum ) ||
att:deity.c:          ( oldfavor < ch->pcdata->deity->susceptnum && ch->pcdata->favor >= ch->pcdata->deity->susceptnum ) )
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->flee / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->flee_npcrace / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->kill / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->kill_npcrace / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->kill_magic / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->sac / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->bury_corpse / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->aid_spell / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->aid / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->steal / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->backstab / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->die / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->die_npcrace / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->spell_aid / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->dig_corpse / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->die_npcfoe / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->flee_npcfoe / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->kill_npcfoe / mod );
att:deity.c:   ch->pcdata->favor = URANGE( -2500, ch->pcdata->favor, 2500 );
att:deity.c:   if( ch->pcdata->favor > ch->pcdata->deity->affectednum )
att:deity.c:      xSET_BITS( ch->affected_by, ch->pcdata->deity->affected );
att:deity.c:   if( ch->pcdata->favor > ch->pcdata->deity->elementnum )
att:deity.c:      SET_BIT( ch->resistant, ch->pcdata->deity->element );
att:deity.c:   if( ch->pcdata->favor < ch->pcdata->deity->susceptnum )
att:deity.c:      SET_BIT( ch->susceptible, ch->pcdata->deity->suscept );
att:deity.c:   if( ( oldfavor > ch->pcdata->deity->affectednum &&
att:deity.c:         ch->pcdata->favor <= ch->pcdata->deity->affectednum ) ||
att:deity.c:       ( oldfavor > ch->pcdata->deity->elementnum &&
att:deity.c:         ch->pcdata->favor <= ch->pcdata->deity->elementnum ) ||
att:deity.c:       ( oldfavor < ch->pcdata->deity->susceptnum && ch->pcdata->favor >= ch->pcdata->deity->susceptnum ) )
att:fight.c:               DISPOSE( ch->pcdata->nuisance );
att:fight.c:       * ( 1 + abs( ch->alignment - ch->pcdata->clan->alignment ) );
att:fight.c:         bonus -= ch->pcdata->favor / -400;
att:fight.c:   if( !IS_NPC( ch ) && ch->pcdata->learned[gsn_enhanced_damage] > 0 )
att:fight.c:   victim_ac = ((((ch->pcdata->def + ch->pcdata->defplus) * ch->pcdata->deflevel) /15 ) * -1);
att:fight.c:   if( !IS_NPC( ch ) && ch->pcdata->learned[gsn_enhanced_damage] > 0 )
att:fight.c:	dam = ((dam + ch->pcdata->str + ch->pcdata->att) * ch->pcdata->attlevel) * ((ch->pcdata->dex/100) +1);
att:fight.c:         if( !IS_NPC( ch ) && !IS_IMMORTAL( ch ) && ch->pcdata->clan
att:fight.c:             && ch->pcdata->clan->clan_type != CLAN_ORDER && ch->pcdata->clan->clan_type != CLAN_GUILD && victim != ch )
att:fight.c:            snprintf( filename, 256, "%s%s.record", CLAN_DIR, ch->pcdata->clan->name );
att:fight.c:            if( victim->pcdata && victim->pcdata->clan && victim->pcdata->clan->name == ch->pcdata->clan->name )
att:fight.c:                     ch->pcdata->clan ? ch->pcdata->clan->badge :
att:fight.c:            if( ch->pcdata && ch->pcdata->clan && ch->pcdata->clan->name == victim->pcdata->clan->name )
att:fight.c:      if( !IS_NPC( ch ) && ch->pcdata->clan )
att:fight.c:       && IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) && IS_SET( victim->pcdata->flags, PCFLAG_DEADLY ) )
att:fight.c:         if( ch->pcdata->clan )
att:fight.c:            ch->pcdata->clan->mkills++;
att:fight.c:         ch->pcdata->mkills++;
att:fight.c:         if( ch->pcdata->deity )
att:fight.c:            if( victim->race == ch->pcdata->deity->npcrace )
att:fight.c:            else if( victim->race == ch->pcdata->deity->npcfoe )
att:fight.c:         ch->pcdata->pkills++;
att:fight.c:         if( ch->pcdata->clan )
att:fight.c:               ch->pcdata->clan->pkills[0]++;
att:fight.c:               ch->pcdata->clan->pkills[1]++;
att:fight.c:               ch->pcdata->clan->pkills[2]++;
att:fight.c:               ch->pcdata->clan->pkills[3]++;
att:fight.c:               ch->pcdata->clan->pkills[4]++;
att:fight.c:               ch->pcdata->clan->pkills[5]++;
att:fight.c:               ch->pcdata->clan->pkills[6]++;
att:fight.c:         ch->pcdata->pkills++;
att:fight.c:       && IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) && IS_SET( victim->pcdata->flags, PCFLAG_DEADLY ) )
att:fight.c:      if( !ch->pcdata->clan
att:fight.c:          || ( ch->pcdata->clan->clan_type != CLAN_NOKILL
att:fight.c:               && victim->pcdata->clan->clan_type != CLAN_NOKILL && ch->pcdata->clan != victim->pcdata->clan ) )
att:fight.c:         if( ch->pcdata->clan )
att:fight.c:               ch->pcdata->clan->pkills[0]++;
att:fight.c:               ch->pcdata->clan->pkills[1]++;
att:fight.c:               ch->pcdata->clan->pkills[2]++;
att:fight.c:               ch->pcdata->clan->pkills[3]++;
att:fight.c:               ch->pcdata->clan->pkills[4]++;
att:fight.c:               ch->pcdata->clan->pkills[5]++;
att:fight.c:               ch->pcdata->clan->pkills[6]++;
att:fight.c:         ch->pcdata->pkills++;
att:fight.c:            ch->pcdata->condition[COND_BLOODTHIRST] = ( 10 + ch->level );
att:fight.c:            if( ch->race == victim->pcdata->deity->npcrace )
att:fight.c:            else if( ch->race == victim->pcdata->deity->npcfoe )
att:fight.c:      if( ch->pcdata->clan )
att:fight.c:         ch->pcdata->clan->illegal_pk++;
att:fight.c:      ch->pcdata->illegal_pk++;
att:fight.c:    { if ( !(ch->pcdata->clan && victim->pcdata->clan
att:fight.c:      && ch->pcdata->clan == victim->pcdata->clan ) )  return; }
att:fight.c:        ch->pcdata->ap += (victim->level * get_curr_lck(ch));
att:fight.c:   if( dam == 0 && ( !IS_NPC( ch ) && ( IS_SET( ch->pcdata->flags, PCFLAG_GAG ) ) ) )
att:fight.c:            || !IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
att:fight.c:         if( wf && ch->pcdata->deity )
att:fight.c:            if( wf && wf->race == ch->pcdata->deity->npcrace )
att:fight.c:            else if( wf && wf->race == ch->pcdata->deity->npcfoe )
att:fight.c.backup:               DISPOSE( ch->pcdata->nuisance );
att:fight.c.backup:       * ( 1 + abs( ch->alignment - ch->pcdata->clan->alignment ) );
att:fight.c.backup:         bonus -= ch->pcdata->favor / -400;
att:fight.c.backup:   if( !IS_NPC( ch ) && ch->pcdata->learned[gsn_enhanced_damage] > 0 )
att:fight.c.backup:   victim_ac = ((((ch->pcdata->def + ch->pcdata->defplus) * ch->pcdata->deflevel) /15 ) * -1);
att:fight.c.backup:   if( !IS_NPC( ch ) && ch->pcdata->learned[gsn_enhanced_damage] > 0 )
att:fight.c.backup:	dam = (dam + ch->pcdata->str + ch->pcdata->att + ch->pcdata->attplus) * ch->pcdata->attlevel;
att:fight.c.backup:         if( !IS_NPC( ch ) && !IS_IMMORTAL( ch ) && ch->pcdata->clan
att:fight.c.backup:             && ch->pcdata->clan->clan_type != CLAN_ORDER && ch->pcdata->clan->clan_type != CLAN_GUILD && victim != ch )
att:fight.c.backup:            snprintf( filename, 256, "%s%s.record", CLAN_DIR, ch->pcdata->clan->name );
att:fight.c.backup:            if( victim->pcdata && victim->pcdata->clan && victim->pcdata->clan->name == ch->pcdata->clan->name )
att:fight.c.backup:                     ch->pcdata->clan ? ch->pcdata->clan->badge :
att:fight.c.backup:            if( ch->pcdata && ch->pcdata->clan && ch->pcdata->clan->name == victim->pcdata->clan->name )
att:fight.c.backup:      if( !IS_NPC( ch ) && ch->pcdata->clan )
att:fight.c.backup:       && IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) && IS_SET( victim->pcdata->flags, PCFLAG_DEADLY ) )
att:fight.c.backup:         if( ch->pcdata->clan )
att:fight.c.backup:            ch->pcdata->clan->mkills++;
att:fight.c.backup:         ch->pcdata->mkills++;
att:fight.c.backup:         if( ch->pcdata->deity )
att:fight.c.backup:            if( victim->race == ch->pcdata->deity->npcrace )
att:fight.c.backup:            else if( victim->race == ch->pcdata->deity->npcfoe )
att:fight.c.backup:         ch->pcdata->pkills++;
att:fight.c.backup:         if( ch->pcdata->clan )
att:fight.c.backup:               ch->pcdata->clan->pkills[0]++;
att:fight.c.backup:               ch->pcdata->clan->pkills[1]++;
att:fight.c.backup:               ch->pcdata->clan->pkills[2]++;
att:fight.c.backup:               ch->pcdata->clan->pkills[3]++;
att:fight.c.backup:               ch->pcdata->clan->pkills[4]++;
att:fight.c.backup:               ch->pcdata->clan->pkills[5]++;
att:fight.c.backup:               ch->pcdata->clan->pkills[6]++;
att:fight.c.backup:         ch->pcdata->pkills++;
att:fight.c.backup:       && IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) && IS_SET( victim->pcdata->flags, PCFLAG_DEADLY ) )
att:fight.c.backup:      if( !ch->pcdata->clan
att:fight.c.backup:          || ( ch->pcdata->clan->clan_type != CLAN_NOKILL
att:fight.c.backup:               && victim->pcdata->clan->clan_type != CLAN_NOKILL && ch->pcdata->clan != victim->pcdata->clan ) )
att:fight.c.backup:         if( ch->pcdata->clan )
att:fight.c.backup:               ch->pcdata->clan->pkills[0]++;
att:fight.c.backup:               ch->pcdata->clan->pkills[1]++;
att:fight.c.backup:               ch->pcdata->clan->pkills[2]++;
att:fight.c.backup:               ch->pcdata->clan->pkills[3]++;
att:fight.c.backup:               ch->pcdata->clan->pkills[4]++;
att:fight.c.backup:               ch->pcdata->clan->pkills[5]++;
att:fight.c.backup:               ch->pcdata->clan->pkills[6]++;
att:fight.c.backup:         ch->pcdata->pkills++;
att:fight.c.backup:            ch->pcdata->condition[COND_BLOODTHIRST] = ( 10 + ch->level );
att:fight.c.backup:            if( ch->race == victim->pcdata->deity->npcrace )
att:fight.c.backup:            else if( ch->race == victim->pcdata->deity->npcfoe )
att:fight.c.backup:      if( ch->pcdata->clan )
att:fight.c.backup:         ch->pcdata->clan->illegal_pk++;
att:fight.c.backup:      ch->pcdata->illegal_pk++;
att:fight.c.backup:    { if ( !(ch->pcdata->clan && victim->pcdata->clan
att:fight.c.backup:      && ch->pcdata->clan == victim->pcdata->clan ) )  return; }
att:fight.c.backup:        ch->pcdata->ap += (victim->level * get_curr_lck(ch));
att:fight.c.backup:   if( dam == 0 && ( !IS_NPC( ch ) && ( IS_SET( ch->pcdata->flags, PCFLAG_GAG ) ) ) )
att:fight.c.backup:            || !IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
att:fight.c.backup:         if( wf && ch->pcdata->deity )
att:fight.c.backup:            if( wf && wf->race == ch->pcdata->deity->npcrace )
att:fight.c.backup:            else if( wf && wf->race == ch->pcdata->deity->npcfoe )
att:handler.c:   ch_days = ( ch->pcdata->month + 1 ) * sysdata.dayspermonth;
att:handler.c:   ch_days += ch->pcdata->day;
att:handler.c:   age = time_info.year - ch->pcdata->year;
att:handler.c:         ch->pcdata->learned[sn] += mod;
att:handler.c:         ch->pcdata->learned[sn] = URANGE( 0, ch->pcdata->learned[sn] + mod, GET_ADEPT( ch, sn ) );
att:handler.c:            ch->pcdata->condition[COND_FULL] = URANGE( 0, ch->pcdata->condition[COND_FULL] + mod, 48 );
att:handler.c:            ch->pcdata->condition[COND_THIRST] = URANGE( 0, ch->pcdata->condition[COND_THIRST] + mod, 48 );
att:handler.c:            ch->pcdata->condition[COND_DRUNK] = URANGE( 0, ch->pcdata->condition[COND_DRUNK] + mod, 48 );
att:handler.c:            ch->pcdata->condition[COND_BLOODTHIRST] =
att:handler.c:               URANGE( 0, ch->pcdata->condition[COND_BLOODTHIRST] + mod, ch->level + 10 );
att:handler.c:   if( ch->pcdata->deity )
att:handler.c:      if( ch->pcdata->favor > ch->pcdata->deity->affectednum )
att:handler.c:         xSET_BITS( ch->affected_by, ch->pcdata->deity->affected );
att:handler.c:      if( ch->pcdata->favor > ch->pcdata->deity->elementnum )
att:handler.c:         SET_BIT( ch->resistant, ch->pcdata->deity->element );
att:handler.c:      if( ch->pcdata->favor < ch->pcdata->deity->susceptnum )
att:handler.c:         SET_BIT( ch->susceptible, ch->pcdata->deity->suscept );
att:handler.c:         if( wch->pcdata && wch->pcdata->pet == ch )
att:handler.c:            wch->pcdata->pet = NULL;
att:handler.c:      if( !IS_NPC( ch ) && ch->pcdata->clan )
att:handler.c:         location = get_room_index( ch->pcdata->clan->recall );
att:handler.c:   int drunk = IS_NPC( ch ) ? 0 : ch->pcdata->condition[COND_DRUNK];
att:handler.c:          && IS_SET( rch->pcdata->flags, PCFLAG_DND ) && get_trust( ch ) < get_trust( rch ) && can_see( ch, rch ) )
att:handler.c:      if( ch->pcdata->council && !str_cmp( ch->pcdata->council->name, "Newbie Council" ) )
att:handler.c:    clan_factor = 1 + abs( ch->alignment - ch->pcdata->clan->alignment ) / 1000; 
att:handler.c:      deity_factor = ch->pcdata->favor / -500;
att:handler.c:      deity_factor = ch->pcdata->favor / -500;
att:handler.c:   if( !IS_NPC( ch ) && ch->pcdata->nuisance && ch->pcdata->nuisance->flags > 2 )
att:handler.c:      c += ( int )( .4 * ( ( ch->pcdata->nuisance->flags - 2 ) * ch->pcdata->nuisance->power ) );
att:handler.c:      if( ch->pcdata->killed[x].vnum == vnum )
att:handler.c:         if( ch->pcdata->killed[x].count < 50 )
att:handler.c:            ++ch->pcdata->killed[x].count;
att:handler.c:      else if( ch->pcdata->killed[x].vnum == 0 )
att:handler.c:   memmove( ( char * )ch->pcdata->killed + sizeof( KILLED_DATA ),
att:handler.c:            ch->pcdata->killed, ( track - 1 ) * sizeof( KILLED_DATA ) );
att:handler.c:   ch->pcdata->killed[0].vnum = vnum;
att:handler.c:   ch->pcdata->killed[0].count = 1;
att:handler.c:      ch->pcdata->killed[track].vnum = 0;
att:handler.c:      if( ch->pcdata->killed[x].vnum == vnum )
att:handler.c:         return ch->pcdata->killed[x].count;
att:handler.c:      else if( ch->pcdata->killed[x].vnum == 0 )
att:handler.c:         if( !IS_NPC( ch ) && ch->pcdata->bestowments && is_name( cmd->name, ch->pcdata->bestowments )
att:handler.c.backup:   ch_days = ( ch->pcdata->month + 1 ) * sysdata.dayspermonth;
att:handler.c.backup:   ch_days += ch->pcdata->day;
att:handler.c.backup:   age = time_info.year - ch->pcdata->year;
att:handler.c.backup:         ch->pcdata->learned[sn] += mod;
att:handler.c.backup:         ch->pcdata->learned[sn] = URANGE( 0, ch->pcdata->learned[sn] + mod, GET_ADEPT( ch, sn ) );
att:handler.c.backup:            ch->pcdata->condition[COND_FULL] = URANGE( 0, ch->pcdata->condition[COND_FULL] + mod, 48 );
att:handler.c.backup:            ch->pcdata->condition[COND_THIRST] = URANGE( 0, ch->pcdata->condition[COND_THIRST] + mod, 48 );
att:handler.c.backup:            ch->pcdata->condition[COND_DRUNK] = URANGE( 0, ch->pcdata->condition[COND_DRUNK] + mod, 48 );
att:handler.c.backup:            ch->pcdata->condition[COND_BLOODTHIRST] =
att:handler.c.backup:               URANGE( 0, ch->pcdata->condition[COND_BLOODTHIRST] + mod, ch->level + 10 );
att:handler.c.backup:   if( ch->pcdata->deity )
att:handler.c.backup:      if( ch->pcdata->favor > ch->pcdata->deity->affectednum )
att:handler.c.backup:         xSET_BITS( ch->affected_by, ch->pcdata->deity->affected );
att:handler.c.backup:      if( ch->pcdata->favor > ch->pcdata->deity->elementnum )
att:handler.c.backup:         SET_BIT( ch->resistant, ch->pcdata->deity->element );
att:handler.c.backup:      if( ch->pcdata->favor < ch->pcdata->deity->susceptnum )
att:handler.c.backup:         SET_BIT( ch->susceptible, ch->pcdata->deity->suscept );
att:handler.c.backup:         if( wch->pcdata && wch->pcdata->pet == ch )
att:handler.c.backup:            wch->pcdata->pet = NULL;
att:handler.c.backup:      if( !IS_NPC( ch ) && ch->pcdata->clan )
att:handler.c.backup:         location = get_room_index( ch->pcdata->clan->recall );
att:handler.c.backup:   int drunk = IS_NPC( ch ) ? 0 : ch->pcdata->condition[COND_DRUNK];
att:handler.c.backup:          && IS_SET( rch->pcdata->flags, PCFLAG_DND ) && get_trust( ch ) < get_trust( rch ) && can_see( ch, rch ) )
att:handler.c.backup:      if( ch->pcdata->council && !str_cmp( ch->pcdata->council->name, "Newbie Council" ) )
att:handler.c.backup:    clan_factor = 1 + abs( ch->alignment - ch->pcdata->clan->alignment ) / 1000; 
att:handler.c.backup:      deity_factor = ch->pcdata->favor / -500;
att:handler.c.backup:      deity_factor = ch->pcdata->favor / -500;
att:handler.c.backup:   if( !IS_NPC( ch ) && ch->pcdata->nuisance && ch->pcdata->nuisance->flags > 2 )
att:handler.c.backup:      c += ( int )( .4 * ( ( ch->pcdata->nuisance->flags - 2 ) * ch->pcdata->nuisance->power ) );
att:handler.c.backup:      if( ch->pcdata->killed[x].vnum == vnum )
att:handler.c.backup:         if( ch->pcdata->killed[x].count < 50 )
att:handler.c.backup:            ++ch->pcdata->killed[x].count;
att:handler.c.backup:      else if( ch->pcdata->killed[x].vnum == 0 )
att:handler.c.backup:   memmove( ( char * )ch->pcdata->killed + sizeof( KILLED_DATA ),
att:handler.c.backup:            ch->pcdata->killed, ( track - 1 ) * sizeof( KILLED_DATA ) );
att:handler.c.backup:   ch->pcdata->killed[0].vnum = vnum;
att:handler.c.backup:   ch->pcdata->killed[0].count = 1;
att:handler.c.backup:      ch->pcdata->killed[track].vnum = 0;
att:handler.c.backup:      if( ch->pcdata->killed[x].vnum == vnum )
att:handler.c.backup:         return ch->pcdata->killed[x].count;
att:handler.c.backup:      else if( ch->pcdata->killed[x].vnum == 0 )
att:handler.c.backup:         if( !IS_NPC( ch ) && ch->pcdata->bestowments && is_name( cmd->name, ch->pcdata->bestowments )
att:hotboot.c:         och->pcdata->hotboot = TRUE;
att:house.c:   if( sysdata.save_pets && ch->pcdata && ch->pcdata->pet )
att:house.c:      extract_char( ch->pcdata->pet, TRUE );
att:house.c:   if( ch->pcdata && ch->pcdata->clan )
att:house.c:      save_clan( ch->pcdata->clan );
att:interp.c:                  || ( !IS_NPC( ch ) && ch->pcdata->council
att:interp.c:                       && is_name( cmd->name, ch->pcdata->council->powers )
att:interp.c:                  || ( !IS_NPC( ch ) && IS_SET( ch->pcdata->flags, PCFLAG_RETIRED )
att:interp.c:                  || ( !IS_NPC( ch ) && ch->pcdata->bestowments && ch->pcdata->bestowments[0] != '\0'
att:interp.c:                       && is_name( cmd->name, ch->pcdata->bestowments ) && cmd->level <= ( trust + sysdata.bestow_dif ) ) ) )
att:interp.c:      else if( IS_SET( ch->pcdata->flags, PCFLAG_WATCH ) )
att:interp.c:   if( !IS_NPC( ch ) && ch->pcdata->nuisance && ch->pcdata->nuisance->flags > 9
att:interp.c:       && number_percent(  ) < ( ( ch->pcdata->nuisance->flags - 9 ) * 10 * ch->pcdata->nuisance->power ) )
att:liquids.c:   if( !IS_NPC( ch ) && ch->pcdata->condition[COND_DRUNK] > MAX_COND_VALUE - 8 )
att:liquids.c:                && ch->level > 5 && ch->pcdata->condition[COND_BLOODTHIRST] > ( 5 + ch->level / 10 ) )
att:liquids.c:            if( ch->pcdata->condition[COND_BLOODTHIRST] < ( 10 + ch->level ) )
att:liquids.c:               if( ch->pcdata->condition[COND_FULL] >= MAX_COND_VALUE
att:liquids.c:                   || ch->pcdata->condition[COND_THIRST] >= MAX_COND_VALUE )
att:liquids.c:            ch->pcdata->condition[COND_THIRST] = MAX_COND_VALUE;
att:liquids.c:         if( !IS_NPC( ch ) && ( ch->pcdata->condition[COND_THIRST] == MAX_COND_VALUE
att:liquids.c:                                || ch->pcdata->condition[COND_FULL] == MAX_COND_VALUE ) )
att:liquids.c:            if( ch->pcdata->condition[COND_DRUNK] > ( MAX_COND_VALUE / 2 )
att:liquids.c:                && ch->pcdata->condition[COND_DRUNK] < ( MAX_COND_VALUE * .4 ) )
att:liquids.c:            else if( ch->pcdata->condition[COND_DRUNK] >= ( MAX_COND_VALUE * .4 )
att:liquids.c:                     && ch->pcdata->condition[COND_DRUNK] < ( MAX_COND_VALUE * .6 ) )
att:liquids.c:            else if( ch->pcdata->condition[COND_DRUNK] >= ( MAX_COND_VALUE * .6 )
att:liquids.c:                     && ch->pcdata->condition[COND_DRUNK] < ( MAX_COND_VALUE * .9 ) )
att:liquids.c:            else if( ch->pcdata->condition[COND_DRUNK] >= ( MAX_COND_VALUE * .9 )
att:liquids.c:                     && ch->pcdata->condition[COND_DRUNK] < MAX_COND_VALUE )
att:liquids.c:            else if( ch->pcdata->condition[COND_DRUNK] == MAX_COND_VALUE )
att:liquids.c:            if( ch->pcdata->condition[COND_THIRST] > ( MAX_COND_VALUE / 2 )
att:liquids.c:                && ch->pcdata->condition[COND_THIRST] < ( MAX_COND_VALUE * .4 ) )
att:liquids.c:            else if( ch->pcdata->condition[COND_THIRST] >= ( MAX_COND_VALUE * .4 )
att:liquids.c:                     && ch->pcdata->condition[COND_THIRST] < ( MAX_COND_VALUE * .6 ) )
att:liquids.c:            else if( ch->pcdata->condition[COND_THIRST] >= ( MAX_COND_VALUE * .6 )
att:liquids.c:                     && ch->pcdata->condition[COND_THIRST] < ( MAX_COND_VALUE * .9 ) )
att:liquids.c:            else if( ch->pcdata->condition[COND_THIRST] >= ( MAX_COND_VALUE * .9 )
att:liquids.c:                     && ch->pcdata->condition[COND_THIRST] < MAX_COND_VALUE )
att:liquids.c:            else if( ch->pcdata->condition[COND_THIRST] == MAX_COND_VALUE )
att:liquids.c:               if( ch->pcdata->condition[COND_BLOODTHIRST] > ( MAX_COND_VALUE / 2 )
att:liquids.c:                   && ch->pcdata->condition[COND_BLOODTHIRST] < ( MAX_COND_VALUE * .4 ) )
att:liquids.c:               else if( ch->pcdata->condition[COND_BLOODTHIRST] >= ( MAX_COND_VALUE * .4 )
att:liquids.c:                        && ch->pcdata->condition[COND_BLOODTHIRST] < ( MAX_COND_VALUE * .6 ) )
att:liquids.c:               else if( ch->pcdata->condition[COND_BLOODTHIRST] >= ( MAX_COND_VALUE * .6 )
att:liquids.c:                        && ch->pcdata->condition[COND_BLOODTHIRST] < ( MAX_COND_VALUE * .9 ) )
att:liquids.c:               else if( ch->pcdata->condition[COND_BLOODTHIRST] >= ( MAX_COND_VALUE * .9 )
att:liquids.c:                        && ch->pcdata->condition[COND_BLOODTHIRST] < MAX_COND_VALUE )
att:liquids.c:            else if( !IS_VAMPIRE( ch ) && ch->pcdata->condition[COND_BLOODTHIRST] >= MAX_COND_VALUE )
att:liquids.c:               ch->pcdata->condition[COND_BLOODTHIRST] = MAX_COND_VALUE;
att:liquids.c:            if( ch->pcdata->condition[COND_DRUNK] > ( MAX_COND_VALUE / 2 )
att:liquids.c:                && ch->pcdata->condition[COND_DRUNK] < ( MAX_COND_VALUE * .4 ) )
att:liquids.c:            else if( ch->pcdata->condition[COND_DRUNK] >= ( MAX_COND_VALUE * .4 )
att:liquids.c:                     && ch->pcdata->condition[COND_DRUNK] < ( MAX_COND_VALUE * .6 ) )
att:liquids.c:            else if( ch->pcdata->condition[COND_DRUNK] >= ( MAX_COND_VALUE * .6 )
att:liquids.c:                     && ch->pcdata->condition[COND_DRUNK] < ( MAX_COND_VALUE * .9 ) )
att:liquids.c:            else if( ch->pcdata->condition[COND_DRUNK] >= ( MAX_COND_VALUE * .9 )
att:liquids.c:                     && ch->pcdata->condition[COND_DRUNK] < MAX_COND_VALUE )
att:liquids.c:            else if( ch->pcdata->condition[COND_DRUNK] == MAX_COND_VALUE )
att:liquids.c:            if( ch->pcdata->condition[COND_THIRST] > ( MAX_COND_VALUE / 2 )
att:liquids.c:                && ch->pcdata->condition[COND_THIRST] < ( MAX_COND_VALUE * .4 ) )
att:liquids.c:            else if( ch->pcdata->condition[COND_THIRST] >= ( MAX_COND_VALUE * .4 )
att:liquids.c:                     && ch->pcdata->condition[COND_THIRST] < ( MAX_COND_VALUE * .6 ) )
att:liquids.c:            else if( ch->pcdata->condition[COND_THIRST] >= ( MAX_COND_VALUE * .6 )
att:liquids.c:                     && ch->pcdata->condition[COND_THIRST] < ( MAX_COND_VALUE * .9 ) )
att:liquids.c:            else if( ch->pcdata->condition[COND_THIRST] >= ( MAX_COND_VALUE * .9 )
att:liquids.c:                     && ch->pcdata->condition[COND_THIRST] < MAX_COND_VALUE )
att:liquids.c:            else if( ch->pcdata->condition[COND_THIRST] == MAX_COND_VALUE )
att:liquids.c:               if( ch->pcdata->condition[COND_BLOODTHIRST] > ( MAX_COND_VALUE / 2 )
att:liquids.c:                   && ch->pcdata->condition[COND_BLOODTHIRST] < ( MAX_COND_VALUE * .4 ) )
att:liquids.c:               else if( ch->pcdata->condition[COND_BLOODTHIRST] >= ( MAX_COND_VALUE * .4 )
att:liquids.c:                        && ch->pcdata->condition[COND_BLOODTHIRST] < ( MAX_COND_VALUE * .6 ) )
att:liquids.c:               else if( ch->pcdata->condition[COND_BLOODTHIRST] >= ( MAX_COND_VALUE * .6 )
att:liquids.c:                        && ch->pcdata->condition[COND_BLOODTHIRST] < ( MAX_COND_VALUE * .9 ) )
att:liquids.c:               else if( ch->pcdata->condition[COND_BLOODTHIRST] >= ( MAX_COND_VALUE * .9 )
att:liquids.c:                        && ch->pcdata->condition[COND_BLOODTHIRST] < MAX_COND_VALUE )
att:liquids.c:            else if( !IS_VAMPIRE( ch ) && ch->pcdata->condition[COND_BLOODTHIRST] >= MAX_COND_VALUE )
att:liquids.c:               ch->pcdata->condition[COND_BLOODTHIRST] = MAX_COND_VALUE;
att:liquids.c:            if( !IS_OBJ_STAT( source, ITEM_CLANCORPSE ) || !IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
att:magic.c:   if( ch->pcdata->learned[sn] > 0
att:magic.c:      if( ch->pcdata->learned[sn] > 0
att:magic.c:      if( !ch->pcdata->special_skills[sn] || !ch->pcdata->special_skills[sn]->name )
att:magic.c:      if( LOWER( name[0] ) == LOWER( ch->pcdata->special_skills[sn]->name[0] )
att:magic.c:          && !str_prefix( name, ch->pcdata->special_skills[sn]->name ) )
att:magic.c:         if( !IS_NPC( ch ) && ch->pcdata->nuisance &&
att:magic.c:             ch->pcdata->nuisance->flags > 5
att:magic.c:             && number_percent(  ) < ( ( ( ch->pcdata->nuisance->flags - 5 ) * 8 ) + ch->pcdata->nuisance->power * 6 ) )
att:magic.c:         if( !IS_NPC( ch ) && ch->fighting && ch->pcdata->nuisance &&
att:magic.c:             ch->pcdata->nuisance->flags > 5
att:magic.c:             && number_percent(  ) < ( ( ( ch->pcdata->nuisance->flags - 5 ) * 8 ) + 6 * ch->pcdata->nuisance->power ) )
att:magic.c:             && skill->guild != CLASS_NONE && ( !ch->pcdata->clan || skill->guild != ch->pcdata->clan->Class ) )
att:magic.c:            if( ch->pcdata->condition[COND_BLOODTHIRST] < blood )
att:magic.c:   if( !IS_NPC( ch ) && ( number_percent(  ) + skill->difficulty * 5 ) > ch->pcdata->learned[sn] )
att:magic.c:         if( !IS_NPC( vch ) && xIS_SET( vch->act, PLR_WIZINVIS ) && vch->pcdata->wizinvis >= LEVEL_IMMORTAL )
att:magic.c:   if( ( ( get_curr_cha( ch ) / 3 ) + 1 ) > ch->pcdata->charmies )
att:magic.c:      ch->pcdata->charmies++;
att:magic.c:         if( !IS_NPC( vch ) && xIS_SET( vch->act, PLR_WIZINVIS ) && vch->pcdata->wizinvis >= LEVEL_IMMORTAL )
att:magic.c:      if( !IS_NPC( vch ) && xIS_SET( vch->act, PLR_WIZINVIS ) && vch->pcdata->wizinvis >= LEVEL_IMMORTAL )
att:magic.c:   if( IS_PKILL( ch ) && ch->pcdata->condition[COND_BLOODTHIRST] > 22 )
att:magic.c:         if( !IS_IMMORTAL( ch ) && ch->pcdata->condition[COND_BLOODTHIRST] - ( pMobIndex->level / 3 ) < 0 )
att:magic.c:      if( !IS_NPC( vch ) && xIS_SET( vch->act, PLR_WIZINVIS ) && vch->pcdata->wizinvis >= LEVEL_IMMORTAL )
att:magic.c:      if( !IS_NPC( vch ) && xIS_SET( vch->act, PLR_WIZINVIS ) && vch->pcdata->wizinvis >= LEVEL_IMMORTAL )
att:mapout.c:   for( i = ch->pcdata->area->low_r_vnum; i <= ch->pcdata->area->hi_r_vnum; i++ )
att:mapout.c:         if( !( location = make_room( i, ch->pcdata->area ) ) )
att:mapout.c:         location->area = ch->pcdata->area;
att:mapout.c:   for( i = ch->pcdata->area->low_r_vnum; i <= ch->pcdata->area->hi_r_vnum; i++ )
att:mapout.c:      for( i = ch->pcdata->area->low_r_vnum; i <= ch->pcdata->area->hi_r_vnum; i++ )
att:misc.c:   if( IS_NPC( ch ) || ch->pcdata->condition[COND_FULL] > 5 )
att:misc.c:      if( !IS_NPC( ch ) && ch->pcdata->condition[COND_FULL] > 40 )
att:misc.c:   if( !IS_NPC( ch ) && ( !IS_PKILL( ch ) || ( IS_PKILL( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_HIGHGAG ) ) ) )
att:misc.c:               condition = ch->pcdata->condition[COND_FULL];
att:misc.c:               if( condition <= 1 && ch->pcdata->condition[COND_FULL] > 1 )
att:misc.c:               else if( ch->pcdata->condition[COND_FULL] > 40 )
att:misc.c:               condition = ch->pcdata->condition[COND_FULL];
att:misc.c:               if( condition <= 1 && ch->pcdata->condition[COND_FULL] > 1 )
att:misc.c:               else if( ch->pcdata->condition[COND_FULL] > 40 )
att:misc.c:   if( !IS_NPC( ch ) && ( ch->pcdata->condition[COND_FULL] >= 48 || ch->pcdata->condition[COND_THIRST] >= 48 ) )
att:misc.c:   if( !IS_NPC( ch ) && ch->pcdata->nuisance &&
att:misc.c:       ch->pcdata->nuisance->flags > 3
att:misc.c:       && ( ch->pcdata->condition[COND_FULL] >= ( 48 - ( 3 * ch->pcdata->nuisance->flags ) + ch->pcdata->nuisance->power )
att:misc.c:            || ch->pcdata->condition[COND_THIRST] >= ( 48 - ( ch->pcdata->nuisance->flags ) + ch->pcdata->nuisance->power ) ) )
att:misc.c:   if( !IS_NPC( ch ) && ( !IS_PKILL( ch ) || ( IS_PKILL( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_HIGHGAG ) ) ) )
att:misc.c:      if( !IS_NPC( ch ) && ch->pcdata->condition[COND_THIRST] > 43 )
att:mud.h:#define WAIT_STATE(ch, npulse) ((ch)->wait=(!IS_NPC(ch)&&ch->pcdata->nuisance&&\
att:mud.h:			      (ch->pcdata->nuisance->flags>4))?UMAX((ch)->wait,\
att:mud.h:               		      ch->pcdata->nuisance->power)): \
att:mud.h:#define IS_RETIRED(ch) (ch->pcdata && IS_SET(ch->pcdata->flags,PCFLAG_RETIRED))
att:mud.h:#define IS_GUEST(ch) (ch->pcdata && IS_SET(ch->pcdata->flags,PCFLAG_GUEST))
att:mud.h:#define NOT_AUTHED(ch)		(!IS_NPC(ch) && ch->pcdata->auth_state <= 3  \
att:mud.h:			      && IS_SET(ch->pcdata->flags, PCFLAG_UNAUTHED) )
att:mud.h:			      && ch->pcdata->auth_state == 1		     \
att:mud.h:			      && IS_SET(ch->pcdata->flags, PCFLAG_UNAUTHED) )
att:mud.h.backup:#define WAIT_STATE(ch, npulse) ((ch)->wait=(!IS_NPC(ch)&&ch->pcdata->nuisance&&\
att:mud.h.backup:			      (ch->pcdata->nuisance->flags>4))?UMAX((ch)->wait,\
att:mud.h.backup:               		      ch->pcdata->nuisance->power)): \
att:mud.h.backup:#define IS_RETIRED(ch) (ch->pcdata && IS_SET(ch->pcdata->flags,PCFLAG_RETIRED))
att:mud.h.backup:#define IS_GUEST(ch) (ch->pcdata && IS_SET(ch->pcdata->flags,PCFLAG_GUEST))
att:mud.h.backup:#define NOT_AUTHED(ch)		(!IS_NPC(ch) && ch->pcdata->auth_state <= 3  \
att:mud.h.backup:			      && IS_SET(ch->pcdata->flags, PCFLAG_UNAUTHED) )
att:mud.h.backup:			      && ch->pcdata->auth_state == 1		     \
att:mud.h.backup:			      && IS_SET(ch->pcdata->flags, PCFLAG_UNAUTHED) )
att:mud_comm.c:               drunk = vch->pcdata->condition[COND_DRUNK];
att:mud_comm.c:               vch->pcdata->condition[COND_DRUNK] = 0;
att:mud_comm.c:               vch->pcdata->condition[COND_DRUNK] = drunk;
att:mud_comm.c:   if( !ch->pcdata->nuisance )
att:mud_comm.c.backup:               drunk = vch->pcdata->condition[COND_DRUNK];
att:mud_comm.c.backup:               vch->pcdata->condition[COND_DRUNK] = 0;
att:mud_comm.c.backup:               vch->pcdata->condition[COND_DRUNK] = drunk;
att:mud_comm.c.backup:   if( !ch->pcdata->nuisance )
att:player.c:   pager_printf( ch, "\r\nWorth for %s%s.\r\n", ch->name, ch->pcdata->title );
att:player.c:   if( !ch->pcdata->deity )
att:player.c:   else if( ch->pcdata->favor > 2250 )
att:player.c:   else if( ch->pcdata->favor > 2000 )
att:player.c:   else if( ch->pcdata->favor > 1750 )
att:player.c:   else if( ch->pcdata->favor > 1500 )
att:player.c:   else if( ch->pcdata->favor > 1250 )
att:player.c:   else if( ch->pcdata->favor > 1000 )
att:player.c:   else if( ch->pcdata->favor > 750 )
att:player.c:   else if( ch->pcdata->favor > 250 )
att:player.c:   else if( ch->pcdata->favor > -250 )
att:player.c:   else if( ch->pcdata->favor > -750 )
att:player.c:   else if( ch->pcdata->favor > -1000 )
att:player.c:   else if( ch->pcdata->favor > -1250 )
att:player.c:   else if( ch->pcdata->favor > -1500 )
att:player.c:   else if( ch->pcdata->favor > -1750 )
att:player.c:   else if( ch->pcdata->favor > -2000 )
att:player.c:   else if( ch->pcdata->favor > -2250 )
att:player.c:                 ch->pcdata->quest_curr, ch->carry_weight, buf, num_punct( ch->gold ) );
att:player.c:   if( !ch->pcdata->deity )
att:player.c:   if( ch->pcdata->favor < ch->level * 2 )
att:player.c:   pager_printf( ch, "%s appears in a vision, revealing that your remains... ", ch->pcdata->deity->name );
att:player.c:      ch->pcdata->favor -= ch->level * 2;
att:player.c:   STRFREE( ch->pcdata->title );
att:player.c:   ch->pcdata->title = STRALLOC( buf );
att:player.c:   if( IS_SET( ch->pcdata->flags, PCFLAG_NOTITLE ) )
att:player.c:   if( IS_SET( ch->pcdata->flags, PCFLAG_NOCPOSE ) )
att:player.c:      if( !ch->pcdata->cpose )
att:player.c:         ch->pcdata->cpose = str_dup( "" );
att:player.c:      ch_printf( ch, "Your cpose is: %s\r\n", show_tilde( ch->pcdata->cpose ) );
att:player.c:      if( ch->pcdata->cpose )
att:player.c:         DISPOSE( ch->pcdata->cpose );
att:player.c:      ch->pcdata->cpose = str_dup( "" );
att:player.c:   if( ch->pcdata->cpose )
att:player.c:      DISPOSE( ch->pcdata->cpose );
att:player.c:   ch->pcdata->cpose = str_dup( buf );
att:player.c:   if( IS_SET( ch->pcdata->flags, PCFLAG_NODESC ) )
att:player.c:   if( IS_SET( ch->pcdata->flags, PCFLAG_NOBIO ) )
att:player.c:         start_editing( ch, ch->pcdata->bio );
att:player.c:         STRFREE( ch->pcdata->bio );
att:player.c:         ch->pcdata->bio = copy_buffer( ch );
att:player.c:                 ch->hit, ch->max_hit, ch->pcdata->condition[COND_BLOODTHIRST],
att:player.c:                ch->hit, ch->max_hit, ch->pcdata->condition[COND_BLOODTHIRST],
att:player.c:                 ch->hit, ch->max_hit, ch->pcdata->condition[COND_BLOODTHIRST],
att:player.c:                 ch->pcdata->condition[COND_BLOODTHIRST], 10 + ch->level, ch->move, ch->max_move, ch->exp );
att:player.c:                ch->pcdata->condition[COND_BLOODTHIRST], 10 + ch->level, ch->move, ch->max_move, ch->exp );
att:player.c:      ch_printf( ch, "%s\r\n", !str_cmp( ch->pcdata->fprompt, "" ) ? "(default prompt)" : ch->pcdata->fprompt );
att:player.c:   ch_printf( ch, "%s\r\n", !str_cmp( ch->pcdata->fprompt, "" ) ? "(default prompt)" : ch->pcdata->fprompt );
att:player.c:   if( ch->pcdata->fprompt )
att:player.c:      STRFREE( ch->pcdata->fprompt );
att:player.c:      ch->pcdata->fprompt = STRALLOC( "" );
att:player.c:      ch->pcdata->fprompt = STRALLOC( ch->pcdata->prompt );
att:player.c:      ch->pcdata->fprompt = STRALLOC( argument );
att:player.c:      ch_printf( ch, "%s\r\n", !str_cmp( ch->pcdata->prompt, "" ) ? "(default prompt)" : ch->pcdata->prompt );
att:player.c:   ch_printf( ch, "%s\r\n", !str_cmp( ch->pcdata->prompt, "" ) ? "(default prompt)" : ch->pcdata->prompt );
att:player.c:   if( ch->pcdata->prompt )
att:player.c:      STRFREE( ch->pcdata->prompt );
att:player.c:      ch->pcdata->prompt = STRALLOC( "" );
att:player.c:      ch->pcdata->prompt = STRALLOC( ch->pcdata->fprompt );
att:player.c:      ch->pcdata->prompt = STRALLOC( argument );
att:player.c:   if( !ch->pcdata->deity )
att:player.c:   else if( ch->pcdata->favor > 2250 )
att:player.c:   else if( ch->pcdata->favor > 2000 )
att:player.c:   else if( ch->pcdata->favor > 1750 )
att:player.c:   else if( ch->pcdata->favor > 1500 )
att:player.c:   else if( ch->pcdata->favor > 1250 )
att:player.c:   else if( ch->pcdata->favor > 1000 )
att:player.c:   else if( ch->pcdata->favor > 750 )
att:player.c:   else if( ch->pcdata->favor > 250 )
att:player.c:   else if( ch->pcdata->favor > -250 )
att:player.c:   else if( ch->pcdata->favor > -750 )
att:player.c:   else if( ch->pcdata->favor > -1000 )
att:player.c:   else if( ch->pcdata->favor > -1250 )
att:player.c:   else if( ch->pcdata->favor > -1500 )
att:player.c:   else if( ch->pcdata->favor > -1750 )
att:player.c:   else if( ch->pcdata->favor > -2000 )
att:player.c:   else if( ch->pcdata->favor > -2250 )
att:player.c:   ch_printf( ch, "%s considers you to be %s.\n\r", ch->pcdata->deity->name, buf );
att:polymorph.c:   if( morph->deity && ( !ch->pcdata->deity || !get_deity( morph->deity ) ) )
att:polymorph.c:         STRFREE( ch->pcdata->subprompt );
att:polymorph.c:      STRFREE( ch->pcdata->subprompt );
att:polymorph.c:      ch->pcdata->subprompt = STRALLOC( buf );
att:polymorph.c:      if( IS_NPC( ch ) || !ch->pcdata->deity || ch->pcdata->favor < morph->favourused )
att:polymorph.c:         ch->pcdata->favor -= morph->favourused;
att:renumber.c:      if( area->low_r_vnum < ch->pcdata->r_range_lo || area->hi_r_vnum > ch->pcdata->r_range_hi ||
att:renumber.c:          area->low_m_vnum < ch->pcdata->m_range_lo || area->hi_m_vnum > ch->pcdata->m_range_hi ||
att:renumber.c:          area->low_o_vnum < ch->pcdata->o_range_lo || area->hi_o_vnum > ch->pcdata->o_range_hi )
att:renumber.c:      if( r_area->low_room < ch->pcdata->r_range_lo || r_area->hi_room > ch->pcdata->r_range_hi ||
att:renumber.c:          r_area->low_obj < ch->pcdata->o_range_lo || r_area->hi_obj > ch->pcdata->o_range_hi ||
att:renumber.c:          r_area->low_mob < ch->pcdata->m_range_lo || r_area->hi_mob > ch->pcdata->m_range_hi )
att:reset.c:   if( IS_NPC( ch ) || get_trust( ch ) < LEVEL_SAVIOR || !ch->pcdata->area )
att:reset.c:   if( ch->in_room->area != ch->pcdata->area && get_trust( ch ) < LEVEL_GREATER )
att:reset.c:   if( IS_NPC( ch ) || get_trust( ch ) < LEVEL_SAVIOR || !ch->pcdata->area )
att:reset.c:   pArea = ch->pcdata->area;
att:save.c:   ch->pcdata->day = ( number_range( 1, sysdata.dayspermonth ) - 1 );   /* Assign random day of birth */
att:save.c:   ch->pcdata->month = ( number_range( 1, sysdata.monthsperyear ) - 1 );   /* Assign random month of birth */
att:save.c:   ch->pcdata->year = time_info.year - age;  /* Assign birth year based on calculations above */
att:save.c:   snprintf( strsave, MAX_INPUT_LENGTH, "%s%c/%s", PLAYER_DIR, tolower( ch->pcdata->filename[0] ),
att:save.c:             capitalize( ch->pcdata->filename ) );
att:save.c:      snprintf( strback, MAX_INPUT_LENGTH, "%s%c/%s", BACKUP_DIR, tolower( ch->pcdata->filename[0] ),
att:save.c:                capitalize( ch->pcdata->filename ) );
att:save.c:   if( ch->level >= LEVEL_IMMORTAL || IS_SET( ch->pcdata->flags, PCFLAG_RETIRED ) )
att:save.c:      snprintf( strback, MAX_INPUT_LENGTH, "%s%s", GOD_DIR, capitalize( ch->pcdata->filename ) );
att:save.c:         fprintf( fp, "Pcflags      %d\n", ch->pcdata->flags );
att:save.c:         if( ch->pcdata->r_range_lo && ch->pcdata->r_range_hi )
att:save.c:            fprintf( fp, "RoomRange    %d %d\n", ch->pcdata->r_range_lo, ch->pcdata->r_range_hi );
att:save.c:         if( ch->pcdata->o_range_lo && ch->pcdata->o_range_hi )
att:save.c:            fprintf( fp, "ObjRange     %d %d\n", ch->pcdata->o_range_lo, ch->pcdata->o_range_hi );
att:save.c:         if( ch->pcdata->m_range_lo && ch->pcdata->m_range_hi )
att:save.c:            fprintf( fp, "MobRange     %d %d\n", ch->pcdata->m_range_lo, ch->pcdata->m_range_hi );
att:save.c:         fwrite_obj( ch, ch->last_carrying, fp, 0, OS_CARRY, ch->pcdata->hotboot );
att:save.c:      if( sysdata.save_pets && ch->pcdata->pet )
att:save.c:         fwrite_mobile( fp, ch->pcdata->pet );
att:save.c:            ch->pcdata->age_bonus, ch->pcdata->day, ch->pcdata->month, ch->pcdata->year );
att:save.c:   fprintf( fp, "Str          %d\n", ch->pcdata->str );
att:save.c:   fprintf( fp, "Intel          %d\n", ch->pcdata->intel );
att:save.c:   fprintf( fp, "Dex         %d\n", ch->pcdata->dex );
att:save.c:   fprintf( fp, "Lck          %d\n", ch->pcdata->lck );
att:save.c:   fprintf( fp, "Att          %d\n", ch->pcdata->att );
att:save.c:   fprintf( fp, "Def          %d\n", ch->pcdata->def );
att:save.c:   fprintf( fp, "Matt          %d\n", ch->pcdata->matt );
att:save.c:   fprintf( fp, "Mdef          %d\n", ch->pcdata->mdef );
att:save.c:   fprintf( fp, "strplus          %d\n", ch->pcdata->strplus );
att:save.c:   fprintf( fp, "intplus          %d\n", ch->pcdata->intplus );
att:save.c:   fprintf( fp, "dexplus          %d\n", ch->pcdata->dexplus );
att:save.c:   fprintf( fp, "lckplus          %d\n", ch->pcdata->lckplus );
att:save.c:   fprintf( fp, "attplus          %d\n", ch->pcdata->attplus );
att:save.c:   fprintf( fp, "defplus          %d\n", ch->pcdata->defplus );
att:save.c:   fprintf( fp, "mattplus          %d\n", ch->pcdata->mattplus );
att:save.c:   fprintf( fp, "mdefplus          %d\n", ch->pcdata->mdefplus );
att:save.c:   fprintf( fp, "mlevel          %d\n", ch->pcdata->mlevel );
att:save.c:   fprintf( fp, "deflevel          %d\n", ch->pcdata->deflevel );
att:save.c:   fprintf( fp, "attlevel          %d\n", ch->pcdata->attlevel );
att:save.c:   fprintf( fp, "Favor        %d\n", ch->pcdata->favor );
att:save.c:   fprintf( fp, "Balance      %d\n", ch->pcdata->balance );
att:save.c:   fprintf( fp, "Glory        %d\n", ch->pcdata->quest_curr );
att:save.c:   fprintf( fp, "MGlory       %d\n", ch->pcdata->quest_accum );
att:save.c:   fprintf( fp, "Ap        %d\n", ch->pcdata->ap );   
att:save.c:   fprintf( fp, "Tier        %d\n", ch->pcdata->tier );   
att:save.c:   if( ch->pcdata && ch->pcdata->outcast_time )
att:save.c:      fprintf( fp, "Outcast_time %ld\n", ch->pcdata->outcast_time );
att:save.c:   if( ch->pcdata && ch->pcdata->nuisance )
att:save.c:      fprintf( fp, "NuisanceNew %ld %ld %d %d\n", ch->pcdata->nuisance->set_time,
att:save.c:               ch->pcdata->nuisance->max_time, ch->pcdata->nuisance->flags, ch->pcdata->nuisance->power );
att:save.c:   fprintf( fp, "Password     %s~\n", ch->pcdata->pwd );
att:save.c:   if( ch->pcdata->rank && ch->pcdata->rank[0] != '\0' )
att:save.c:      fprintf( fp, "Rank         %s~\n", ch->pcdata->rank );
att:save.c:   if( ch->pcdata->bestowments && ch->pcdata->bestowments[0] != '\0' )
att:save.c:      fprintf( fp, "Bestowments  %s~\n", ch->pcdata->bestowments );
att:save.c:   fprintf( fp, "Title        %s~\n", ch->pcdata->title );
att:save.c:   fprintf( fp, "Cpose        %s~\n", ch->pcdata->cpose );
att:save.c:   fprintf( fp, "Hometown        %s~\n", ch->pcdata->hometown );
att:save.c:   fprintf( fp, "Customclass        %s~\n", ch->pcdata->customclass );
att:save.c:   if( ch->pcdata->homepage && ch->pcdata->homepage[0] != '\0' )
att:save.c:      fprintf( fp, "Homepage     %s~\n", ch->pcdata->homepage );
att:save.c:   if( ch->pcdata->bio && ch->pcdata->bio[0] != '\0' )
att:save.c:      fprintf( fp, "Bio          %s~\n", ch->pcdata->bio );
att:save.c:   if( ch->pcdata->authed_by && ch->pcdata->authed_by[0] != '\0' )
att:save.c:      fprintf( fp, "AuthedBy     %s~\n", ch->pcdata->authed_by );
att:save.c:   if( ch->pcdata->min_snoop )
att:save.c:      fprintf( fp, "Minsnoop     %d\n", ch->pcdata->min_snoop );
att:save.c:   if( ch->pcdata->prompt && *ch->pcdata->prompt )
att:save.c:      fprintf( fp, "Prompt       %s~\n", ch->pcdata->prompt );
att:save.c:   if( ch->pcdata->fprompt && *ch->pcdata->fprompt )
att:save.c:      fprintf( fp, "FPrompt	     %s~\n", ch->pcdata->fprompt );
att:save.c:   if( ch->pcdata->pagerlen != 24 )
att:save.c:      fprintf( fp, "Pagerlen     %d\n", ch->pcdata->pagerlen );
att:save.c:      for( temp = ch->pcdata->first_ignored; temp; temp = temp->next )
att:save.c:      if( ch->pcdata->bamfin && ch->pcdata->bamfin[0] != '\0' )
att:save.c:         fprintf( fp, "Bamfin       %s~\n", ch->pcdata->bamfin );
att:save.c:      if( ch->pcdata->bamfout && ch->pcdata->bamfout[0] != '\0' )
att:save.c:         fprintf( fp, "Bamfout      %s~\n", ch->pcdata->bamfout );
att:save.c:      if( ch->pcdata && ch->pcdata->restore_time )
att:save.c:         fprintf( fp, "Restore_time %ld\n", ch->pcdata->restore_time );
att:save.c:      fprintf( fp, "WizInvis     %d\n", ch->pcdata->wizinvis );
att:save.c:      if( ch->pcdata->r_range_lo && ch->pcdata->r_range_hi )
att:save.c:         fprintf( fp, "RoomRange    %d %d\n", ch->pcdata->r_range_lo, ch->pcdata->r_range_hi );
att:save.c:      if( ch->pcdata->o_range_lo && ch->pcdata->o_range_hi )
att:save.c:         fprintf( fp, "ObjRange     %d %d\n", ch->pcdata->o_range_lo, ch->pcdata->o_range_hi );
att:save.c:      if( ch->pcdata->m_range_lo && ch->pcdata->m_range_hi )
att:save.c:         fprintf( fp, "MobRange     %d %d\n", ch->pcdata->m_range_lo, ch->pcdata->m_range_hi );
att:save.c:   if( ch->pcdata->council )
att:save.c:      fprintf( fp, "Council      %s~\n", ch->pcdata->council_name );
att:save.c:   if( ch->pcdata->deity_name && ch->pcdata->deity_name[0] != '\0' )
att:save.c:      fprintf( fp, "Deity	     %s~\n", ch->pcdata->deity_name );
att:save.c:   if( ch->pcdata->clan_name && ch->pcdata->clan_name[0] != '\0' )
att:save.c:      fprintf( fp, "Clan         %s~\n", ch->pcdata->clan_name );
att:save.c:   fprintf( fp, "Flags        %d\n", ch->pcdata->flags );
att:save.c:   if( ch->pcdata->release_date )
att:save.c:      fprintf( fp, "Helled       %d %s~\n", ( int )ch->pcdata->release_date, ch->pcdata->helled_by );
att:save.c:   fprintf( fp, "PKills       %d\n", ch->pcdata->pkills );
att:save.c:   fprintf( fp, "PDeaths      %d\n", ch->pcdata->pdeaths );
att:save.c:   fprintf( fp, "MKills       %d\n", ch->pcdata->mkills );
att:save.c:   fprintf( fp, "MDeaths      %d\n", ch->pcdata->mdeaths );
att:save.c:   fprintf( fp, "IllegalPK    %d\n", ch->pcdata->illegal_pk );
att:save.c:   fprintf( fp, "Timezone     %d\n", ch->pcdata->timezone );
att:save.c:            ch->pcdata->condition[0], ch->pcdata->condition[1], ch->pcdata->condition[2], ch->pcdata->condition[3] );
att:save.c:   if( ch->pcdata->recent_site )
att:save.c:      fprintf( fp, "Site         %s\n", ch->pcdata->recent_site );
att:save.c:      if( skill_table[sn]->name && ch->pcdata->learned[sn] > 0 )
att:save.c:               fprintf( fp, "Skill        %d '%s'\n", ch->pcdata->learned[sn], skill_table[sn]->name );
att:save.c:               fprintf( fp, "Ability      %d '%s'\n", ch->pcdata->learned[sn], skill_table[sn]->name );
att:save.c:               fprintf( fp, "Spell        %d '%s'\n", ch->pcdata->learned[sn], skill_table[sn]->name );
att:save.c:               fprintf( fp, "Weapon       %d '%s'\n", ch->pcdata->learned[sn], skill_table[sn]->name );
att:save.c:               fprintf( fp, "Tongue       %d '%s'\n", ch->pcdata->learned[sn], skill_table[sn]->name );
att:save.c:      if( ch->pcdata->killed[sn].vnum == 0 )
att:save.c:      fprintf( fp, "Killed       %d %d\n", ch->pcdata->killed[sn].vnum, ch->pcdata->killed[sn].count );
att:save.c:   ch->pcdata->filename = STRALLOC( name );
att:save.c:      ch->pcdata->recent_site = STRALLOC( d->host );
att:save.c:   ch->pcdata->condition[COND_THIRST] = 48;
att:save.c:   ch->pcdata->condition[COND_FULL] = 48;
att:save.c:   ch->pcdata->condition[COND_BLOODTHIRST] = 10;
att:save.c:   ch->pcdata->nuisance = NULL;
att:save.c:   ch->pcdata->wizinvis = 0;
att:save.c:   ch->pcdata->balance = 0;
att:save.c:   ch->pcdata->charmies = 0;
att:save.c:      ch->pcdata->learned[i] = 0;
att:save.c:   ch->pcdata->release_date = 0;
att:save.c:   ch->pcdata->helled_by = NULL;
att:save.c:   ch->pcdata->pagerlen = 24;
att:save.c:   ch->pcdata->first_ignored = NULL;   /* Ignore list */
att:save.c:   ch->pcdata->last_ignored = NULL;
att:save.c:   ch->pcdata->tell_history = NULL; /* imm only lasttell cmnd */
att:save.c:   ch->pcdata->lt_index = 0;  /* last tell index */
att:save.c:   ch->pcdata->hotboot = FALSE;  /* Never changed except when PC is saved during hotboot save */
att:save.c:                          preload ? "Preloading" : "Loading", ch->pcdata->filename, ( int )fst.st_size / 1024 );
att:save.c:               ch->pcdata->pet = mob;
att:save.c:      ch->pcdata->clan_name = STRALLOC( "" );
att:save.c:      ch->pcdata->clan = NULL;
att:save.c:      ch->pcdata->council_name = STRALLOC( "" );
att:save.c:      ch->pcdata->council = NULL;
att:save.c:      ch->pcdata->deity_name = STRALLOC( "" );
att:save.c:      ch->pcdata->deity = NULL;
att:save.c:      ch->pcdata->pet = NULL;
att:save.c:      ch->pcdata->pwd = str_dup( "" );
att:save.c:      ch->pcdata->bamfin = str_dup( "" );
att:save.c:      ch->pcdata->bamfout = str_dup( "" );
att:save.c:      ch->pcdata->rank = str_dup( "" );
att:save.c:      ch->pcdata->bestowments = str_dup( "" );
att:save.c:      ch->pcdata->title = STRALLOC( "" );
att:save.c:      ch->pcdata->customclass = STRALLOC( "" );
att:save.c:      ch->pcdata->homepage = str_dup( "" );
att:save.c:      ch->pcdata->bio = STRALLOC( "" );
att:save.c:      ch->pcdata->authed_by = STRALLOC( "" );
att:save.c:      ch->pcdata->prompt = STRALLOC( "" );
att:save.c:      ch->pcdata->fprompt = STRALLOC( "" );
att:save.c:      ch->pcdata->r_range_lo = 0;
att:save.c:      ch->pcdata->r_range_hi = 0;
att:save.c:      ch->pcdata->m_range_lo = 0;
att:save.c:      ch->pcdata->m_range_hi = 0;
att:save.c:      ch->pcdata->o_range_lo = 0;
att:save.c:      ch->pcdata->o_range_hi = 0;
att:save.c:      ch->pcdata->wizinvis = 0;
att:save.c:      ch->pcdata->timezone = -1;
att:save.c:      if( !ch->pcdata->clan_name )
att:save.c:         ch->pcdata->clan_name = STRALLOC( "" );
att:save.c:         ch->pcdata->clan = NULL;
att:save.c:      if( !ch->pcdata->council_name )
att:save.c:         ch->pcdata->council_name = STRALLOC( "" );
att:save.c:         ch->pcdata->council = NULL;
att:save.c:      if( !ch->pcdata->deity_name )
att:save.c:         ch->pcdata->deity_name = STRALLOC( "" );
att:save.c:         ch->pcdata->deity = NULL;
att:save.c:      if( !ch->pcdata->bio )
att:save.c:         ch->pcdata->bio = STRALLOC( "" );
att:save.c:      if( !ch->pcdata->authed_by )
att:save.c:         ch->pcdata->authed_by = STRALLOC( "" );
att:save.c:         if( ch->pcdata->wizinvis < 2 )
att:save.c:            ch->pcdata->wizinvis = ch->level;
att:save.c:                     KEY( "Att", ch->pcdata->att, fread_number( fp ) );
att:save.c:                     KEY( "Attplus", ch->pcdata->attplus, fread_number( fp ) );
att:save.c:                     KEY( "Attlevel", ch->pcdata->attlevel, fread_number( fp ) );
att:save.c:                     ch->pcdata->learned[sn] = value;
att:save.c:                           ch->pcdata->learned[sn] = 0;
att:save.c:                  ch->pcdata->age_bonus = x1;
att:save.c:                  ch->pcdata->day = x2;
att:save.c:                  ch->pcdata->month = x3;
att:save.c:                  ch->pcdata->year = x4;
att:save.c:            KEY( "Ap", ch->pcdata->ap, fread_number( fp ) );
att:save.c:            KEY( "AuthedBy", ch->pcdata->authed_by, fread_string( fp ) );
att:save.c:            KEY( "Balance", ch->pcdata->balance, fread_number( fp ) );
att:save.c:            KEY( "Bamfin", ch->pcdata->bamfin, fread_string_nohash( fp ) );
att:save.c:            KEY( "Bamfout", ch->pcdata->bamfout, fread_string_nohash( fp ) );
att:save.c:            KEY( "Bestowments", ch->pcdata->bestowments, fread_string_nohash( fp ) );
att:save.c:            KEY( "Bio", ch->pcdata->bio, fread_string( fp ) );
att:save.c:               ch->pcdata->clan_name = fread_string( fp );
att:save.c:                   && ch->pcdata->clan_name[0] != '\0' && ( ch->pcdata->clan = get_clan( ch->pcdata->clan_name ) ) == NULL )
att:save.c:                     ch->pcdata->clan_name );
att:save.c:                  STRFREE( ch->pcdata->clan_name );
att:save.c:                  ch->pcdata->clan_name = STRALLOC( "" );
att:save.c:            KEY( "Customclass", ch->pcdata->customclass, fread_string( fp ) );
att:save.c:               ch->pcdata->condition[0] = x1;
att:save.c:               ch->pcdata->condition[1] = x2;
att:save.c:               ch->pcdata->condition[2] = x3;
att:save.c:               ch->pcdata->condition[3] = x4;
att:save.c:               ch->pcdata->council_name = fread_string( fp );
att:save.c:                   && ch->pcdata->council_name[0] != '\0'
att:save.c:                   && ( ch->pcdata->council = get_council( ch->pcdata->council_name ) ) == NULL )
att:save.c:                     ch->pcdata->council_name );
att:save.c:                  STRFREE( ch->pcdata->council_name );
att:save.c:                  ch->pcdata->council_name = STRALLOC( "" );
att:save.c:               ch->pcdata->cpose = fread_string( fp );
att:save.c:               if( isalpha( ch->pcdata->cpose[0] ) || isdigit( ch->pcdata->cpose[0] ) )
att:save.c:                  snprintf( buf, MAX_STRING_LENGTH, " %s", ch->pcdata->cpose );
att:save.c:                  if( ch->pcdata->cpose )
att:save.c:                     STRFREE( ch->pcdata->cpose );
att:save.c:                  ch->pcdata->cpose = STRALLOC( buf );
att:save.c:                     KEY( "Dex", ch->pcdata->dex, fread_number( fp ) );
att:save.c:                     KEY( "Def", ch->pcdata->def, fread_number( fp ) );
att:save.c:                     KEY( "Dexplus", ch->pcdata->dexplus, fread_number( fp ) );
att:save.c:                     KEY( "Defplus", ch->pcdata->defplus, fread_number( fp ) );
att:save.c:                     KEY( "Deflevel", ch->pcdata->deflevel, fread_number( fp ) );
att:save.c:               ch->pcdata->deity_name = fread_string( fp );
att:save.c:                   && ch->pcdata->deity_name[0] != '\0'
att:save.c:                   && ( ch->pcdata->deity = get_deity( ch->pcdata->deity_name ) ) == NULL )
att:save.c:                  snprintf( buf, MAX_STRING_LENGTH, "&R\r\nYour deity, %s, has met its demise!\r\n", ch->pcdata->deity_name );
att:save.c:                  STRFREE( ch->pcdata->deity_name );
att:save.c:                  ch->pcdata->deity_name = STRALLOC( "" );
att:save.c:                  ch->pcdata->favor = 0;
att:save.c:            KEY( "Favor", ch->pcdata->favor, fread_number( fp ) );
att:save.c:            KEY( "Flags", ch->pcdata->flags, fread_number( fp ) );
att:save.c:            KEY( "FPrompt", ch->pcdata->fprompt, fread_string( fp ) );
att:save.c:            KEY( "Glory", ch->pcdata->quest_curr, fread_number( fp ) );
att:save.c:               ch->pcdata->clan_name = fread_string( fp );
att:save.c:                   && ch->pcdata->clan_name[0] != '\0' && ( ch->pcdata->clan = get_clan( ch->pcdata->clan_name ) ) == NULL )
att:save.c:                     ch->pcdata->clan_name );
att:save.c:                  STRFREE( ch->pcdata->clan_name );
att:save.c:                  ch->pcdata->clan_name = STRALLOC( "" );
att:save.c:               ch->pcdata->release_date = fread_number( fp );
att:save.c:               ch->pcdata->helled_by = fread_string( fp );
att:save.c:            KEY( "Homepage", ch->pcdata->homepage, fread_string_nohash( fp ) );
att:save.c:               ch->pcdata->hometown = fread_string( fp );
att:save.c:               if( isalpha( ch->pcdata->hometown[0] ) || isdigit( ch->pcdata->hometown[0] ) )
att:save.c:                  snprintf( buf, MAX_STRING_LENGTH, " %s", ch->pcdata->hometown );
att:save.c:                  if( ch->pcdata->hometown )
att:save.c:                     STRFREE( ch->pcdata->hometown );
att:save.c:                  ch->pcdata->hometown = STRALLOC( buf );
att:save.c:               for( ign = 0, inode = ch->pcdata->first_ignored; inode; inode = inode->next )
att:save.c:                  LINK( inode, ch->pcdata->first_ignored, ch->pcdata->last_ignored, next, prev );
att:save.c:            KEY( "IllegalPK", ch->pcdata->illegal_pk, fread_number( fp ) );
att:save.c:                   KEY( "Intel", ch->pcdata->intel, fread_number( fp ) );
att:save.c:                   KEY( "Intplus", ch->pcdata->intplus, fread_number( fp ) );
att:save.c:                  ch->pcdata->killed[killcnt].vnum = fread_number( fp );
att:save.c:                  ch->pcdata->killed[killcnt++].count = fread_number( fp );
att:save.c:                     KEY( "Lck", ch->pcdata->lck, fread_number( fp ) );
att:save.c:                     KEY( "Lckplus", ch->pcdata->lckplus, fread_number( fp ) );
att:save.c:                   KEY( "Matt", ch->pcdata->matt, fread_number( fp ) );
att:save.c:                   KEY( "Mdef", ch->pcdata->mdef, fread_number( fp ) );
att:save.c:                   KEY( "Mattplus", ch->pcdata->mattplus, fread_number( fp ) );
att:save.c:                   KEY( "Mdefplus", ch->pcdata->mdefplus, fread_number( fp ) );
att:save.c:                   KEY( "Mlevel", ch->pcdata->mlevel, fread_number( fp ) );
att:save.c:            KEY( "MDeaths", ch->pcdata->mdeaths, fread_number( fp ) );
att:save.c:            KEY( "MGlory", ch->pcdata->quest_accum, fread_number( fp ) );
att:save.c:            KEY( "Minsnoop", ch->pcdata->min_snoop, fread_number( fp ) );
att:save.c:            KEY( "MKills", ch->pcdata->mkills, fread_number( fp ) );
att:save.c:               ch->pcdata->m_range_lo = fread_number( fp );
att:save.c:               ch->pcdata->m_range_hi = fread_number( fp );
att:save.c:               CREATE( ch->pcdata->nuisance, NUISANCE_DATA, 1 );
att:save.c:               ch->pcdata->nuisance->set_time = fread_number( fp );
att:save.c:               ch->pcdata->nuisance->max_time = fread_number( fp );
att:save.c:               ch->pcdata->nuisance->flags = fread_number( fp );
att:save.c:               ch->pcdata->nuisance->power = 1;
att:save.c:               CREATE( ch->pcdata->nuisance, NUISANCE_DATA, 1 );
att:save.c:               ch->pcdata->nuisance->set_time = fread_number( fp );
att:save.c:               ch->pcdata->nuisance->max_time = fread_number( fp );
att:save.c:               ch->pcdata->nuisance->flags = fread_number( fp );
att:save.c:               ch->pcdata->nuisance->power = fread_number( fp );
att:save.c:            KEY( "Outcast_time", ch->pcdata->outcast_time, fread_number( fp ) );
att:save.c:               ch->pcdata->o_range_lo = fread_number( fp );
att:save.c:               ch->pcdata->o_range_hi = fread_number( fp );
att:save.c:            KEY( "Pagerlen", ch->pcdata->pagerlen, fread_number( fp ) );
att:save.c:            KEY( "Password", ch->pcdata->pwd, fread_string_nohash( fp ) );
att:save.c:            KEY( "PDeaths", ch->pcdata->pdeaths, fread_number( fp ) );
att:save.c:            KEY( "PKills", ch->pcdata->pkills, fread_number( fp ) );
att:save.c:            KEY( "Prompt", ch->pcdata->prompt, fread_string( fp ) );
att:save.c:            KEY( "Rank", ch->pcdata->rank, fread_string_nohash( fp ) );
att:save.c:            KEY( "Restore_time", ch->pcdata->restore_time, fread_number( fp ) );
att:save.c:               ch->pcdata->r_range_lo = fread_number( fp );
att:save.c:               ch->pcdata->r_range_hi = fread_number( fp );
att:save.c:                   KEY( "Str", ch->pcdata->str, fread_number( fp ) );
att:save.c:                   KEY( "Strplus", ch->pcdata->strplus, fread_number( fp ) );
att:save.c:                  ch->pcdata->prev_site = STRALLOC( fread_word( fp ) );
att:save.c:                  ch_printf( ch, "Last connected from: %s\r\n", ch->pcdata->prev_site );
att:save.c:                     ch->pcdata->learned[sn] = value;
att:save.c:                           ch->pcdata->learned[sn] = 0;
att:save.c:                     ch->pcdata->learned[sn] = value;
att:save.c:                           ch->pcdata->learned[sn] = 0;
att:save.c:               if( !ch->pcdata->pwd )
att:save.c:                  ch->pcdata->pwd = str_dup( "" );
att:save.c:               if( !ch->pcdata->bamfin )
att:save.c:                  ch->pcdata->bamfin = str_dup( "" );
att:save.c:               if( !ch->pcdata->bamfout )
att:save.c:                  ch->pcdata->bamfout = str_dup( "" );
att:save.c:               if( !ch->pcdata->bio )
att:save.c:                  ch->pcdata->bio = STRALLOC( "" );
att:save.c:               if( !ch->pcdata->rank )
att:save.c:                  ch->pcdata->rank = str_dup( "" );
att:save.c:               if( !ch->pcdata->bestowments )
att:save.c:                  ch->pcdata->bestowments = str_dup( "" );
att:save.c:               if( !ch->pcdata->title )
att:save.c:                  ch->pcdata->title = STRALLOC( "" );
att:save.c:               if( !ch->pcdata->customclass )
att:save.c:                  ch->pcdata->customclass = STRALLOC( "" );
att:save.c:               if( !ch->pcdata->cpose )
att:save.c:                  ch->pcdata->cpose = STRALLOC( "" );
att:save.c:               if( !ch->pcdata->hometown )
att:save.c:                  ch->pcdata->hometown = STRALLOC( "" );
att:save.c:               if( !ch->pcdata->homepage )
att:save.c:                  ch->pcdata->homepage = str_dup( "" );
att:save.c:               if( !ch->pcdata->authed_by )
att:save.c:                  ch->pcdata->authed_by = STRALLOC( "" );
att:save.c:               if( !ch->pcdata->prompt )
att:save.c:                  ch->pcdata->prompt = STRALLOC( "" );
att:save.c:               if( !ch->pcdata->fprompt )
att:save.c:                  ch->pcdata->fprompt = STRALLOC( "" );
att:save.c:                  ch->pcdata->killed[killcnt].vnum = 0;
att:save.c:                  CREATE( ch->pcdata->tell_history, const char *, 26 );
att:save.c:                     ch->pcdata->tell_history[i] = NULL;
att:save.c:               if( !ch->pcdata->prompt )
att:save.c:                  ch->pcdata->prompt = STRALLOC( "" );
att:save.c:               if( ch->pcdata->clan )
att:save.c:                     KEY( "Tier", ch->pcdata->tier, fread_number( fp ) );
att:save.c:                     ch->pcdata->learned[sn] = value;
att:save.c:                           ch->pcdata->learned[sn] = 0;
att:save.c:            KEY( "Timezone", ch->pcdata->timezone, fread_number( fp )); 
att:save.c:               ch->pcdata->title = fread_string( fp );
att:save.c:               if( isalpha( ch->pcdata->title[0] ) || isdigit( ch->pcdata->title[0] ) )
att:save.c:                  snprintf( buf, MAX_STRING_LENGTH, " %s", ch->pcdata->title );
att:save.c:                  if( ch->pcdata->title )
att:save.c:                     STRFREE( ch->pcdata->title );
att:save.c:                  ch->pcdata->title = STRALLOC( buf );
att:save.c:                     ch->pcdata->learned[sn] = value;
att:save.c:                           ch->pcdata->learned[sn] = 0;
att:save.c:            KEY( "WizInvis", ch->pcdata->wizinvis, fread_number( fp ) );
att:save.c:   if( IS_NPC( ch ) || !ch->pcdata->pet )
att:save.c:   mob = ch->pcdata->pet;
att:skills.c:   if( ch->pcdata->clan && ch->pcdata->clan == vch->pcdata->clan )
att:skills.c:         if( ch->pcdata->condition[COND_BLOODTHIRST] < blood )
att:skills.c:         if( ch->pcdata->condition[COND_BLOODTHIRST] < blood )
att:skills.c:   if( IS_NPC( ch ) || ch->pcdata->learned[sn] <= 0 )
att:skills.c:   if( ch->pcdata->learned[sn] < adept )
att:skills.c:      schance = ch->pcdata->learned[sn] + ( 5 * skill_table[sn]->difficulty );
att:skills.c:      ch->pcdata->learned[sn] = UMIN( adept, ch->pcdata->learned[sn] + learn );
att:skills.c:      if( ch->pcdata->learned[sn] == adept ) /* fully learned! */
att:skills.c:   if( IS_NPC( ch ) || ch->pcdata->learned[sn] <= 0 )
att:skills.c:   if( ch->pcdata->learned[sn] < adept )
att:skills.c:      schance = ch->pcdata->learned[sn] + ( 5 * skill_table[sn]->difficulty );
att:skills.c:      ch->pcdata->learned[sn] = UMIN( adept, ch->pcdata->learned[sn] + learn );
att:skills.c:      if( ch->pcdata->learned[sn] == adept ) /* fully learned! */
att:skills.c:   if( IS_NPC( ch ) || ch->pcdata->learned[sn] <= 0 )
att:skills.c:   schance = ch->pcdata->learned[sn] + ( 5 * skill_table[sn]->difficulty );
att:skills.c:   if( ch->pcdata->learned[sn] < ( adept - 1 ) )
att:skills.c:      ch->pcdata->learned[sn] = UMIN( adept, ch->pcdata->learned[sn] + 1 );
att:skills.c:	    (IS_NPC(ch) ? 80 : ch->pcdata->learned[gsn_dig]) )
att:skills.c:   if( ch->pcdata->condition[COND_BLOODTHIRST] < 10 )
att:skills.c:          && ch->fighting && ch->pcdata->condition[COND_BLOODTHIRST] < ( 10 + ch->level ) )
att:skills.c:                               ( 10 + ch->level ) - ch->pcdata->condition[COND_BLOODTHIRST] ) );
att:skills.c:         if( ch->pcdata->condition[COND_FULL] <= 37 )
att:skills.c:          && ch->fighting && ch->pcdata->condition[COND_BLOODTHIRST] < ( 10 + ch->level ) )
att:skills.c:   if( IS_PKILL( ch ) && ch->pcdata->condition[COND_BLOODTHIRST] > 22 )
att:skills.c:   if( !IS_NPC( ch ) && ch->pcdata->clan )
att:skills.c:      location = get_room_index( ch->pcdata->clan->recall );
att:skills.c:   if( !IS_NPC( ch ) && !location && ch->level >= 5 && IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
att:skills.c:   if( !IS_NPC( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_GAG ) )   /* SB */
att:skills.c:   if( !IS_NPC( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_GAG ) )
att:skills.c:   if( !IS_NPC( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_GAG ) )
att:skills.c:   if( !IS_NPC( ch ) && ( ( get_curr_dex( ch ) < 17 ) || ch->pcdata->condition[COND_DRUNK] > 0 ) )
att:skills.c:            || !IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
att:skills.c:   if( skill_table[gsn]->guild == 99 && !IS_NPC( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
att:track.c:   if( !IS_NPC( ch ) && ch->pcdata->learned[gsn_track] <= 0 )
att:update.c:   add_hp = UMAX( 1, add_hp ) + ( ch->pcdata->lck * .3 );
att:update.c:   add_mana = UMAX( 0, add_mana ) + ( (ch->pcdata->lck * .4) + ch->pcdata->intel );
att:update.c:   add_move = UMAX( 10, add_move ) + (( ch->pcdata->lck * .5 ) + ch->pcdata->dex );
att:update.c:   ch->pcdata->str += 1;
att:update.c:   ch->pcdata->intel += 1;
att:update.c:   ch->pcdata->dex += 1;
att:update.c:   ch->pcdata->lck += 1;
att:update.c:   ch->pcdata->def += 1;
att:update.c:   ch->pcdata->mdef += 1;
att:update.c:   ch->pcdata->att += 1;
att:update.c:         if( ch->pcdata->condition[COND_BLOODTHIRST] <= 1 )
att:update.c:         else if( ch->pcdata->condition[COND_BLOODTHIRST] >= ( 8 + ch->level ) )
att:update.c:      if( ch->pcdata->condition[COND_FULL] == 0 )
att:update.c:      if( ch->pcdata->condition[COND_THIRST] == 0 )
att:update.c:      if( ch->pcdata->condition[COND_FULL] == 0 )
att:update.c:      if( ch->pcdata->condition[COND_THIRST] == 0 )
att:update.c:         if( ch->pcdata->condition[COND_BLOODTHIRST] <= 1 )
att:update.c:         else if( ch->pcdata->condition[COND_BLOODTHIRST] >= ( 8 + ch->level ) )
att:update.c:      if( ch->pcdata->condition[COND_FULL] == 0 )
att:update.c:      if( ch->pcdata->condition[COND_THIRST] == 0 )
att:update.c:   condition = ch->pcdata->condition[iCond];
att:update.c:      ch->pcdata->condition[iCond] = URANGE( 0, condition + value, 10 + ch->level );
att:update.c:      ch->pcdata->condition[iCond] = URANGE( 0, condition + value, 48 );
att:update.c:   if( ch->pcdata->condition[iCond] == 0 )
att:update.c:   if( ch->pcdata->condition[iCond] == 1 )
att:update.c:   if( ch->pcdata->condition[iCond] == 2 )
att:update.c:   if( ch->pcdata->condition[iCond] == 3 )
att:update.c:      if( !IS_NPC( ch ) && ch->pcdata->nuisance )
att:update.c:         if( ch->pcdata->nuisance->flags < MAX_NUISANCE_STAGE )
att:update.c:            temp = ch->pcdata->nuisance->max_time - ch->pcdata->nuisance->set_time;
att:update.c:            temp *= ch->pcdata->nuisance->flags;
att:update.c:            temp += ch->pcdata->nuisance->set_time;
att:update.c:               ++ch->pcdata->nuisance->flags;
att:update.c:               SET_BIT( ch->pcdata->flags, PCFLAG_IDLE );
att:update.c:         if( ch->pcdata->condition[COND_DRUNK] > 8 )
att:update.c:            worsen_mental_state( ch, ch->pcdata->condition[COND_DRUNK] / 8 );
att:update.c:         if( ch->pcdata->condition[COND_FULL] > 1 )
att:update.c:         if( ch->pcdata->condition[COND_THIRST] > 1 )
att:update.c:         if( CAN_PKILL( ch ) && ch->pcdata->condition[COND_THIRST] - 9 > 10 )
att:update.c:         if( !IS_NPC( ch ) && ch->pcdata->nuisance )
att:update.c:            value = ( ( 0 - ch->pcdata->nuisance->flags ) * ch->pcdata->nuisance->power );
att:update.c:      if( !IS_NPC( ch ) && !IS_IMMORTAL( ch ) && ch->pcdata->release_date > 0 && ch->pcdata->release_date <= current_time )
att:update.c:         if( ch->pcdata->clan )
att:update.c:            location = get_room_index( ch->pcdata->clan->recall );
att:update.c:         STRFREE( ch->pcdata->helled_by );
att:update.c:         ch->pcdata->helled_by = NULL;
att:update.c:         ch->pcdata->release_date = 0;
att:update.c:   if( IS_NPC( ch ) || ch->pcdata->condition[COND_DRUNK] <= 0 )
att:update.c:   drunk = ch->pcdata->condition[COND_DRUNK];
att:act_comm.c:   drunk = ch->pcdata->condition[COND_DRUNK];
att:act_comm.c:            ch_printf( ch, "(%d) ", ( !IS_NPC( ch ) ) ? ch->pcdata->wizinvis : ch->mobinvis );
att:act_comm.c:            ch_printf( ch, "(%d) ", ( !IS_NPC( ch ) ) ? ch->pcdata->wizinvis : ch->mobinvis );
att:act_comm.c:            ch_printf( ch, "(%d) ", ( !IS_NPC( ch ) ) ? ch->pcdata->wizinvis : ch->mobinvis );
att:act_comm.c:            ch_printf( ch, "(%d) ", ( !IS_NPC( ch ) ) ? ch->pcdata->wizinvis : ch->mobinvis );
att:act_comm.c:            ch_printf( ch, "(%d) ", ( !IS_NPC( ch ) ) ? ch->pcdata->wizinvis : ch->mobinvis );
att:act_comm.c:            ch_printf( ch, "(%d) ", ( !IS_NPC( ch ) ) ? ch->pcdata->wizinvis : ch->mobinvis );
att:act_comm.c:             ( !IS_NPC( och ) && !IS_SET( och->pcdata->flags, PCFLAG_RETIRED ) ) )
att:act_comm.c:               && !( och->pcdata->council && !str_cmp( och->pcdata->council->name, "Newbie Council" ) ) ) )
att:act_comm.c:            if( vch->pcdata->clan != ch->pcdata->clan )
att:act_comm.c:            if( vch->pcdata->council != ch->pcdata->council )
att:act_comm.c:            snprintf( lbuf, MAX_INPUT_LENGTH + 4, "(%d) ", ( !IS_NPC( ch ) ) ? ch->pcdata->wizinvis : ch->mobinvis );
att:act_comm.c:         if( !IS_NPC( ch ) && ch->pcdata->nuisance
att:act_comm.c:             && ch->pcdata->nuisance->flags > 7
att:act_comm.c:             && ( number_percent(  ) < ( ( ch->pcdata->nuisance->flags - 7 ) * 10 * ch->pcdata->nuisance->power ) ) )
att:act_comm.c:         if( !IS_NPC( vch ) && vch->pcdata->nuisance &&
att:act_comm.c:             vch->pcdata->nuisance->flags > 7
att:act_comm.c:             && ( number_percent(  ) < ( ( vch->pcdata->nuisance->flags - 7 ) * 10 * vch->pcdata->nuisance->power ) ) )
att:act_comm.c:   if( IS_NPC( ch ) || !ch->pcdata->clan
att:act_comm.c:       || ch->pcdata->clan->clan_type == CLAN_ORDER || ch->pcdata->clan->clan_type == CLAN_GUILD )
att:act_comm.c:            && !( ch->pcdata->council && !str_cmp( ch->pcdata->council->name, "Newbie Council" ) ) ) )
att:act_comm.c:   if( IS_NPC( ch ) || !ch->pcdata->clan || ch->pcdata->clan->clan_type != CLAN_ORDER )
att:act_comm.c:   if( IS_NPC( ch ) || !ch->pcdata->council )
att:act_comm.c:   if( IS_NPC( ch ) || !ch->pcdata->clan || ch->pcdata->clan->clan_type != CLAN_GUILD )
att:act_comm.c:   if( !IS_IMMORTAL( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_RETIRED ) )
att:act_comm.c:   if( IS_SET( ch->pcdata->flags, PCFLAG_NOBECKON ) )
att:act_comm.c:      victim->pcdata->lt_index = tolower( IS_NPC( ch ) ? ch->short_descr[0] : ch->name[0] ) - 'a';
att:act_comm.c:      victim->pcdata->lt_index = tolower( IS_NPC( ch ) ? ch->short_descr[0] : ch->name[0] ) - 'a';
att:act_comm.c:      victim->pcdata->lt_index = tolower( IS_NPC( ch ) ? ch->short_descr[0] : ch->name[0] ) - 'a';
att:act_comm.c:   if( IS_NPC( ch ) || !IS_IMMORTAL( ch ) || !ch->pcdata->tell_history )
att:act_comm.c:      tindex = ch->pcdata->lt_index;
att:act_comm.c:   if( ch->pcdata->tell_history[tindex] )
att:act_comm.c:      send_to_char( ch->pcdata->tell_history[tindex], ch );
att:act_comm.c:   if( get_trust( ch ) >= LEVEL_ASCENDANT || is_name( "bug", ch->pcdata->bestowments ) )
att:act_comm.c:   if( ch->level >= LEVEL_HERO && !ch->pcdata->pet ) /* Pet crash fix */
att:act_comm.c:   if( sysdata.save_pets && ch->pcdata->pet )
att:act_comm.c:      act( AT_BYE, "$N follows $S master into the Void.", ch, NULL, ch->pcdata->pet, TO_ROOM );
att:act_comm.c:      extract_char( ch->pcdata->pet, TRUE );
att:act_comm.c:   if( ch->pcdata->clan )
att:act_comm.c:      save_clan( ch->pcdata->clan );
att:act_comm.c:   if( !ch->pcdata->council )
att:act_comm.c:   if( str_cmp( ch->pcdata->council->name, "Newbie Council" ) )
att:act_comm.c:   if( IS_NPC( ch ) && !IS_NPC( ch->master ) && ch->master->pcdata->pet == ch )
att:act_comm.c:      ch->master->pcdata->pet = NULL;
att:act_comm.c:         ch->master->pcdata->charmies--;
att:act_comm.c:                          IS_VAMPIRE( gch ) ? gch->pcdata->condition[COND_BLOODTHIRST] : gch->mana,
att:act_comm.c:      if( ch->pcdata->clan == cch->pcdata->clan && ch->pcdata->clan != NULL )
att:act_comm.c:               return ch->pcdata->learned[sn];
att:act_comm.c:            if( ch->pcdata->learned[sn] >= 99 )
att:act_comm.c:            if( lang_array[langs] == LANG_CLAN && ( IS_NPC( ch ) || !ch->pcdata->clan ) )
att:act_comm.c:          lang_array[lang] == LANG_COMMON || ch->pcdata->learned[sn] >= 99 )
att:act_comm.c:      if( countlangs( ch->speaks ) >= ( ch->level / 10 ) && ch->pcdata->learned[sn] <= 0 )
att:act_comm.c:      ch->pcdata->learned[sn] += prct;
att:act_comm.c:      ch->pcdata->learned[sn] = UMIN( ch->pcdata->learned[sn], 99 );
att:act_comm.c:      if( ch->pcdata->learned[sn] == prct )
att:act_comm.c:      else if( ch->pcdata->learned[sn] < 60 )
att:act_comm.c:      else if( ch->pcdata->learned[sn] < 60 + prct )
att:act_comm.c:      else if( ch->pcdata->learned[sn] < 99 )
att:act_info.c:      * ( IS_NPC( ch ) ? 1 : ( ch->pcdata->condition[COND_DRUNK] ? ( ch->pcdata->condition[COND_DRUNK] / 12 ) : 1 ) );
att:act_info.c:   else if( ch->pcdata->learned[gsn_peek] > 0 )
att:act_info.c:      SET_BIT( ch->pcdata->flags, PCFLAG_HELPSTART );
att:act_info.c:      if( wch->level < iLevelLower || wch->level > iLevelUpper || ( fPkill && !CAN_PKILL( wch ) ) || ( fImmortalOnly && wch->level < LEVEL_IMMORTAL ) || ( fClassRestrict && !rgfClass[wch->Class] ) || ( fRaceRestrict && !rgfRace[wch->race] ) || ( fClanMatch && ( pClan != wch->pcdata->clan ) )  /* SB */
att:act_info.c:          || ( fCouncilMatch && ( pCouncil != wch->pcdata->council ) )  /* SB */
att:act_info.c:          || ( fDeityMatch && ( pDeity != wch->pcdata->deity ) ) )
att:act_info.c:      if( fLeader && !( wch->pcdata->council &&
att:act_info.c:                        ( ( wch->pcdata->council->head2 &&
att:act_info.c:                            !str_cmp( wch->pcdata->council->head2, wch->name ) ) ||
att:act_info.c:                          ( wch->pcdata->council->head &&
att:act_info.c:                            !str_cmp( wch->pcdata->council->head, wch->name ) ) ) ) &&
att:act_info.c:          !( wch->pcdata->clan && ( ( wch->pcdata->clan->deity &&
att:act_info.c:                                      !str_cmp( wch->pcdata->clan->deity, wch->name ) )
att:act_info.c:                                    || ( wch->pcdata->clan->leader
att:act_info.c:                                         && !str_cmp( wch->pcdata->clan->leader, wch->name ) )
att:act_info.c:                                    || ( wch->pcdata->clan->number1
att:act_info.c:                                         && !str_cmp( wch->pcdata->clan->number1, wch->name ) )
att:act_info.c:                                    || ( wch->pcdata->clan->number2
att:act_info.c:                                         && !str_cmp( wch->pcdata->clan->number2, wch->name ) ) ) ) )
att:act_info.c:      if( fGroup && !wch->leader && !IS_SET( wch->pcdata->flags, PCFLAG_GROUPWHO ) && ( !whogr_p || !whogr_p->indent ) )
att:act_info.c:      if( fShowHomepage && wch->pcdata->homepage && wch->pcdata->homepage[0] != '\0' )
att:act_info.c:         snprintf( char_name, MAX_INPUT_LENGTH, "<A HREF=\"%s\">%s</A>", show_tilde( wch->pcdata->homepage ), wch->name );
att:act_info.c:      else if( wch->pcdata->clan
att:act_info.c:               && !str_cmp( wch->name, wch->pcdata->clan->leader ) && wch->pcdata->clan->leadrank[0] != '\0' )
att:act_info.c:         Class = wch->pcdata->clan->leadrank;
att:act_info.c:      else if( wch->pcdata->clan
att:act_info.c:               && !str_cmp( wch->name, wch->pcdata->clan->number1 ) && wch->pcdata->clan->onerank[0] != '\0' )
att:act_info.c:         Class = wch->pcdata->clan->onerank;
att:act_info.c:      else if( wch->pcdata->clan
att:act_info.c:               && !str_cmp( wch->name, wch->pcdata->clan->number2 ) && wch->pcdata->clan->tworank[0] != '\0' )
att:act_info.c:         Class = wch->pcdata->clan->tworank;
att:act_info.c:      else if( wch->pcdata->rank && wch->pcdata->rank[0] != '\0' )
att:act_info.c:         Class = wch->pcdata->rank;
att:act_info.c:      if( wch->pcdata->clan )
att:act_info.c:         CLAN_DATA *pclan = wch->pcdata->clan;
att:act_info.c:      if( wch->pcdata->council )
att:act_info.c:         if( wch->pcdata->council->head2 == NULL )
att:act_info.c:            if( !str_cmp( wch->name, wch->pcdata->council->head ) )
att:act_info.c:            if( !str_cmp( wch->name, wch->pcdata->council->head ) || !str_cmp( wch->name, wch->pcdata->council->head2 ) )
att:act_info.c:         mudstrlcat( council_name, wch->pcdata->council_name, MAX_INPUT_LENGTH );
att:act_info.c:         snprintf( invis_str, MAX_INPUT_LENGTH, "(%d) ", wch->pcdata->wizinvis );
att:act_info.c:                wch->pcdata->customclass,
att:act_info.c:                char_name, wch->pcdata->title, extra_title, clan_name, council_name );
att:act_info.c:             && ( skill->guild != CLASS_NONE && ( !IS_GUILDED( ch ) || ( ch->pcdata->clan->Class != skill->guild ) ) ) )
att:act_info.c:         if( ch->pcdata->learned[sn] <= 0 && SPELL_FLAG( skill, SF_SECRETSKILL ) )
att:act_info.c:         if( ch->pcdata->learned[normalSn] > 0 )
att:act_info.c:         pager_printf( ch, " %3d%% ", ch->pcdata->learned[normalSn] );
att:act_info.c:	     && ch->pcdata->clan->class != skill_table[sn]->guild )
att:act_info.c:      if( ch->pcdata->learned[sn] >= adept )
att:act_info.c:         ch->pcdata->learned[sn] += int_app[get_curr_int( ch )].learn;
att:act_info.c:         if( ch->pcdata->learned[sn] >= adept )
att:act_info.c:            ch->pcdata->learned[sn] = adept;
att:act_info.c:   DISPOSE( ch->pcdata->pwd );
att:act_info.c:   ch->pcdata->pwd = str_dup( pwdnew );
att:act_info.c:      if( !IS_NPC( ch ) && ch->pcdata->clan )
att:act_info.c:         if( ch->pcdata->clan->clan_type == CLAN_ORDER )
att:act_info.c:         else if( ch->pcdata->clan->clan_type == CLAN_GUILD )
att:act_info.c:      if( IS_IMMORTAL( ch ) || ( ch->pcdata->council && !str_cmp( ch->pcdata->council->name, "Newbie Council" ) ) )
att:act_info.c:      if( !IS_NPC( ch ) && ch->pcdata->council )
att:act_info.c:      if( !IS_NPC( ch ) && IS_SET( ch->pcdata->flags, PCFLAG_RETIRED ) )
att:act_info.c:      else if( !str_cmp( arg + 1, "clan" ) && !IS_NPC( ch ) && ch->pcdata->clan
att:act_info.c:               && ch->pcdata->clan->clan_type != CLAN_ORDER && ch->pcdata->clan->clan_type != CLAN_GUILD )
att:act_info.c:      else if( !str_cmp( arg + 1, "council" ) && !IS_NPC( ch ) && ch->pcdata->council )
att:act_info.c:      else if( !str_cmp( arg + 1, "guild" ) && !IS_NPC( ch ) && ch->pcdata->clan
att:act_info.c:               && ch->pcdata->clan->clan_type == CLAN_GUILD )
att:act_info.c:                                                  || ( ch->pcdata->council
att:act_info.c:                                                       && !str_cmp( ch->pcdata->council->name, "Newbie Council" ) ) ) )
att:act_info.c:      else if( !str_cmp( arg + 1, "order" ) && !IS_NPC( ch ) && ch->pcdata->clan
att:act_info.c:               && ch->pcdata->clan->clan_type == CLAN_ORDER )
att:act_info.c:          * if (ch->pcdata->clan)
att:act_info.c:          * if (ch->pcdata->council)
att:act_info.c:          * if (ch->pcdata->guild)
att:act_info.c:          * if (ch->pcdata->clan)
att:act_info.c:          * if (ch->pcdata->council)
att:act_info.c:                 IS_SET( ch->pcdata->flags, PCFLAG_PAGERON ) ? "[+] PAGER"
att:act_info.c:                 IS_SET( ch->pcdata->flags, PCFLAG_GAG ) ? "[+] GAG"
att:act_info.c:                 IS_SET( ch->pcdata->flags, PCFLAG_NORECALL ) ? "[+] NORECALL"
att:act_info.c:                 : "[-] norecall", IS_SET( ch->pcdata->flags, PCFLAG_NOSUMMON ) ? "[+] NOSUMMON" : "[-] nosummon" );
att:act_info.c:      if( !IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
att:act_info.c:                 IS_SET( ch->pcdata->flags, PCFLAG_GROUPWHO ) ? "[+] GROUPWHO" : "[-] groupwho",
att:act_info.c:                 IS_SET( ch->pcdata->flags, PCFLAG_NOINTRO ) ? "[+] NOINTRO" : "[-] nointro",
att:act_info.c:                 IS_SET( ch->pcdata->flags, PCFLAG_BECKON ) ? "[+] BECKON" : "[-] beckon" );
att:act_info.c:      ch_printf_color( ch, "Pager Length (%d)    Wimpy (&W%d&w)", ch->pcdata->pagerlen, ch->wimpy );
att:act_info.c:                 IS_SET( ch->pcdata->flags, PCFLAG_NODESC ) ? " You are not permitted to set your description.\r\n" : "" );
att:act_info.c:         if( ( bit == PLR_FLEE || bit == PLR_NICE || bit == PLR_SHOVEDRAG ) && IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
att:act_info.c:            SET_BIT( ch->pcdata->flags, bit );
att:act_info.c:            REMOVE_BIT( ch->pcdata->flags, bit );
att:act_info.c:         if( ch->pcdata->learned[normalSn] <= 0 && SPELL_FLAG( skill, SF_SECRETSKILL ) )
att:act_info.c:                          skn, skill->name, ch->pcdata->learned[normalSn], skill->skill_adept[ch->Class], buf );
att:act_info.c:      if( IS_SET( ch->pcdata->flags, PCFLAG_PAGERON ) )
att:act_info.c:         ch_printf( ch, "Pager is now enabled at %d lines.\r\n", ch->pcdata->pagerlen );
att:act_info.c:   ch->pcdata->pagerlen = atoi( arg );
att:act_info.c:   if( ch->pcdata->pagerlen < 5 )
att:act_info.c:      ch->pcdata->pagerlen = 5;
att:act_info.c:   ch_printf( ch, "Page pausing set to %d lines.\r\n", ch->pcdata->pagerlen );
att:act_info.c:      if( !ch->pcdata->first_ignored )
att:act_info.c:      for( temp = ch->pcdata->first_ignored; temp; temp = temp->next )
att:act_info.c:      for( temp = ch->pcdata->first_ignored; temp; temp = next )
att:act_info.c:         UNLINK( temp, ch->pcdata->first_ignored, ch->pcdata->last_ignored, next, prev );
att:act_info.c:      for( temp = ch->pcdata->first_ignored, i = 0; temp; temp = temp->next, i++ )
att:act_info.c:            UNLINK( temp, ch->pcdata->first_ignored, ch->pcdata->last_ignored, next, prev );
att:act_info.c:         LINK( inew, ch->pcdata->first_ignored, ch->pcdata->last_ignored, next, prev );
att:act_info.c:   for( temp = ch->pcdata->first_ignored; temp; temp = temp->next )
att:act_move.c: if( ch->pcdata->cpose )
att:act_move.c:      ch->pcdata->cpose = str_dup( " is here." );
att:act_move.c:      if( ch->pcdata->nuisance && ch->pcdata->nuisance->flags > 8 &&
att:act_move.c:          number_percent(  ) > ( ch->pcdata->nuisance->flags * ch->pcdata->nuisance->power ) )
att:act_obj.c:                && !IS_NPC( ch ) && IS_SET( ch->pcdata->flags, PCFLAG_DEADLY )
att:act_obj.c:   if( !IS_NPC( ch ) && ( !IS_PKILL( ch ) || ( IS_PKILL( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_GAG ) ) ) )
att:act_obj.c:   if( IS_NPC( ch ) || ch->pcdata->learned[gsn_dual_wield] )
att:act_obj.c:   if( !IS_NPC( ch ) && ch->pcdata->deity && ch->pcdata->deity->name[0] != '\0' )
att:act_obj.c:      mudstrlcpy( name, ch->pcdata->deity->name, 50 );
att:act_obj.c:   else if( !IS_NPC( ch ) && ch->pcdata->clan && ch->pcdata->clan->deity[0] != '\0' )
att:act_obj.c:      mudstrlcpy( name, ch->pcdata->clan->deity, 50 );
att:act_obj.c:         if( !IS_NPC( vch ) && xIS_SET( vch->act, PLR_WIZINVIS ) && vch->pcdata->wizinvis >= LEVEL_IMMORTAL )
att:act_wiz.c:      if( IS_SET( ch->pcdata->flags, PCFLAG_DND ) )
att:act_wiz.c:         REMOVE_BIT( ch->pcdata->flags, PCFLAG_DND );
att:act_wiz.c:         SET_BIT( ch->pcdata->flags, PCFLAG_DND );
att:act_wiz.c:      victim->pcdata->authed_by = QUICKLINK( ch->name );
att:act_wiz.c:      DISPOSE( ch->pcdata->bamfin );
att:act_wiz.c:      ch->pcdata->bamfin = newbamf;
att:act_wiz.c:      DISPOSE( ch->pcdata->bamfout );
att:act_wiz.c:      ch->pcdata->bamfout = newbamf;
att:act_wiz.c:   DISPOSE( ch->pcdata->rank );
att:act_wiz.c:      ch->pcdata->rank = str_dup( "" );
att:act_wiz.c:      ch->pcdata->rank = newrank;
att:act_wiz.c:   if( wch && !IS_NPC( wch ) && IS_SET( wch->pcdata->flags, PCFLAG_DND ) && get_trust( ch ) < get_trust( wch ) )
att:act_wiz.c:      if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
att:act_wiz.c:      if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
att:act_wiz.c:      ch->pcdata->restore_time = current_time;
att:act_wiz.c:            if( deity && vch->pcdata->deity != deity )
att:act_wiz.c:            vch->pcdata->condition[COND_BLOODTHIRST] = ( 10 + vch->level );
att:act_wiz.c:   if( !ch->pcdata->restore_time )
att:act_wiz.c:   time_passed = current_time - ch->pcdata->restore_time;
att:act_wiz.c:         ch->pcdata->wizinvis = level;
att:act_wiz.c:   if( ch->pcdata->wizinvis < 2 )
att:act_wiz.c:      ch->pcdata->wizinvis = ch->level;
att:act_wiz.c:   victim->pcdata->helled_by = STRALLOC( ch->name );
att:act_wiz.c:      if( str_cmp( ch->name, victim->pcdata->helled_by ) )
att:act_wiz.c:      if( str_cmp( ch->pcdata->council_name, "Quest Council" ) && ( get_trust( ch ) < LEVEL_DEMI ) )
att:act_wiz.c:   for( track = 0; track < MAX_KILLTRACK && vch->pcdata->killed[track].vnum; track++ )
att:act_wiz.c:      tmob = get_mob_index( vch->pcdata->killed[track].vnum );
att:act_wiz.c:      ch_printf( ch, "    - killed %d times.\r\n", vch->pcdata->killed[track].count );
att:act_wiz.c:      if( str_cmp( ch->pcdata->council_name, "Code Council" )
att:act_wiz.c:      if( get_trust( ch ) < LEVEL_GOD && str_cmp( ch->pcdata->council_name, "Code Council" ) )
att:act_wiz.c:      if( get_trust( ch ) < LEVEL_GOD && str_cmp( ch->pcdata->council_name, "Code Council" ) )
att:act_wiz.c:      if( str_cmp( ch->pcdata->council_name, "Code Council" ) && get_trust( ch ) < LEVEL_ASCENDANT )
att:act_wiz.c:          && pproject->coder && str_cmp( pproject->coder, ch->name ) && str_cmp( ch->pcdata->council_name, "Code Council" ) )
att:act_wiz.c:             get_trust( ch ) < LEVEL_GREATER && str_cmp( ch->pcdata->council_name, "Code Council" ) )
att:act_wiz.c:             && str_cmp( ch->name, pproject->coder ) && str_cmp( ch->pcdata->council_name, "Code Council" ) )
att:act_wiz.c:             pproject->coder && str_cmp( ch->name, pproject->coder ) && str_cmp( ch->pcdata->council_name, "Code Council" ) )
att:act_wiz.c:             && str_cmp( ch->name, pproject->coder ) && str_cmp( ch->pcdata->council_name, "Code Council" ) )
att:agecommand.c:             && ( skill->guild != CLASS_NONE && ( !IS_GUILDED( ch ) || ( ch->pcdata->clan->Class != skill->guild ) ) ) )
att:agecommand.c:         if( ch->pcdata->learned[sn] <= 0 && SPELL_FLAG( skill, SF_SECRETSKILL ) )
att:agecommand.c:if ( ch->pcdata->learned[normalSn] <= 99 )
att:agecommand.c:         if( ch->pcdata->learned[normalSn] > 99 )
att:agecommand.c:         if( ch->pcdata->learned[normalSn] < 99 )
att:agecommand.c:pager_printf( ch, "You have a balance of %d\r\n", ch->pcdata->balance);
att:agecommand.c:      amount = ch->pcdata->balance;
att:agecommand.c:   if( amount > ch->pcdata->balance )
att:agecommand.c:   ch->pcdata->balance -= amount;
att:agecommand.c:   ch->pcdata->balance += amount;
att:agecommand.c:        if ( ch->pcdata->souls <= 1999)
att:agecommand.c:        ch->pcdata->souls -= 2000;
att:agecommand.c:   if( IS_SET( ch->pcdata->flags, PCFLAG_NOCPOSE ) )
att:agecommand.c:      ch->pcdata->cpose = str_dup( " is here." );
att:agecommand.c:   ch->pcdata->cpose = STRALLOC( buf );
att:agecommand.c:      ch->pcdata->customclass = str_dup( "Adventurer" );
att:agecommand.c:   ch->pcdata->customclass = STRALLOC( buf );
att:agecommand.c:pager_printf( ch, "&CYou are a level %d %s %s from %s.\r\n", ch->level, capitalize( get_race( ch ) ),  ch->pcdata->customclass, ch->pcdata->hometown  );
att:agecommand.c:pager_printf( ch, "Your TIER rank is %d.\r\n\r\n", ch->pcdata->tier);
att:agecommand.c:                    (ch->pcdata->str + ch->pcdata->strplus), (ch->pcdata->str + ch->pcdata->att + ch->damroll),  ch->pcdata->attlevel );
att:agecommand.c:                    (ch->pcdata->dex + ch->pcdata->strplus), (ch->pcdata->def + ch->pcdata->defplus) , ch->pcdata->deflevel );
att:agecommand.c:                    (ch->pcdata->intel + ch->pcdata->intplus) , (ch->pcdata->mdef + ch->pcdata->mdefplus), ch->pcdata->mlevel );
att:agecommand.c:                    (ch->pcdata->lck + ch->pcdata->lckplus ) );
att:agecommand.c:                    ch->gold, ch->pcdata->ap, ch->practice );
att:agecommand.c:pager_printf( ch, "Your Cpose is set at '%s'\r\n", ch->pcdata->cpose );
att:agecommand.c:                    ch->pcdata->pkills, ch->pcdata->illegal_pk, ch->pcdata->pdeaths );
att:agecommand.c:   if( ch->pcdata->clan && ch->pcdata->clan->clan_type != CLAN_ORDER && ch->pcdata->clan->clan_type != CLAN_GUILD )
att:agecommand.c:                    ch->pcdata->clan->name, ch->pcdata->clan->pkills[6],
att:agecommand.c:                    ( ch->pcdata->clan->pkills[1] + ch->pcdata->clan->pkills[2] +
att:agecommand.c:                      ch->pcdata->clan->pkills[3] + ch->pcdata->clan->pkills[4] + ch->pcdata->clan->pkills[5] ) );
att:agecommand.c:                    ch->pcdata->clan->pdeaths[6],
att:agecommand.c:                    ( ch->pcdata->clan->pdeaths[1] + ch->pcdata->clan->pdeaths[2] +
att:agecommand.c:                      ch->pcdata->clan->pdeaths[3] + ch->pcdata->clan->pdeaths[4] + ch->pcdata->clan->pdeaths[5] ) );
att:agecommand.c:                    xIS_SET( ch->act, PLR_WIZINVIS ) ? "X" : " ", ch->pcdata->wizinvis );
att:agecommand.c:      pager_printf( ch, "Bamfin:  %s\r\n", ( ch->pcdata->bamfin[0] != '\0' )
att:agecommand.c:                    ? ch->pcdata->bamfin : "An immortal appears." );
att:agecommand.c:      pager_printf( ch, "Bamfout: %s\r\n", ( ch->pcdata->bamfout[0] != '\0' )
att:agecommand.c:                    ? ch->pcdata->bamfout : "The immortal disappears." );
att:agecommand.c:      if( ch->pcdata->area )
att:agecommand.c:                       ch->pcdata->area->low_r_vnum, ch->pcdata->area->hi_r_vnum,
att:agecommand.c:                       ch->pcdata->area->low_o_vnum, ch->pcdata->area->hi_o_vnum,
att:agecommand.c:                       ch->pcdata->area->low_m_vnum, ch->pcdata->area->hi_m_vnum );
att:agecommand.c:         pager_printf( ch, "Area Loaded [%s]\r\n", ( IS_SET( ch->pcdata->area->status, AREA_LOADED ) ) ? "yes" : "no" );
att:bank.c:   ch->pcdata->balance += amount;
att:bank.c:      amount = ch->pcdata->balance;
att:bank.c:   if( amount > ch->pcdata->balance )
att:bank.c:   ch->pcdata->balance -= amount;
att:bank.c:   ch_printf( ch, "You have %d gold in the bank.\r\n", ch->pcdata->balance );
att:boards.c:      if( ch->pcdata->clan && !str_cmp( ch->pcdata->clan->name, board->read_group ) )
att:boards.c:      if( ch->pcdata->council && !str_cmp( ch->pcdata->council->name, board->read_group ) )
att:boards.c:      if( ch->pcdata->clan && !str_cmp( ch->pcdata->clan->name, board->post_group ) )
att:boards.c:      if( ch->pcdata->council && !str_cmp( ch->pcdata->council->name, board->post_group ) )
att:build.c:   if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
att:build.c:   if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
att:build.c:   if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
att:build.c:   if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
att:build.c:   if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
att:build.c:      if( !IS_NPC( fch ) && get_trust( ch ) < get_trust( fch ) && IS_SET( fch->pcdata->flags, PCFLAG_DND ) )
att:build.c:      if( get_trust( ch ) < LEVEL_CREATOR || vnum < 1 || IS_NPC( ch ) || !ch->pcdata->area )
att:build.c:         if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
att:build.c:      location = make_room( vnum, ch->pcdata->area );
att:build.c:             && ch->pcdata->bamfout[0] != '\0' ) ? ch->pcdata->bamfout : ( char * )"The immortal disappears.", TO_ROOM );
att:build.c:             && ch->pcdata->bamfin[0] != '\0' ) ? ch->pcdata->bamfin : ( char * )"An immortal appears.", TO_ROOM );
att:build.c:         if( ch->pcdata && ch->pcdata->subprompt )
att:build.c:            STRFREE( ch->pcdata->subprompt );
att:build.c:            ch->pcdata->subprompt = NULL;
att:build.c:         if( ch->pcdata->subprompt )
att:build.c:            STRFREE( ch->pcdata->subprompt );
att:build.c:         ch->pcdata->subprompt = STRALLOC( buf );
att:build.c:         if( ch->pcdata && ch->pcdata->subprompt )
att:build.c:            STRFREE( ch->pcdata->subprompt );
att:build.c:            ch->pcdata->subprompt = NULL;
att:build.c:         if( ch->pcdata->subprompt )
att:build.c:            STRFREE( ch->pcdata->subprompt );
att:build.c:         ch->pcdata->subprompt = STRALLOC( buf );
att:build.c:                && get_trust( ch ) < LEVEL_GREATER && !is_name( "protoflag", ch->pcdata->bestowments ) )
att:build.c:   if( !ch->pcdata->area )
att:build.c:      pArea = ch->pcdata->area;
att:build.c:      location->area = ch->pcdata->area;
att:build.c:   pArea = ch->pcdata->area;
att:build.c:         location->area = ch->pcdata->area;
att:build.c:   if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
att:build.c:         if( ch->pcdata && ch->pcdata->subprompt )
att:build.c:            STRFREE( ch->pcdata->subprompt );
att:build.c:            ch->pcdata->subprompt = NULL;
att:build.c:         if( ch->pcdata->subprompt )
att:build.c:            STRFREE( ch->pcdata->subprompt );
att:build.c:         ch->pcdata->subprompt = STRALLOC( "<&CRedit &W#%r&w> %i" );
att:build.c:      if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
att:build.c:      if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
att:build.c:   if( get_trust( ch ) > LEVEL_IMMORTAL && ch->pcdata->r_range_lo && ch->pcdata->r_range_hi )
att:build.c:      tarea = ch->pcdata->area;
att:build.c:      tarea->low_r_vnum = ch->pcdata->r_range_lo;
att:build.c:      tarea->low_o_vnum = ch->pcdata->o_range_lo;
att:build.c:      tarea->low_m_vnum = ch->pcdata->m_range_lo;
att:build.c:      tarea->hi_r_vnum = ch->pcdata->r_range_hi;
att:build.c:      tarea->hi_o_vnum = ch->pcdata->o_range_hi;
att:build.c:      tarea->hi_m_vnum = ch->pcdata->m_range_hi;
att:build.c:      ch->pcdata->area = tarea;
att:build.c:      ch->pcdata->area = NULL;
att:build.c:      if( !ch->pcdata->area )
att:build.c:       || ( is_name( buf, ch->pcdata->bestowments )
att:build.c:       || ( ch->pcdata->council && is_name( buf, ch->pcdata->council->powers ) ) )
att:build.c:                || is_name( tmp->filename, ch->pcdata->bestowments )
att:build.c:                || ( ch->pcdata->council
att:build.c:                     && ( is_name( buf, ch->pcdata->council->powers )
att:build.c:                          || is_name( "aassign", ch->pcdata->council->powers ) ) ) )
att:build.c:   ch->pcdata->area = tarea;
att:build.c:   if( IS_NPC( ch ) || get_trust( ch ) < LEVEL_CREATOR || !ch->pcdata || ( argument[0] == '\0' && !ch->pcdata->area ) )
att:build.c:      tarea = ch->pcdata->area;
att:build.c:   if( IS_NPC( ch ) || get_trust( ch ) < LEVEL_CREATOR || !ch->pcdata || ( argument[0] == '\0' && !ch->pcdata->area ) )
att:build.c:      tarea = ch->pcdata->area;
att:build.c:       || ( !ch->pcdata->area && get_trust( ch ) < LEVEL_GREATER ) )
att:build.c:   tarea = ch->pcdata->area;
att:build.c:       || ( !ch->pcdata->area && get_trust( ch ) < LEVEL_GREATER ) )
att:build.c:   tarea = ch->pcdata->area;
att:build.c:       || ( !ch->pcdata->area && get_trust( ch ) < LEVEL_GREATER ) )
att:build.c:   tarea = ch->pcdata->area;
att:build.c:       && ( obj->vnum < ch->pcdata->area->low_o_vnum || obj->vnum > ch->pcdata->area->hi_o_vnum ) )
att:build.c:       && ( mob->vnum < ch->pcdata->area->low_m_vnum || mob->vnum > ch->pcdata->area->hi_m_vnum ) )
att:build.c:       || ( !ch->pcdata->area && get_trust( ch ) < LEVEL_GREATER ) )
att:build.c:   tarea = ch->pcdata->area;
att:calendar.c:   ch->pcdata->timezone = i;
att:calendar.c:   ch_printf( ch, "&wYour local time        :  &W %s&D\r\n", c_time( current_time, ch->pcdata->timezone ) );
att:calendar.c:      if( day == ch->pcdata->day + 1 && time_info.month == ch->pcdata->month )
att:chess.c:         ch->pcdata->game_board = NULL;
att:chess.c:         ch->pcdata->game_board = NULL;
att:chess.c:      if( ch->pcdata->game_board )
att:chess.c:      ch->pcdata->game_board = board;
att:chess.c:      ch->pcdata->game_board->player1 = QUICKLINK( ch->name );
att:chess.c:      if( ch->pcdata->game_board )
att:chess.c:         ch->pcdata->game_board = board;
att:chess.c:      board = vch->pcdata->game_board;
att:chess.c:      ch->pcdata->game_board = board;
att:chess.c:   if( !ch->pcdata->game_board )
att:chess.c:      free_game( ch->pcdata->game_board );
att:chess.c:      GAME_BOARD_DATA *board = ch->pcdata->game_board;
att:chess.c:      send_to_char( print_big_board( ch, ch->pcdata->game_board ), ch );
att:chess.c:      if( !ch->pcdata->game_board->player1 || !ch->pcdata->game_board->player2 )
att:chess.c:      if( ch->pcdata->game_board->turn < 0 )
att:chess.c:      if( king_in_checkmate( ch->pcdata->game_board, BLACK_KING ) )
att:chess.c:      if( king_in_checkmate( ch->pcdata->game_board, WHITE_KING ) )
att:chess.c:      if( ch->pcdata->game_board->turn % 2 == 1 && !str_cmp( ch->pcdata->game_board->player1, ch->name ) )
att:chess.c:      if( ch->pcdata->game_board->turn % 2 == 0 && !str_cmp( ch->pcdata->game_board->player2, ch->name ) )
att:chess.c:      ret = is_valid_move( ch, ch->pcdata->game_board, x, y, dx, dy );
att:chess.c:         board = ch->pcdata->game_board;
att:chess.c:            if( ch->pcdata->game_board->type == TYPE_IMC )
att:chess.c:               imc_send_chess( ch->pcdata->game_board->player1, ch->pcdata->game_board->player2, arg );
att:chess.c:      if( !str_cmp( ch->name, ch->pcdata->game_board->player1 ) )
att:chess.c:         opp = get_char_world( ch, ch->pcdata->game_board->player2 );
att:chess.c:            mudstrlcpy( opp_name, ch->pcdata->game_board->player2, MAX_INPUT_LENGTH );
att:chess.c:         opp = get_char_world( ch, ch->pcdata->game_board->player1 );
att:chess.c:            mudstrlcpy( opp_name, ch->pcdata->game_board->player1, MAX_INPUT_LENGTH );
att:chess.c:         if( ch->pcdata->game_board->type == TYPE_LOCAL ) \
att:chess.c:         if( ch->pcdata->game_board->type == TYPE_IMC ) \
att:chess.c:         if( ch->pcdata->game_board->type == TYPE_LOCAL ) \
att:clans.c:   if( IS_NPC( ch ) || !ch->pcdata->clan )
att:clans.c:   for( roster = ch->pcdata->clan->first_member; roster; roster = roster->next )
att:clans.c:         roster->kills = ch->pcdata->mkills;
att:clans.c:         roster->deaths = ch->pcdata->mdeaths;
att:clans.c:         save_clan( ch->pcdata->clan );
att:clans.c:   add_roster( ch->pcdata->clan, ch->name, ch->Class, ch->level, ch->pcdata->mkills, ch->pcdata->mdeaths );
att:clans.c:   save_clan( ch->pcdata->clan );
att:clans.c:   if( IS_NPC( ch ) || !ch->pcdata->clan )
att:clans.c:   clan = ch->pcdata->clan;
att:clans.c:   if( IS_NPC( ch ) || !ch->pcdata->clan )
att:clans.c:   clan = ch->pcdata->clan;
att:clans.c:   if( ( ch->pcdata && ch->pcdata->bestowments
att:clans.c:         && is_name( "caninduct", ch->pcdata->bestowments ) )
att:clans.c:   if( IS_NPC( ch ) || !ch->pcdata->council )
att:clans.c:   council = ch->pcdata->council;
att:clans.c:   if( IS_NPC( ch ) || !ch->pcdata->clan )
att:clans.c:   clan = ch->pcdata->clan;
att:clans.c:   if( ( ch->pcdata && ch->pcdata->bestowments
att:clans.c:         && is_name( "canoutcast", ch->pcdata->bestowments ) )
att:clans.c:      if( ch->pcdata->clan->clan_type == CLAN_ORDER )
att:clans.c:      else if( ch->pcdata->clan->clan_type == CLAN_GUILD )
att:clans.c:   if( victim->pcdata->clan != ch->pcdata->clan )
att:clans.c:      if( ch->pcdata->clan->clan_type == CLAN_ORDER )
att:clans.c:      else if( ch->pcdata->clan->clan_type == CLAN_GUILD )
att:clans.c:   if( !str_cmp( victim->name, ch->pcdata->clan->number1 ) )
att:clans.c:      STRFREE( ch->pcdata->clan->number1 );
att:clans.c:      ch->pcdata->clan->number1 = STRALLOC( "" );
att:clans.c:   if( !str_cmp( victim->name, ch->pcdata->clan->number2 ) )
att:clans.c:      STRFREE( ch->pcdata->clan->number2 );
att:clans.c:      ch->pcdata->clan->number2 = STRALLOC( "" );
att:clans.c:   if( !str_cmp( victim->name, ch->pcdata->clan->deity ) )
att:clans.c:      STRFREE( ch->pcdata->clan->deity );
att:clans.c:      ch->pcdata->clan->deity = STRALLOC( "" );
att:clans.c:   if( IS_NPC( ch ) || !ch->pcdata->council )
att:clans.c:   council = ch->pcdata->council;
att:clans.c:   if( victim->pcdata->council != ch->pcdata->council )
att:clans.c:   if( council->head2 && !str_cmp( victim->name, ch->pcdata->council->head2 ) )
att:clans.c:      STRFREE( ch->pcdata->council->head2 );
att:clans.c:      ch->pcdata->council->head2 = NULL;
att:clans.c:   if( IS_NPC( ch ) || !ch->pcdata->clan )
att:clans.c:   if( ch->pcdata->clan->clan_type != CLAN_ORDER && ch->pcdata->clan->clan_type != CLAN_GUILD )
att:clans.c:      snprintf( filename, 256, "%s%s.defeats", CLAN_DIR, ch->pcdata->clan->name );
att:clans.c:      if( !str_cmp( ch->name, ch->pcdata->clan->leader ) && !str_cmp( argument, "clean" ) )
att:clans.c:   if( IS_NPC( ch ) || !ch->pcdata->clan )
att:clans.c:   if( ch->pcdata->clan->clan_type != CLAN_ORDER && ch->pcdata->clan->clan_type != CLAN_GUILD )
att:clans.c:      snprintf( filename, 256, "%s%s.record", CLAN_DIR, ch->pcdata->clan->name );
att:clans.c:      if( !str_cmp( ch->name, ch->pcdata->clan->leader ) && !str_cmp( argument, "clean" ) )
att:clans.c:   if( IS_NPC( ch ) || !IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
att:clans.c:   if( !IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) && IS_SET( victim->pcdata->flags, PCFLAG_DEADLY ) )
att:clans.c:      if( IS_SET( victim->pcdata->flags, PCFLAG_DEADLY ) && IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
att:color.c:      if( IS_NPC( ch ) || !IS_SET( ch->pcdata->flags, PCFLAG_PAGERON ) )
att:comm.c:      log_printf_plus( LOG_COMM, UMAX( sysdata.log_level, ch->level ), "Closing link to %s. (INRoom %d)", ch->pcdata->filename, ( ch->in_room ? ch->in_room->vnum : -1 ) );
att:comm.c:   if( !IS_SET( ch->pcdata->flags, PCFLAG_NOINTRO ) )
att:comm.c:   if( str_cmp( sha256_crypt( argument ), ch->pcdata->pwd ) )
att:comm.c:   if( check_playing( d, ch->pcdata->filename, TRUE ) )
att:comm.c:chk = check_reconnect( d, ch->pcdata->filename, TRUE );
att:comm.c:   mudstrlcpy( buf, ch->pcdata->filename, MAX_STRING_LENGTH );
att:comm.c:   DISPOSE( ch->pcdata->pwd );
att:comm.c:   ch->pcdata->pwd = str_dup( pwdnew );
att:comm.c:   if( str_cmp( sha256_crypt( argument ), ch->pcdata->pwd ) )
att:comm.c:   ch->pcdata->cpose = str_dup( " is here." );
att:comm.c:   ch->pcdata->customclass = str_dup( "Adventurer" );
att:comm.c:   ch->pcdata->str = 4;
att:comm.c:   ch->pcdata->intel = 3;
att:comm.c:   ch->pcdata->dex = 4;
att:comm.c:   ch->pcdata->lck = 2;
att:comm.c:   ch->pcdata->att = 10;
att:comm.c:   ch->pcdata->def = 15;
att:comm.c:   ch->pcdata->mdef = 5;
att:comm.c:   ch->pcdata->matt = 5;
att:comm.c:   ch->pcdata->strplus = 0;
att:comm.c:   ch->pcdata->intplus = 0;
att:comm.c:   ch->pcdata->dexplus = 0;
att:comm.c:   ch->pcdata->lckplus = 0;
att:comm.c:   ch->pcdata->attplus = 0;
att:comm.c:   ch->pcdata->defplus = 0;
att:comm.c:   ch->pcdata->mattplus = 0;
att:comm.c:   ch->pcdata->mdefplus = 0;
att:comm.c:   ch->pcdata->mlevel = 1;
att:comm.c:   ch->pcdata->deflevel = 1;
att:comm.c:   ch->pcdata->attlevel = 1;
att:comm.c:   ch->pcdata->hometown = str_dup( "Kroridge" );
att:comm.c:   ch->pcdata->hometown = str_dup( "O'ran Thalore" );
att:comm.c:   ch->pcdata->hometown = str_dup( "Kimlodar" );
att:comm.c:   ch->pcdata->hometown = str_dup( "Shireton" );
att:comm.c:   ch->pcdata->hometown = str_dup( "BeachCastle" );
att:comm.c:   ch->pcdata->hometown = str_dup( "Calmarnock" );
att:comm.c:   ch->pcdata->hometown = str_dup( "Tarnstead" );
att:comm.c:   ch->pcdata->hometown = str_dup( "Dhubrokh" );
att:comm.c:      SET_BIT( ch->pcdata->flags, PCFLAG_WATCH );
att:comm.c:      REMOVE_BIT( ch->pcdata->flags, PCFLAG_WATCH );
att:comm.c:      ch->pcdata->clan = NULL;
att:comm.c:         ch->pcdata->learned[iLang] = 100;
att:comm.c:                  ch->pcdata->learned[uLang] = 100;
att:comm.c:      ch->pcdata->day = time_info.day;
att:comm.c:      ch->pcdata->month = time_info.month;
att:comm.c:      ch->pcdata->year = time_info.year - 17;
att:comm.c:      ch->pcdata->age = 17;
att:comm.c:      ch->pcdata->age_bonus = 0;
att:comm.c:         ch->pcdata->auth_state = 0;
att:comm.c:         SET_BIT( ch->pcdata->flags, PCFLAG_UNAUTHED );
att:comm.c:   else if( !IS_IMMORTAL( ch ) && ch->pcdata->release_date > 0 && ch->pcdata->release_date > current_time )
att:comm.c:   if( ch->pcdata->pet )
att:comm.c:      act( AT_ACTION, "$n returns to $s master from the Void.", ch->pcdata->pet, NULL, ch, TO_NOTVICT );
att:comm.c:      act( AT_ACTION, "$N returns with you to the realms.", ch, NULL, ch->pcdata->pet, TO_CHAR );
att:comm.c:   if( str_cmp( sha256_crypt( argument ), ch->pcdata->pwd ) )
att:comm.c:      if( !IS_NPC( ch ) && ( !fConn || !ch->desc ) && ch->pcdata->filename && !str_cmp( name, ch->pcdata->filename ) )
att:comm.c:            d->character->pcdata->pwd = str_dup( ch->pcdata->pwd );
att:comm.c:               ch->pcdata->recent_site = STRALLOC( d->host );
att:comm.c:            log_printf_plus( LOG_COMM, sysdata.log_level, "%s already connected.", ch->pcdata->filename );
att:comm.c:            ch->pcdata->recent_site = STRALLOC( d->host );
att:comm.c:                          ch->pcdata->filename, d->host );
att:comm.c:   REMOVE_BIT( ch->pcdata->flags, PCFLAG_IDLE );
att:comm.c:         && ( get_trust(to) < ( ch->pcdata ? ch->pcdata->wizinvis : 0 ) ) ) ) ) )
att:comm.c:   if( !NOT_AUTHED( ch ) || ch->pcdata->auth_state != 2 )
att:comm.c:   STRFREE( ch->pcdata->filename );
att:comm.c:   ch->pcdata->filename = STRALLOC( ucase_argument );
att:comm.c:   ch->pcdata->auth_state = 0;
att:comm.c:   if( !IS_NPC( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_HELPSTART ) )
att:comm.c:   else if( !IS_NPC( ch ) && ch->substate != SUB_NONE && ch->pcdata->subprompt && ch->pcdata->subprompt[0] != '\0' )
att:comm.c:      prompt = ch->pcdata->subprompt;
att:comm.c:   else if( IS_NPC( ch ) || ( !ch->fighting && ( !ch->pcdata->prompt || !*ch->pcdata->prompt ) ) )
att:comm.c:      if( !ch->pcdata->fprompt || !*ch->pcdata->fprompt )
att:comm.c:         prompt = ch->pcdata->fprompt;
att:comm.c:      prompt = ch->pcdata->prompt;
att:comm.c:                     pstat = ch->pcdata->condition[COND_BLOODTHIRST];
att:comm.c:                     if( IS_SET( ch->pcdata->flags, PCFLAG_DND ) )
att:comm.c:                               ( IS_NPC( ch ) ? ch->mobinvis : ch->pcdata->wizinvis ) );
att:comm.c:                            : ( xIS_SET( ch->act, PLR_WIZINVIS ) ? ch->pcdata->wizinvis : 0 ) );
att:comm.c:   pclines = UMAX( ch->pcdata->pagerlen, 5 ) - 1;
att:comm.c.backup:      log_printf_plus( LOG_COMM, UMAX( sysdata.log_level, ch->level ), "Closing link to %s. (INRoom %d)", ch->pcdata->filename, ( ch->in_room ? ch->in_room->vnum : -1 ) );
att:comm.c.backup:   if( !IS_SET( ch->pcdata->flags, PCFLAG_NOINTRO ) )
att:comm.c.backup:   if( str_cmp( sha256_crypt( argument ), ch->pcdata->pwd ) )
att:comm.c.backup:   if( check_playing( d, ch->pcdata->filename, TRUE ) )
att:comm.c.backup:chk = check_reconnect( d, ch->pcdata->filename, TRUE );
att:comm.c.backup:   mudstrlcpy( buf, ch->pcdata->filename, MAX_STRING_LENGTH );
att:comm.c.backup:   DISPOSE( ch->pcdata->pwd );
att:comm.c.backup:   ch->pcdata->pwd = str_dup( pwdnew );
att:comm.c.backup:   if( str_cmp( sha256_crypt( argument ), ch->pcdata->pwd ) )
att:comm.c.backup:   ch->pcdata->customclass = str_dup( "Adventurer" );
att:comm.c.backup:      SET_BIT( ch->pcdata->flags, PCFLAG_WATCH );
att:comm.c.backup:      REMOVE_BIT( ch->pcdata->flags, PCFLAG_WATCH );
att:comm.c.backup:      ch->pcdata->clan = NULL;
att:comm.c.backup:         ch->pcdata->learned[iLang] = 100;
att:comm.c.backup:                  ch->pcdata->learned[uLang] = 100;
att:comm.c.backup:      ch->pcdata->day = time_info.day;
att:comm.c.backup:      ch->pcdata->month = time_info.month;
att:comm.c.backup:      ch->pcdata->year = time_info.year - 17;
att:comm.c.backup:      ch->pcdata->age = 17;
att:comm.c.backup:      ch->pcdata->age_bonus = 0;
att:comm.c.backup:         ch->pcdata->auth_state = 0;
att:comm.c.backup:         SET_BIT( ch->pcdata->flags, PCFLAG_UNAUTHED );
att:comm.c.backup:   else if( !IS_IMMORTAL( ch ) && ch->pcdata->release_date > 0 && ch->pcdata->release_date > current_time )
att:comm.c.backup:   if( ch->pcdata->pet )
att:comm.c.backup:      act( AT_ACTION, "$n returns to $s master from the Void.", ch->pcdata->pet, NULL, ch, TO_NOTVICT );
att:comm.c.backup:      act( AT_ACTION, "$N returns with you to the realms.", ch, NULL, ch->pcdata->pet, TO_CHAR );
att:comm.c.backup:   if( str_cmp( sha256_crypt( argument ), ch->pcdata->pwd ) )
att:comm.c.backup:      if( !IS_NPC( ch ) && ( !fConn || !ch->desc ) && ch->pcdata->filename && !str_cmp( name, ch->pcdata->filename ) )
att:comm.c.backup:            d->character->pcdata->pwd = str_dup( ch->pcdata->pwd );
att:comm.c.backup:               ch->pcdata->recent_site = STRALLOC( d->host );
att:comm.c.backup:            log_printf_plus( LOG_COMM, sysdata.log_level, "%s already connected.", ch->pcdata->filename );
att:comm.c.backup:            ch->pcdata->recent_site = STRALLOC( d->host );
att:comm.c.backup:                          ch->pcdata->filename, d->host );
att:comm.c.backup:   REMOVE_BIT( ch->pcdata->flags, PCFLAG_IDLE );
att:comm.c.backup:         && ( get_trust(to) < ( ch->pcdata ? ch->pcdata->wizinvis : 0 ) ) ) ) ) )
att:comm.c.backup:   if( !NOT_AUTHED( ch ) || ch->pcdata->auth_state != 2 )
att:comm.c.backup:   STRFREE( ch->pcdata->filename );
att:comm.c.backup:   ch->pcdata->filename = STRALLOC( ucase_argument );
att:comm.c.backup:   ch->pcdata->auth_state = 0;
att:comm.c.backup:   if( !IS_NPC( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_HELPSTART ) )
att:comm.c.backup:   else if( !IS_NPC( ch ) && ch->substate != SUB_NONE && ch->pcdata->subprompt && ch->pcdata->subprompt[0] != '\0' )
att:comm.c.backup:      prompt = ch->pcdata->subprompt;
att:comm.c.backup:   else if( IS_NPC( ch ) || ( !ch->fighting && ( !ch->pcdata->prompt || !*ch->pcdata->prompt ) ) )
att:comm.c.backup:      if( !ch->pcdata->fprompt || !*ch->pcdata->fprompt )
att:comm.c.backup:         prompt = ch->pcdata->fprompt;
att:comm.c.backup:      prompt = ch->pcdata->prompt;
att:comm.c.backup:                     pstat = ch->pcdata->condition[COND_BLOODTHIRST];
att:comm.c.backup:                     if( IS_SET( ch->pcdata->flags, PCFLAG_DND ) )
att:comm.c.backup:                               ( IS_NPC( ch ) ? ch->mobinvis : ch->pcdata->wizinvis ) );
att:comm.c.backup:                            : ( xIS_SET( ch->act, PLR_WIZINVIS ) ? ch->pcdata->wizinvis : 0 ) );
att:comm.c.backup:   pclines = UMAX( ch->pcdata->pagerlen, 5 ) - 1;
att:comm.c.bak:      log_printf_plus( LOG_COMM, UMAX( sysdata.log_level, ch->level ), "Closing link to %s. (INRoom %d)", ch->pcdata->filename, ( ch->in_room ? ch->in_room->vnum : -1 ) );
att:comm.c.bak:   if( !IS_SET( ch->pcdata->flags, PCFLAG_NOINTRO ) )
att:comm.c.bak:   if( str_cmp( sha256_crypt( argument ), ch->pcdata->pwd ) )
att:comm.c.bak:   if( check_playing( d, ch->pcdata->filename, TRUE ) )
att:comm.c.bak:chk = check_reconnect( d, ch->pcdata->filename, TRUE );
att:comm.c.bak:   mudstrlcpy( buf, ch->pcdata->filename, MAX_STRING_LENGTH );
att:comm.c.bak:   DISPOSE( ch->pcdata->pwd );
att:comm.c.bak:   ch->pcdata->pwd = str_dup( pwdnew );
att:comm.c.bak:   if( str_cmp( sha256_crypt( argument ), ch->pcdata->pwd ) )
att:comm.c.bak:   ch->pcdata->customclass = str_dup( "Adventurer" );
att:comm.c.bak:      SET_BIT( ch->pcdata->flags, PCFLAG_WATCH );
att:comm.c.bak:      REMOVE_BIT( ch->pcdata->flags, PCFLAG_WATCH );
att:comm.c.bak:      ch->pcdata->clan = NULL;
att:comm.c.bak:         ch->pcdata->learned[iLang] = 100;
att:comm.c.bak:                  ch->pcdata->learned[uLang] = 100;
att:comm.c.bak:      ch->pcdata->day = time_info.day;
att:comm.c.bak:      ch->pcdata->month = time_info.month;
att:comm.c.bak:      ch->pcdata->year = time_info.year - 17;
att:comm.c.bak:      ch->pcdata->age = 17;
att:comm.c.bak:      ch->pcdata->age_bonus = 0;
att:comm.c.bak:         ch->pcdata->auth_state = 0;
att:comm.c.bak:         SET_BIT( ch->pcdata->flags, PCFLAG_UNAUTHED );
att:comm.c.bak:   else if( !IS_IMMORTAL( ch ) && ch->pcdata->release_date > 0 && ch->pcdata->release_date > current_time )
att:comm.c.bak:   if( ch->pcdata->pet )
att:comm.c.bak:      act( AT_ACTION, "$n returns to $s master from the Void.", ch->pcdata->pet, NULL, ch, TO_NOTVICT );
att:comm.c.bak:      act( AT_ACTION, "$N returns with you to the realms.", ch, NULL, ch->pcdata->pet, TO_CHAR );
att:comm.c.bak:   if( str_cmp( sha256_crypt( argument ), ch->pcdata->pwd ) )
att:comm.c.bak:      if( !IS_NPC( ch ) && ( !fConn || !ch->desc ) && ch->pcdata->filename && !str_cmp( name, ch->pcdata->filename ) )
att:comm.c.bak:            d->character->pcdata->pwd = str_dup( ch->pcdata->pwd );
att:comm.c.bak:               ch->pcdata->recent_site = STRALLOC( d->host );
att:comm.c.bak:            log_printf_plus( LOG_COMM, sysdata.log_level, "%s already connected.", ch->pcdata->filename );
att:comm.c.bak:            ch->pcdata->recent_site = STRALLOC( d->host );
att:comm.c.bak:                          ch->pcdata->filename, d->host );
att:comm.c.bak:   REMOVE_BIT( ch->pcdata->flags, PCFLAG_IDLE );
att:comm.c.bak:         && ( get_trust(to) < ( ch->pcdata ? ch->pcdata->wizinvis : 0 ) ) ) ) ) )
att:comm.c.bak:   if( !NOT_AUTHED( ch ) || ch->pcdata->auth_state != 2 )
att:comm.c.bak:   STRFREE( ch->pcdata->filename );
att:comm.c.bak:   ch->pcdata->filename = STRALLOC( ucase_argument );
att:comm.c.bak:   ch->pcdata->auth_state = 0;
att:comm.c.bak:   if( !IS_NPC( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_HELPSTART ) )
att:comm.c.bak:   else if( !IS_NPC( ch ) && ch->substate != SUB_NONE && ch->pcdata->subprompt && ch->pcdata->subprompt[0] != '\0' )
att:comm.c.bak:      prompt = ch->pcdata->subprompt;
att:comm.c.bak:   else if( IS_NPC( ch ) || ( !ch->fighting && ( !ch->pcdata->prompt || !*ch->pcdata->prompt ) ) )
att:comm.c.bak:      if( !ch->pcdata->fprompt || !*ch->pcdata->fprompt )
att:comm.c.bak:         prompt = ch->pcdata->fprompt;
att:comm.c.bak:      prompt = ch->pcdata->prompt;
att:comm.c.bak:                     pstat = ch->pcdata->condition[COND_BLOODTHIRST];
att:comm.c.bak:                     if( IS_SET( ch->pcdata->flags, PCFLAG_DND ) )
att:comm.c.bak:                               ( IS_NPC( ch ) ? ch->mobinvis : ch->pcdata->wizinvis ) );
att:comm.c.bak:                            : ( xIS_SET( ch->act, PLR_WIZINVIS ) ? ch->pcdata->wizinvis : 0 ) );
att:comm.c.bak:   pclines = UMAX( ch->pcdata->pagerlen, 5 ) - 1;
att:db.c:      if( ch->pcdata->pet )
att:db.c:         extract_char( ch->pcdata->pet, TRUE );
att:db.c:         ch->pcdata->pet = NULL;
att:db.c:      for( temp = ch->pcdata->first_ignored; temp; temp = next )
att:db.c:         UNLINK( temp, ch->pcdata->first_ignored, ch->pcdata->last_ignored, next, prev );
att:db.c:      STRFREE( ch->pcdata->filename );
att:db.c:      STRFREE( ch->pcdata->deity_name );
att:db.c:      STRFREE( ch->pcdata->clan_name );
att:db.c:      STRFREE( ch->pcdata->council_name );
att:db.c:      if( ch->pcdata->recent_site )
att:db.c:         STRFREE( ch->pcdata->recent_site );
att:db.c:      if( ch->pcdata->prev_site )
att:db.c:         STRFREE( ch->pcdata->prev_site );
att:db.c:      DISPOSE( ch->pcdata->pwd );   /* no hash */
att:db.c:      DISPOSE( ch->pcdata->bamfin );   /* no hash */
att:db.c:      DISPOSE( ch->pcdata->bamfout );  /* no hash */
att:db.c:      DISPOSE( ch->pcdata->rank );
att:db.c:      STRFREE( ch->pcdata->title );
att:db.c:      STRFREE( ch->pcdata->bio );
att:db.c:      DISPOSE( ch->pcdata->bestowments ); /* no hash */
att:db.c:      DISPOSE( ch->pcdata->homepage ); /* no hash */
att:db.c:      STRFREE( ch->pcdata->authed_by );
att:db.c:      STRFREE( ch->pcdata->prompt );
att:db.c:      STRFREE( ch->pcdata->fprompt );
att:db.c:      if( ch->pcdata->helled_by )
att:db.c:         STRFREE( ch->pcdata->helled_by );
att:db.c:      if( ch->pcdata->subprompt )
att:db.c:         STRFREE( ch->pcdata->subprompt );
att:db.c:      if( ch->pcdata->tell_history )
att:db.c:            if( ch->pcdata->tell_history[i] )
att:db.c:               STRFREE( ch->pcdata->tell_history[i] );
att:db.c:         DISPOSE( ch->pcdata->tell_history );
att:deity.c:            if( vch->pcdata->deity == deity )
att:deity.c:               snprintf( buf, MAX_STRING_LENGTH, "&R\r\nYour deity, %s, has met its demise!\r\n", vch->pcdata->deity_name );
att:deity.c:               xREMOVE_BITS( vch->affected_by, vch->pcdata->deity->affected );
att:deity.c:               REMOVE_BIT( vch->resistant, vch->pcdata->deity->element );
att:deity.c:               REMOVE_BIT( vch->susceptible, vch->pcdata->deity->suscept );
att:deity.c:               vch->pcdata->deity = NULL;
att:deity.c:               STRFREE( vch->pcdata->deity_name );
att:deity.c:               vch->pcdata->deity_name = STRALLOC( "" );
att:deity.c:      if( !ch->pcdata->deity )
att:deity.c:      --ch->pcdata->deity->worshippers;
att:deity.c:      if( ch->pcdata->deity->worshippers < 0 )
att:deity.c:         ch->pcdata->deity->worshippers = 0;
att:deity.c:      ch->pcdata->favor = -2500;
att:deity.c:      xREMOVE_BITS( ch->affected_by, ch->pcdata->deity->affected );
att:deity.c:      REMOVE_BIT( ch->resistant, ch->pcdata->deity->element );
att:deity.c:      REMOVE_BIT( ch->susceptible, ch->pcdata->deity->suscept );
att:deity.c:      save_deity( ch->pcdata->deity );
att:deity.c:      ch->pcdata->deity = NULL;
att:deity.c:      STRFREE( ch->pcdata->deity_name );
att:deity.c:      ch->pcdata->deity_name = STRALLOC( "" );
att:deity.c:   if( ch->pcdata->deity )
att:deity.c:   STRFREE( ch->pcdata->deity_name );
att:deity.c:   ch->pcdata->deity_name = QUICKLINK( deity->name );
att:deity.c:   ch->pcdata->deity = deity;
att:deity.c:   if( ch->pcdata->favor > deity->affectednum )
att:deity.c:      xSET_BITS( ch->affected_by, ch->pcdata->deity->affected );
att:deity.c:   if( ch->pcdata->favor > deity->elementnum )
att:deity.c:      SET_BIT( ch->resistant, ch->pcdata->deity->element );
att:deity.c:   if( ch->pcdata->favor < deity->susceptnum )
att:deity.c:      SET_BIT( ch->susceptible, ch->pcdata->deity->suscept );
att:deity.c:   act( AT_MAGIC, "Body and soul, you devote yourself to $t!", ch, ch->pcdata->deity_name, NULL, TO_CHAR );
att:deity.c:   ++ch->pcdata->deity->worshippers;
att:deity.c:   save_deity( ch->pcdata->deity );
att:deity.c:   if( IS_NPC( ch ) || !ch->pcdata->deity )
att:deity.c:   oldfavor = ch->pcdata->favor;
att:deity.c:      if( ch->pcdata->favor < ch->pcdata->deity->scorpse )
att:deity.c:                  ch->pcdata->favor -= ch->pcdata->deity->scorpse;
att:deity.c:      ch->pcdata->favor -= ch->pcdata->deity->scorpse;
att:deity.c:      if( ch->pcdata->favor < ch->pcdata->deity->susceptnum )
att:deity.c:         SET_BIT( ch->susceptible, ch->pcdata->deity->suscept );
att:deity.c:      if( ( oldfavor > ch->pcdata->deity->affectednum &&
att:deity.c:            ch->pcdata->favor <= ch->pcdata->deity->affectednum ) ||
att:deity.c:          ( oldfavor > ch->pcdata->deity->elementnum &&
att:deity.c:            ch->pcdata->favor <= ch->pcdata->deity->elementnum ) ||
att:deity.c:          ( oldfavor < ch->pcdata->deity->susceptnum && ch->pcdata->favor >= ch->pcdata->deity->susceptnum ) )
att:deity.c:      if( ch->pcdata->favor < ch->pcdata->deity->savatar )
att:deity.c:      snprintf( buf, MAX_STRING_LENGTH, victim->short_descr, ch->pcdata->deity->name );
att:deity.c:      snprintf( buf, MAX_STRING_LENGTH, victim->long_descr, ch->pcdata->deity->name );
att:deity.c:      snprintf( buf, MAX_STRING_LENGTH, victim->description, ch->pcdata->deity->name );
att:deity.c:      victim->hit = ch->hit * 6 + ch->pcdata->favor;
att:deity.c:      victim->alignment = ch->pcdata->deity->alignment;
att:deity.c:      victim->max_hit = ch->hit * 6 + ch->pcdata->favor;
att:deity.c:      ch->pcdata->favor -= ch->pcdata->deity->savatar;
att:deity.c:      if( ch->pcdata->favor < ch->pcdata->deity->susceptnum )
att:deity.c:         SET_BIT( ch->susceptible, ch->pcdata->deity->suscept );
att:deity.c:      if( ( oldfavor > ch->pcdata->deity->affectednum &&
att:deity.c:            ch->pcdata->favor <= ch->pcdata->deity->affectednum ) ||
att:deity.c:          ( oldfavor > ch->pcdata->deity->elementnum &&
att:deity.c:            ch->pcdata->favor <= ch->pcdata->deity->elementnum ) ||
att:deity.c:          ( oldfavor < ch->pcdata->deity->susceptnum && ch->pcdata->favor >= ch->pcdata->deity->susceptnum ) )
att:deity.c:      if( ch->pcdata->favor < ch->pcdata->deity->sdeityobj )
att:deity.c:      snprintf( buf, MAX_STRING_LENGTH, "sigil %s", ch->pcdata->deity->name );
att:deity.c:      snprintf( buf, MAX_STRING_LENGTH, obj->short_descr, ch->pcdata->deity->name );
att:deity.c:      snprintf( buf, MAX_STRING_LENGTH, obj->description, ch->pcdata->deity->name );
att:deity.c:      ch->pcdata->favor -= ch->pcdata->deity->sdeityobj;
att:deity.c:      if( ch->pcdata->favor < ch->pcdata->deity->susceptnum )
att:deity.c:         SET_BIT( ch->susceptible, ch->pcdata->deity->suscept );
att:deity.c:      if( ( oldfavor > ch->pcdata->deity->affectednum &&
att:deity.c:            ch->pcdata->favor <= ch->pcdata->deity->affectednum ) ||
att:deity.c:          ( oldfavor > ch->pcdata->deity->elementnum &&
att:deity.c:            ch->pcdata->favor <= ch->pcdata->deity->elementnum ) ||
att:deity.c:          ( oldfavor < ch->pcdata->deity->susceptnum && ch->pcdata->favor >= ch->pcdata->deity->susceptnum ) )
att:deity.c:      switch ( ch->pcdata->deity->objstat )
att:deity.c:      if( ch->pcdata->favor < ch->pcdata->deity->srecall )
att:deity.c:      if( !IS_NPC( ch ) && ch->pcdata->clan )
att:deity.c:         location = get_room_index( ch->pcdata->clan->recall );
att:deity.c:      if( !IS_NPC( ch ) && !location && ch->level >= 5 && IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
att:deity.c:      ch->pcdata->favor -= ch->pcdata->deity->srecall;
att:deity.c:      if( ch->pcdata->favor < ch->pcdata->deity->susceptnum )
att:deity.c:         SET_BIT( ch->susceptible, ch->pcdata->deity->suscept );
att:deity.c:      if( ( oldfavor > ch->pcdata->deity->affectednum &&
att:deity.c:            ch->pcdata->favor <= ch->pcdata->deity->affectednum ) ||
att:deity.c:          ( oldfavor > ch->pcdata->deity->elementnum &&
att:deity.c:            ch->pcdata->favor <= ch->pcdata->deity->elementnum ) ||
att:deity.c:          ( oldfavor < ch->pcdata->deity->susceptnum && ch->pcdata->favor >= ch->pcdata->deity->susceptnum ) )
att:deity.c:   if( IS_NPC( ch ) || !ch->pcdata->deity )
att:deity.c:   oldfavor = ch->pcdata->favor;
att:deity.c:   if( ( ch->alignment - ch->pcdata->deity->alignment > 650
att:deity.c:         || ch->alignment - ch->pcdata->deity->alignment < -650 ) && ch->pcdata->deity->alignment != 0 )
att:deity.c:      ch->pcdata->favor -= 2;
att:deity.c:      ch->pcdata->favor = URANGE( -2500, ch->pcdata->favor, 2500 );
att:deity.c:      if( ch->pcdata->favor > ch->pcdata->deity->affectednum )
att:deity.c:         xSET_BITS( ch->affected_by, ch->pcdata->deity->affected );
att:deity.c:      if( ch->pcdata->favor > ch->pcdata->deity->elementnum )
att:deity.c:         SET_BIT( ch->resistant, ch->pcdata->deity->element );
att:deity.c:      if( ch->pcdata->favor < ch->pcdata->deity->susceptnum )
att:deity.c:         SET_BIT( ch->susceptible, ch->pcdata->deity->suscept );
att:deity.c:      if( ( oldfavor > ch->pcdata->deity->affectednum &&
att:deity.c:            ch->pcdata->favor <= ch->pcdata->deity->affectednum ) ||
att:deity.c:          ( oldfavor > ch->pcdata->deity->elementnum &&
att:deity.c:            ch->pcdata->favor <= ch->pcdata->deity->elementnum ) ||
att:deity.c:          ( oldfavor < ch->pcdata->deity->susceptnum && ch->pcdata->favor >= ch->pcdata->deity->susceptnum ) )
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->flee / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->flee_npcrace / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->kill / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->kill_npcrace / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->kill_magic / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->sac / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->bury_corpse / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->aid_spell / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->aid / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->steal / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->backstab / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->die / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->die_npcrace / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->spell_aid / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->dig_corpse / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->die_npcfoe / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->flee_npcfoe / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->kill_npcfoe / mod );
att:deity.c:   ch->pcdata->favor = URANGE( -2500, ch->pcdata->favor, 2500 );
att:deity.c:   if( ch->pcdata->favor > ch->pcdata->deity->affectednum )
att:deity.c:      xSET_BITS( ch->affected_by, ch->pcdata->deity->affected );
att:deity.c:   if( ch->pcdata->favor > ch->pcdata->deity->elementnum )
att:deity.c:      SET_BIT( ch->resistant, ch->pcdata->deity->element );
att:deity.c:   if( ch->pcdata->favor < ch->pcdata->deity->susceptnum )
att:deity.c:      SET_BIT( ch->susceptible, ch->pcdata->deity->suscept );
att:deity.c:   if( ( oldfavor > ch->pcdata->deity->affectednum &&
att:deity.c:         ch->pcdata->favor <= ch->pcdata->deity->affectednum ) ||
att:deity.c:       ( oldfavor > ch->pcdata->deity->elementnum &&
att:deity.c:         ch->pcdata->favor <= ch->pcdata->deity->elementnum ) ||
att:deity.c:       ( oldfavor < ch->pcdata->deity->susceptnum && ch->pcdata->favor >= ch->pcdata->deity->susceptnum ) )
att:fight.c:               DISPOSE( ch->pcdata->nuisance );
att:fight.c:       * ( 1 + abs( ch->alignment - ch->pcdata->clan->alignment ) );
att:fight.c:         bonus -= ch->pcdata->favor / -400;
att:fight.c:   if( !IS_NPC( ch ) && ch->pcdata->learned[gsn_enhanced_damage] > 0 )
att:fight.c:   victim_ac = ((((ch->pcdata->def + ch->pcdata->defplus) * ch->pcdata->deflevel) /15 ) * -1);
att:fight.c:   if( !IS_NPC( ch ) && ch->pcdata->learned[gsn_enhanced_damage] > 0 )
att:fight.c:	dam = ((dam + ch->pcdata->str + ch->pcdata->att) * ch->pcdata->attlevel) * ((ch->pcdata->dex/100) +1);
att:fight.c:         if( !IS_NPC( ch ) && !IS_IMMORTAL( ch ) && ch->pcdata->clan
att:fight.c:             && ch->pcdata->clan->clan_type != CLAN_ORDER && ch->pcdata->clan->clan_type != CLAN_GUILD && victim != ch )
att:fight.c:            snprintf( filename, 256, "%s%s.record", CLAN_DIR, ch->pcdata->clan->name );
att:fight.c:            if( victim->pcdata && victim->pcdata->clan && victim->pcdata->clan->name == ch->pcdata->clan->name )
att:fight.c:                     ch->pcdata->clan ? ch->pcdata->clan->badge :
att:fight.c:            if( ch->pcdata && ch->pcdata->clan && ch->pcdata->clan->name == victim->pcdata->clan->name )
att:fight.c:      if( !IS_NPC( ch ) && ch->pcdata->clan )
att:fight.c:       && IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) && IS_SET( victim->pcdata->flags, PCFLAG_DEADLY ) )
att:fight.c:         if( ch->pcdata->clan )
att:fight.c:            ch->pcdata->clan->mkills++;
att:fight.c:         ch->pcdata->mkills++;
att:fight.c:         if( ch->pcdata->deity )
att:fight.c:            if( victim->race == ch->pcdata->deity->npcrace )
att:fight.c:            else if( victim->race == ch->pcdata->deity->npcfoe )
att:fight.c:         ch->pcdata->pkills++;
att:fight.c:         if( ch->pcdata->clan )
att:fight.c:               ch->pcdata->clan->pkills[0]++;
att:fight.c:               ch->pcdata->clan->pkills[1]++;
att:fight.c:               ch->pcdata->clan->pkills[2]++;
att:fight.c:               ch->pcdata->clan->pkills[3]++;
att:fight.c:               ch->pcdata->clan->pkills[4]++;
att:fight.c:               ch->pcdata->clan->pkills[5]++;
att:fight.c:               ch->pcdata->clan->pkills[6]++;
att:fight.c:         ch->pcdata->pkills++;
att:fight.c:       && IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) && IS_SET( victim->pcdata->flags, PCFLAG_DEADLY ) )
att:fight.c:      if( !ch->pcdata->clan
att:fight.c:          || ( ch->pcdata->clan->clan_type != CLAN_NOKILL
att:fight.c:               && victim->pcdata->clan->clan_type != CLAN_NOKILL && ch->pcdata->clan != victim->pcdata->clan ) )
att:fight.c:         if( ch->pcdata->clan )
att:fight.c:               ch->pcdata->clan->pkills[0]++;
att:fight.c:               ch->pcdata->clan->pkills[1]++;
att:fight.c:               ch->pcdata->clan->pkills[2]++;
att:fight.c:               ch->pcdata->clan->pkills[3]++;
att:fight.c:               ch->pcdata->clan->pkills[4]++;
att:fight.c:               ch->pcdata->clan->pkills[5]++;
att:fight.c:               ch->pcdata->clan->pkills[6]++;
att:fight.c:         ch->pcdata->pkills++;
att:fight.c:            ch->pcdata->condition[COND_BLOODTHIRST] = ( 10 + ch->level );
att:fight.c:            if( ch->race == victim->pcdata->deity->npcrace )
att:fight.c:            else if( ch->race == victim->pcdata->deity->npcfoe )
att:fight.c:      if( ch->pcdata->clan )
att:fight.c:         ch->pcdata->clan->illegal_pk++;
att:fight.c:      ch->pcdata->illegal_pk++;
att:fight.c:    { if ( !(ch->pcdata->clan && victim->pcdata->clan
att:fight.c:      && ch->pcdata->clan == victim->pcdata->clan ) )  return; }
att:fight.c:        ch->pcdata->ap += (victim->level * get_curr_lck(ch));
att:fight.c:   if( dam == 0 && ( !IS_NPC( ch ) && ( IS_SET( ch->pcdata->flags, PCFLAG_GAG ) ) ) )
att:fight.c:            || !IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
att:fight.c:         if( wf && ch->pcdata->deity )
att:fight.c:            if( wf && wf->race == ch->pcdata->deity->npcrace )
att:fight.c:            else if( wf && wf->race == ch->pcdata->deity->npcfoe )
att:fight.c.backup:               DISPOSE( ch->pcdata->nuisance );
att:fight.c.backup:       * ( 1 + abs( ch->alignment - ch->pcdata->clan->alignment ) );
att:fight.c.backup:         bonus -= ch->pcdata->favor / -400;
att:fight.c.backup:   if( !IS_NPC( ch ) && ch->pcdata->learned[gsn_enhanced_damage] > 0 )
att:fight.c.backup:   victim_ac = ((((ch->pcdata->def + ch->pcdata->defplus) * ch->pcdata->deflevel) /15 ) * -1);
att:fight.c.backup:   if( !IS_NPC( ch ) && ch->pcdata->learned[gsn_enhanced_damage] > 0 )
att:fight.c.backup:	dam = (dam + ch->pcdata->str + ch->pcdata->att + ch->pcdata->attplus) * ch->pcdata->attlevel;
att:fight.c.backup:         if( !IS_NPC( ch ) && !IS_IMMORTAL( ch ) && ch->pcdata->clan
att:fight.c.backup:             && ch->pcdata->clan->clan_type != CLAN_ORDER && ch->pcdata->clan->clan_type != CLAN_GUILD && victim != ch )
att:fight.c.backup:            snprintf( filename, 256, "%s%s.record", CLAN_DIR, ch->pcdata->clan->name );
att:fight.c.backup:            if( victim->pcdata && victim->pcdata->clan && victim->pcdata->clan->name == ch->pcdata->clan->name )
att:fight.c.backup:                     ch->pcdata->clan ? ch->pcdata->clan->badge :
att:fight.c.backup:            if( ch->pcdata && ch->pcdata->clan && ch->pcdata->clan->name == victim->pcdata->clan->name )
att:fight.c.backup:      if( !IS_NPC( ch ) && ch->pcdata->clan )
att:fight.c.backup:       && IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) && IS_SET( victim->pcdata->flags, PCFLAG_DEADLY ) )
att:fight.c.backup:         if( ch->pcdata->clan )
att:fight.c.backup:            ch->pcdata->clan->mkills++;
att:fight.c.backup:         ch->pcdata->mkills++;
att:fight.c.backup:         if( ch->pcdata->deity )
att:fight.c.backup:            if( victim->race == ch->pcdata->deity->npcrace )
att:fight.c.backup:            else if( victim->race == ch->pcdata->deity->npcfoe )
att:fight.c.backup:         ch->pcdata->pkills++;
att:fight.c.backup:         if( ch->pcdata->clan )
att:fight.c.backup:               ch->pcdata->clan->pkills[0]++;
att:fight.c.backup:               ch->pcdata->clan->pkills[1]++;
att:fight.c.backup:               ch->pcdata->clan->pkills[2]++;
att:fight.c.backup:               ch->pcdata->clan->pkills[3]++;
att:fight.c.backup:               ch->pcdata->clan->pkills[4]++;
att:fight.c.backup:               ch->pcdata->clan->pkills[5]++;
att:fight.c.backup:               ch->pcdata->clan->pkills[6]++;
att:fight.c.backup:         ch->pcdata->pkills++;
att:fight.c.backup:       && IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) && IS_SET( victim->pcdata->flags, PCFLAG_DEADLY ) )
att:fight.c.backup:      if( !ch->pcdata->clan
att:fight.c.backup:          || ( ch->pcdata->clan->clan_type != CLAN_NOKILL
att:fight.c.backup:               && victim->pcdata->clan->clan_type != CLAN_NOKILL && ch->pcdata->clan != victim->pcdata->clan ) )
att:fight.c.backup:         if( ch->pcdata->clan )
att:fight.c.backup:               ch->pcdata->clan->pkills[0]++;
att:fight.c.backup:               ch->pcdata->clan->pkills[1]++;
att:fight.c.backup:               ch->pcdata->clan->pkills[2]++;
att:fight.c.backup:               ch->pcdata->clan->pkills[3]++;
att:fight.c.backup:               ch->pcdata->clan->pkills[4]++;
att:fight.c.backup:               ch->pcdata->clan->pkills[5]++;
att:fight.c.backup:               ch->pcdata->clan->pkills[6]++;
att:fight.c.backup:         ch->pcdata->pkills++;
att:fight.c.backup:            ch->pcdata->condition[COND_BLOODTHIRST] = ( 10 + ch->level );
att:fight.c.backup:            if( ch->race == victim->pcdata->deity->npcrace )
att:fight.c.backup:            else if( ch->race == victim->pcdata->deity->npcfoe )
att:fight.c.backup:      if( ch->pcdata->clan )
att:fight.c.backup:         ch->pcdata->clan->illegal_pk++;
att:fight.c.backup:      ch->pcdata->illegal_pk++;
att:fight.c.backup:    { if ( !(ch->pcdata->clan && victim->pcdata->clan
att:fight.c.backup:      && ch->pcdata->clan == victim->pcdata->clan ) )  return; }
att:fight.c.backup:        ch->pcdata->ap += (victim->level * get_curr_lck(ch));
att:fight.c.backup:   if( dam == 0 && ( !IS_NPC( ch ) && ( IS_SET( ch->pcdata->flags, PCFLAG_GAG ) ) ) )
att:fight.c.backup:            || !IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
att:fight.c.backup:         if( wf && ch->pcdata->deity )
att:fight.c.backup:            if( wf && wf->race == ch->pcdata->deity->npcrace )
att:fight.c.backup:            else if( wf && wf->race == ch->pcdata->deity->npcfoe )
att:handler.c:   ch_days = ( ch->pcdata->month + 1 ) * sysdata.dayspermonth;
att:handler.c:   ch_days += ch->pcdata->day;
att:handler.c:   age = time_info.year - ch->pcdata->year;
att:handler.c:         ch->pcdata->learned[sn] += mod;
att:handler.c:         ch->pcdata->learned[sn] = URANGE( 0, ch->pcdata->learned[sn] + mod, GET_ADEPT( ch, sn ) );
att:handler.c:            ch->pcdata->condition[COND_FULL] = URANGE( 0, ch->pcdata->condition[COND_FULL] + mod, 48 );
att:handler.c:            ch->pcdata->condition[COND_THIRST] = URANGE( 0, ch->pcdata->condition[COND_THIRST] + mod, 48 );
att:handler.c:            ch->pcdata->condition[COND_DRUNK] = URANGE( 0, ch->pcdata->condition[COND_DRUNK] + mod, 48 );
att:handler.c:            ch->pcdata->condition[COND_BLOODTHIRST] =
att:handler.c:               URANGE( 0, ch->pcdata->condition[COND_BLOODTHIRST] + mod, ch->level + 10 );
att:handler.c:   if( ch->pcdata->deity )
att:handler.c:      if( ch->pcdata->favor > ch->pcdata->deity->affectednum )
att:handler.c:         xSET_BITS( ch->affected_by, ch->pcdata->deity->affected );
att:handler.c:      if( ch->pcdata->favor > ch->pcdata->deity->elementnum )
att:handler.c:         SET_BIT( ch->resistant, ch->pcdata->deity->element );
att:handler.c:      if( ch->pcdata->favor < ch->pcdata->deity->susceptnum )
att:handler.c:         SET_BIT( ch->susceptible, ch->pcdata->deity->suscept );
att:handler.c:         if( wch->pcdata && wch->pcdata->pet == ch )
att:handler.c:            wch->pcdata->pet = NULL;
att:handler.c:      if( !IS_NPC( ch ) && ch->pcdata->clan )
att:handler.c:         location = get_room_index( ch->pcdata->clan->recall );
att:handler.c:   int drunk = IS_NPC( ch ) ? 0 : ch->pcdata->condition[COND_DRUNK];
att:handler.c:          && IS_SET( rch->pcdata->flags, PCFLAG_DND ) && get_trust( ch ) < get_trust( rch ) && can_see( ch, rch ) )
att:handler.c:      if( ch->pcdata->council && !str_cmp( ch->pcdata->council->name, "Newbie Council" ) )
att:handler.c:    clan_factor = 1 + abs( ch->alignment - ch->pcdata->clan->alignment ) / 1000; 
att:handler.c:      deity_factor = ch->pcdata->favor / -500;
att:handler.c:      deity_factor = ch->pcdata->favor / -500;
att:handler.c:   if( !IS_NPC( ch ) && ch->pcdata->nuisance && ch->pcdata->nuisance->flags > 2 )
att:handler.c:      c += ( int )( .4 * ( ( ch->pcdata->nuisance->flags - 2 ) * ch->pcdata->nuisance->power ) );
att:handler.c:      if( ch->pcdata->killed[x].vnum == vnum )
att:handler.c:         if( ch->pcdata->killed[x].count < 50 )
att:handler.c:            ++ch->pcdata->killed[x].count;
att:handler.c:      else if( ch->pcdata->killed[x].vnum == 0 )
att:handler.c:   memmove( ( char * )ch->pcdata->killed + sizeof( KILLED_DATA ),
att:handler.c:            ch->pcdata->killed, ( track - 1 ) * sizeof( KILLED_DATA ) );
att:handler.c:   ch->pcdata->killed[0].vnum = vnum;
att:handler.c:   ch->pcdata->killed[0].count = 1;
att:handler.c:      ch->pcdata->killed[track].vnum = 0;
att:handler.c:      if( ch->pcdata->killed[x].vnum == vnum )
att:handler.c:         return ch->pcdata->killed[x].count;
att:handler.c:      else if( ch->pcdata->killed[x].vnum == 0 )
att:handler.c:         if( !IS_NPC( ch ) && ch->pcdata->bestowments && is_name( cmd->name, ch->pcdata->bestowments )
att:handler.c.backup:   ch_days = ( ch->pcdata->month + 1 ) * sysdata.dayspermonth;
att:handler.c.backup:   ch_days += ch->pcdata->day;
att:handler.c.backup:   age = time_info.year - ch->pcdata->year;
att:handler.c.backup:         ch->pcdata->learned[sn] += mod;
att:handler.c.backup:         ch->pcdata->learned[sn] = URANGE( 0, ch->pcdata->learned[sn] + mod, GET_ADEPT( ch, sn ) );
att:handler.c.backup:            ch->pcdata->condition[COND_FULL] = URANGE( 0, ch->pcdata->condition[COND_FULL] + mod, 48 );
att:handler.c.backup:            ch->pcdata->condition[COND_THIRST] = URANGE( 0, ch->pcdata->condition[COND_THIRST] + mod, 48 );
att:handler.c.backup:            ch->pcdata->condition[COND_DRUNK] = URANGE( 0, ch->pcdata->condition[COND_DRUNK] + mod, 48 );
att:handler.c.backup:            ch->pcdata->condition[COND_BLOODTHIRST] =
att:handler.c.backup:               URANGE( 0, ch->pcdata->condition[COND_BLOODTHIRST] + mod, ch->level + 10 );
att:handler.c.backup:   if( ch->pcdata->deity )
att:handler.c.backup:      if( ch->pcdata->favor > ch->pcdata->deity->affectednum )
att:handler.c.backup:         xSET_BITS( ch->affected_by, ch->pcdata->deity->affected );
att:handler.c.backup:      if( ch->pcdata->favor > ch->pcdata->deity->elementnum )
att:handler.c.backup:         SET_BIT( ch->resistant, ch->pcdata->deity->element );
att:handler.c.backup:      if( ch->pcdata->favor < ch->pcdata->deity->susceptnum )
att:handler.c.backup:         SET_BIT( ch->susceptible, ch->pcdata->deity->suscept );
att:handler.c.backup:         if( wch->pcdata && wch->pcdata->pet == ch )
att:handler.c.backup:            wch->pcdata->pet = NULL;
att:handler.c.backup:      if( !IS_NPC( ch ) && ch->pcdata->clan )
att:handler.c.backup:         location = get_room_index( ch->pcdata->clan->recall );
att:handler.c.backup:   int drunk = IS_NPC( ch ) ? 0 : ch->pcdata->condition[COND_DRUNK];
att:handler.c.backup:          && IS_SET( rch->pcdata->flags, PCFLAG_DND ) && get_trust( ch ) < get_trust( rch ) && can_see( ch, rch ) )
att:handler.c.backup:      if( ch->pcdata->council && !str_cmp( ch->pcdata->council->name, "Newbie Council" ) )
att:handler.c.backup:    clan_factor = 1 + abs( ch->alignment - ch->pcdata->clan->alignment ) / 1000; 
att:handler.c.backup:      deity_factor = ch->pcdata->favor / -500;
att:handler.c.backup:      deity_factor = ch->pcdata->favor / -500;
att:handler.c.backup:   if( !IS_NPC( ch ) && ch->pcdata->nuisance && ch->pcdata->nuisance->flags > 2 )
att:handler.c.backup:      c += ( int )( .4 * ( ( ch->pcdata->nuisance->flags - 2 ) * ch->pcdata->nuisance->power ) );
att:handler.c.backup:      if( ch->pcdata->killed[x].vnum == vnum )
att:handler.c.backup:         if( ch->pcdata->killed[x].count < 50 )
att:handler.c.backup:            ++ch->pcdata->killed[x].count;
att:handler.c.backup:      else if( ch->pcdata->killed[x].vnum == 0 )
att:handler.c.backup:   memmove( ( char * )ch->pcdata->killed + sizeof( KILLED_DATA ),
att:handler.c.backup:            ch->pcdata->killed, ( track - 1 ) * sizeof( KILLED_DATA ) );
att:handler.c.backup:   ch->pcdata->killed[0].vnum = vnum;
att:handler.c.backup:   ch->pcdata->killed[0].count = 1;
att:handler.c.backup:      ch->pcdata->killed[track].vnum = 0;
att:handler.c.backup:      if( ch->pcdata->killed[x].vnum == vnum )
att:handler.c.backup:         return ch->pcdata->killed[x].count;
att:handler.c.backup:      else if( ch->pcdata->killed[x].vnum == 0 )
att:handler.c.backup:         if( !IS_NPC( ch ) && ch->pcdata->bestowments && is_name( cmd->name, ch->pcdata->bestowments )
att:hotboot.c:         och->pcdata->hotboot = TRUE;
att:house.c:   if( sysdata.save_pets && ch->pcdata && ch->pcdata->pet )
att:house.c:      extract_char( ch->pcdata->pet, TRUE );
att:house.c:   if( ch->pcdata && ch->pcdata->clan )
att:house.c:      save_clan( ch->pcdata->clan );
att:interp.c:                  || ( !IS_NPC( ch ) && ch->pcdata->council
att:interp.c:                       && is_name( cmd->name, ch->pcdata->council->powers )
att:interp.c:                  || ( !IS_NPC( ch ) && IS_SET( ch->pcdata->flags, PCFLAG_RETIRED )
att:interp.c:                  || ( !IS_NPC( ch ) && ch->pcdata->bestowments && ch->pcdata->bestowments[0] != '\0'
att:interp.c:                       && is_name( cmd->name, ch->pcdata->bestowments ) && cmd->level <= ( trust + sysdata.bestow_dif ) ) ) )
att:interp.c:      else if( IS_SET( ch->pcdata->flags, PCFLAG_WATCH ) )
att:interp.c:   if( !IS_NPC( ch ) && ch->pcdata->nuisance && ch->pcdata->nuisance->flags > 9
att:interp.c:       && number_percent(  ) < ( ( ch->pcdata->nuisance->flags - 9 ) * 10 * ch->pcdata->nuisance->power ) )
att:liquids.c:   if( !IS_NPC( ch ) && ch->pcdata->condition[COND_DRUNK] > MAX_COND_VALUE - 8 )
att:liquids.c:                && ch->level > 5 && ch->pcdata->condition[COND_BLOODTHIRST] > ( 5 + ch->level / 10 ) )
att:liquids.c:            if( ch->pcdata->condition[COND_BLOODTHIRST] < ( 10 + ch->level ) )
att:liquids.c:               if( ch->pcdata->condition[COND_FULL] >= MAX_COND_VALUE
att:liquids.c:                   || ch->pcdata->condition[COND_THIRST] >= MAX_COND_VALUE )
att:liquids.c:            ch->pcdata->condition[COND_THIRST] = MAX_COND_VALUE;
att:liquids.c:         if( !IS_NPC( ch ) && ( ch->pcdata->condition[COND_THIRST] == MAX_COND_VALUE
att:liquids.c:                                || ch->pcdata->condition[COND_FULL] == MAX_COND_VALUE ) )
att:liquids.c:            if( ch->pcdata->condition[COND_DRUNK] > ( MAX_COND_VALUE / 2 )
att:liquids.c:                && ch->pcdata->condition[COND_DRUNK] < ( MAX_COND_VALUE * .4 ) )
att:liquids.c:            else if( ch->pcdata->condition[COND_DRUNK] >= ( MAX_COND_VALUE * .4 )
att:liquids.c:                     && ch->pcdata->condition[COND_DRUNK] < ( MAX_COND_VALUE * .6 ) )
att:liquids.c:            else if( ch->pcdata->condition[COND_DRUNK] >= ( MAX_COND_VALUE * .6 )
att:liquids.c:                     && ch->pcdata->condition[COND_DRUNK] < ( MAX_COND_VALUE * .9 ) )
att:liquids.c:            else if( ch->pcdata->condition[COND_DRUNK] >= ( MAX_COND_VALUE * .9 )
att:liquids.c:                     && ch->pcdata->condition[COND_DRUNK] < MAX_COND_VALUE )
att:liquids.c:            else if( ch->pcdata->condition[COND_DRUNK] == MAX_COND_VALUE )
att:liquids.c:            if( ch->pcdata->condition[COND_THIRST] > ( MAX_COND_VALUE / 2 )
att:liquids.c:                && ch->pcdata->condition[COND_THIRST] < ( MAX_COND_VALUE * .4 ) )
att:liquids.c:            else if( ch->pcdata->condition[COND_THIRST] >= ( MAX_COND_VALUE * .4 )
att:liquids.c:                     && ch->pcdata->condition[COND_THIRST] < ( MAX_COND_VALUE * .6 ) )
att:liquids.c:            else if( ch->pcdata->condition[COND_THIRST] >= ( MAX_COND_VALUE * .6 )
att:liquids.c:                     && ch->pcdata->condition[COND_THIRST] < ( MAX_COND_VALUE * .9 ) )
att:liquids.c:            else if( ch->pcdata->condition[COND_THIRST] >= ( MAX_COND_VALUE * .9 )
att:liquids.c:                     && ch->pcdata->condition[COND_THIRST] < MAX_COND_VALUE )
att:liquids.c:            else if( ch->pcdata->condition[COND_THIRST] == MAX_COND_VALUE )
att:liquids.c:               if( ch->pcdata->condition[COND_BLOODTHIRST] > ( MAX_COND_VALUE / 2 )
att:liquids.c:                   && ch->pcdata->condition[COND_BLOODTHIRST] < ( MAX_COND_VALUE * .4 ) )
att:liquids.c:               else if( ch->pcdata->condition[COND_BLOODTHIRST] >= ( MAX_COND_VALUE * .4 )
att:liquids.c:                        && ch->pcdata->condition[COND_BLOODTHIRST] < ( MAX_COND_VALUE * .6 ) )
att:liquids.c:               else if( ch->pcdata->condition[COND_BLOODTHIRST] >= ( MAX_COND_VALUE * .6 )
att:liquids.c:                        && ch->pcdata->condition[COND_BLOODTHIRST] < ( MAX_COND_VALUE * .9 ) )
att:liquids.c:               else if( ch->pcdata->condition[COND_BLOODTHIRST] >= ( MAX_COND_VALUE * .9 )
att:liquids.c:                        && ch->pcdata->condition[COND_BLOODTHIRST] < MAX_COND_VALUE )
att:liquids.c:            else if( !IS_VAMPIRE( ch ) && ch->pcdata->condition[COND_BLOODTHIRST] >= MAX_COND_VALUE )
att:liquids.c:               ch->pcdata->condition[COND_BLOODTHIRST] = MAX_COND_VALUE;
att:liquids.c:            if( ch->pcdata->condition[COND_DRUNK] > ( MAX_COND_VALUE / 2 )
att:liquids.c:                && ch->pcdata->condition[COND_DRUNK] < ( MAX_COND_VALUE * .4 ) )
att:liquids.c:            else if( ch->pcdata->condition[COND_DRUNK] >= ( MAX_COND_VALUE * .4 )
att:liquids.c:                     && ch->pcdata->condition[COND_DRUNK] < ( MAX_COND_VALUE * .6 ) )
att:liquids.c:            else if( ch->pcdata->condition[COND_DRUNK] >= ( MAX_COND_VALUE * .6 )
att:liquids.c:                     && ch->pcdata->condition[COND_DRUNK] < ( MAX_COND_VALUE * .9 ) )
att:liquids.c:            else if( ch->pcdata->condition[COND_DRUNK] >= ( MAX_COND_VALUE * .9 )
att:liquids.c:                     && ch->pcdata->condition[COND_DRUNK] < MAX_COND_VALUE )
att:liquids.c:            else if( ch->pcdata->condition[COND_DRUNK] == MAX_COND_VALUE )
att:liquids.c:            if( ch->pcdata->condition[COND_THIRST] > ( MAX_COND_VALUE / 2 )
att:liquids.c:                && ch->pcdata->condition[COND_THIRST] < ( MAX_COND_VALUE * .4 ) )
att:liquids.c:            else if( ch->pcdata->condition[COND_THIRST] >= ( MAX_COND_VALUE * .4 )
att:liquids.c:                     && ch->pcdata->condition[COND_THIRST] < ( MAX_COND_VALUE * .6 ) )
att:liquids.c:            else if( ch->pcdata->condition[COND_THIRST] >= ( MAX_COND_VALUE * .6 )
att:liquids.c:                     && ch->pcdata->condition[COND_THIRST] < ( MAX_COND_VALUE * .9 ) )
att:liquids.c:            else if( ch->pcdata->condition[COND_THIRST] >= ( MAX_COND_VALUE * .9 )
att:liquids.c:                     && ch->pcdata->condition[COND_THIRST] < MAX_COND_VALUE )
att:liquids.c:            else if( ch->pcdata->condition[COND_THIRST] == MAX_COND_VALUE )
att:liquids.c:               if( ch->pcdata->condition[COND_BLOODTHIRST] > ( MAX_COND_VALUE / 2 )
att:liquids.c:                   && ch->pcdata->condition[COND_BLOODTHIRST] < ( MAX_COND_VALUE * .4 ) )
att:liquids.c:               else if( ch->pcdata->condition[COND_BLOODTHIRST] >= ( MAX_COND_VALUE * .4 )
att:liquids.c:                        && ch->pcdata->condition[COND_BLOODTHIRST] < ( MAX_COND_VALUE * .6 ) )
att:liquids.c:               else if( ch->pcdata->condition[COND_BLOODTHIRST] >= ( MAX_COND_VALUE * .6 )
att:liquids.c:                        && ch->pcdata->condition[COND_BLOODTHIRST] < ( MAX_COND_VALUE * .9 ) )
att:liquids.c:               else if( ch->pcdata->condition[COND_BLOODTHIRST] >= ( MAX_COND_VALUE * .9 )
att:liquids.c:                        && ch->pcdata->condition[COND_BLOODTHIRST] < MAX_COND_VALUE )
att:liquids.c:            else if( !IS_VAMPIRE( ch ) && ch->pcdata->condition[COND_BLOODTHIRST] >= MAX_COND_VALUE )
att:liquids.c:               ch->pcdata->condition[COND_BLOODTHIRST] = MAX_COND_VALUE;
att:liquids.c:            if( !IS_OBJ_STAT( source, ITEM_CLANCORPSE ) || !IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
att:magic.c:   if( ch->pcdata->learned[sn] > 0
att:magic.c:      if( ch->pcdata->learned[sn] > 0
att:magic.c:      if( !ch->pcdata->special_skills[sn] || !ch->pcdata->special_skills[sn]->name )
att:magic.c:      if( LOWER( name[0] ) == LOWER( ch->pcdata->special_skills[sn]->name[0] )
att:magic.c:          && !str_prefix( name, ch->pcdata->special_skills[sn]->name ) )
att:magic.c:         if( !IS_NPC( ch ) && ch->pcdata->nuisance &&
att:magic.c:             ch->pcdata->nuisance->flags > 5
att:magic.c:             && number_percent(  ) < ( ( ( ch->pcdata->nuisance->flags - 5 ) * 8 ) + ch->pcdata->nuisance->power * 6 ) )
att:magic.c:         if( !IS_NPC( ch ) && ch->fighting && ch->pcdata->nuisance &&
att:magic.c:             ch->pcdata->nuisance->flags > 5
att:magic.c:             && number_percent(  ) < ( ( ( ch->pcdata->nuisance->flags - 5 ) * 8 ) + 6 * ch->pcdata->nuisance->power ) )
att:magic.c:             && skill->guild != CLASS_NONE && ( !ch->pcdata->clan || skill->guild != ch->pcdata->clan->Class ) )
att:magic.c:            if( ch->pcdata->condition[COND_BLOODTHIRST] < blood )
att:magic.c:   if( !IS_NPC( ch ) && ( number_percent(  ) + skill->difficulty * 5 ) > ch->pcdata->learned[sn] )
att:magic.c:         if( !IS_NPC( vch ) && xIS_SET( vch->act, PLR_WIZINVIS ) && vch->pcdata->wizinvis >= LEVEL_IMMORTAL )
att:magic.c:   if( ( ( get_curr_cha( ch ) / 3 ) + 1 ) > ch->pcdata->charmies )
att:magic.c:      ch->pcdata->charmies++;
att:magic.c:         if( !IS_NPC( vch ) && xIS_SET( vch->act, PLR_WIZINVIS ) && vch->pcdata->wizinvis >= LEVEL_IMMORTAL )
att:magic.c:      if( !IS_NPC( vch ) && xIS_SET( vch->act, PLR_WIZINVIS ) && vch->pcdata->wizinvis >= LEVEL_IMMORTAL )
att:magic.c:   if( IS_PKILL( ch ) && ch->pcdata->condition[COND_BLOODTHIRST] > 22 )
att:magic.c:         if( !IS_IMMORTAL( ch ) && ch->pcdata->condition[COND_BLOODTHIRST] - ( pMobIndex->level / 3 ) < 0 )
att:magic.c:      if( !IS_NPC( vch ) && xIS_SET( vch->act, PLR_WIZINVIS ) && vch->pcdata->wizinvis >= LEVEL_IMMORTAL )
att:magic.c:      if( !IS_NPC( vch ) && xIS_SET( vch->act, PLR_WIZINVIS ) && vch->pcdata->wizinvis >= LEVEL_IMMORTAL )
att:mapout.c:   for( i = ch->pcdata->area->low_r_vnum; i <= ch->pcdata->area->hi_r_vnum; i++ )
att:mapout.c:         if( !( location = make_room( i, ch->pcdata->area ) ) )
att:mapout.c:         location->area = ch->pcdata->area;
att:mapout.c:   for( i = ch->pcdata->area->low_r_vnum; i <= ch->pcdata->area->hi_r_vnum; i++ )
att:mapout.c:      for( i = ch->pcdata->area->low_r_vnum; i <= ch->pcdata->area->hi_r_vnum; i++ )
att:misc.c:   if( IS_NPC( ch ) || ch->pcdata->condition[COND_FULL] > 5 )
att:misc.c:      if( !IS_NPC( ch ) && ch->pcdata->condition[COND_FULL] > 40 )
att:misc.c:   if( !IS_NPC( ch ) && ( !IS_PKILL( ch ) || ( IS_PKILL( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_HIGHGAG ) ) ) )
att:misc.c:               condition = ch->pcdata->condition[COND_FULL];
att:misc.c:               if( condition <= 1 && ch->pcdata->condition[COND_FULL] > 1 )
att:misc.c:               else if( ch->pcdata->condition[COND_FULL] > 40 )
att:misc.c:               condition = ch->pcdata->condition[COND_FULL];
att:misc.c:               if( condition <= 1 && ch->pcdata->condition[COND_FULL] > 1 )
att:misc.c:               else if( ch->pcdata->condition[COND_FULL] > 40 )
att:misc.c:   if( !IS_NPC( ch ) && ( ch->pcdata->condition[COND_FULL] >= 48 || ch->pcdata->condition[COND_THIRST] >= 48 ) )
att:misc.c:   if( !IS_NPC( ch ) && ch->pcdata->nuisance &&
att:misc.c:       ch->pcdata->nuisance->flags > 3
att:misc.c:       && ( ch->pcdata->condition[COND_FULL] >= ( 48 - ( 3 * ch->pcdata->nuisance->flags ) + ch->pcdata->nuisance->power )
att:misc.c:            || ch->pcdata->condition[COND_THIRST] >= ( 48 - ( ch->pcdata->nuisance->flags ) + ch->pcdata->nuisance->power ) ) )
att:misc.c:   if( !IS_NPC( ch ) && ( !IS_PKILL( ch ) || ( IS_PKILL( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_HIGHGAG ) ) ) )
att:misc.c:      if( !IS_NPC( ch ) && ch->pcdata->condition[COND_THIRST] > 43 )
att:mud.h:#define WAIT_STATE(ch, npulse) ((ch)->wait=(!IS_NPC(ch)&&ch->pcdata->nuisance&&\
att:mud.h:			      (ch->pcdata->nuisance->flags>4))?UMAX((ch)->wait,\
att:mud.h:               		      ch->pcdata->nuisance->power)): \
att:mud.h:#define IS_RETIRED(ch) (ch->pcdata && IS_SET(ch->pcdata->flags,PCFLAG_RETIRED))
att:mud.h:#define IS_GUEST(ch) (ch->pcdata && IS_SET(ch->pcdata->flags,PCFLAG_GUEST))
att:mud.h:#define NOT_AUTHED(ch)		(!IS_NPC(ch) && ch->pcdata->auth_state <= 3  \
att:mud.h:			      && IS_SET(ch->pcdata->flags, PCFLAG_UNAUTHED) )
att:mud.h:			      && ch->pcdata->auth_state == 1		     \
att:mud.h:			      && IS_SET(ch->pcdata->flags, PCFLAG_UNAUTHED) )
att:mud.h.backup:#define WAIT_STATE(ch, npulse) ((ch)->wait=(!IS_NPC(ch)&&ch->pcdata->nuisance&&\
att:mud.h.backup:			      (ch->pcdata->nuisance->flags>4))?UMAX((ch)->wait,\
att:mud.h.backup:               		      ch->pcdata->nuisance->power)): \
att:mud.h.backup:#define IS_RETIRED(ch) (ch->pcdata && IS_SET(ch->pcdata->flags,PCFLAG_RETIRED))
att:mud.h.backup:#define IS_GUEST(ch) (ch->pcdata && IS_SET(ch->pcdata->flags,PCFLAG_GUEST))
att:mud.h.backup:#define NOT_AUTHED(ch)		(!IS_NPC(ch) && ch->pcdata->auth_state <= 3  \
att:mud.h.backup:			      && IS_SET(ch->pcdata->flags, PCFLAG_UNAUTHED) )
att:mud.h.backup:			      && ch->pcdata->auth_state == 1		     \
att:mud.h.backup:			      && IS_SET(ch->pcdata->flags, PCFLAG_UNAUTHED) )
att:mud_comm.c:               drunk = vch->pcdata->condition[COND_DRUNK];
att:mud_comm.c:               vch->pcdata->condition[COND_DRUNK] = 0;
att:mud_comm.c:               vch->pcdata->condition[COND_DRUNK] = drunk;
att:mud_comm.c:   if( !ch->pcdata->nuisance )
att:mud_comm.c.backup:               drunk = vch->pcdata->condition[COND_DRUNK];
att:mud_comm.c.backup:               vch->pcdata->condition[COND_DRUNK] = 0;
att:mud_comm.c.backup:               vch->pcdata->condition[COND_DRUNK] = drunk;
att:mud_comm.c.backup:   if( !ch->pcdata->nuisance )
att:player.c:   pager_printf( ch, "\r\nWorth for %s%s.\r\n", ch->name, ch->pcdata->title );
att:player.c:   if( !ch->pcdata->deity )
att:player.c:   else if( ch->pcdata->favor > 2250 )
att:player.c:   else if( ch->pcdata->favor > 2000 )
att:player.c:   else if( ch->pcdata->favor > 1750 )
att:player.c:   else if( ch->pcdata->favor > 1500 )
att:player.c:   else if( ch->pcdata->favor > 1250 )
att:player.c:   else if( ch->pcdata->favor > 1000 )
att:player.c:   else if( ch->pcdata->favor > 750 )
att:player.c:   else if( ch->pcdata->favor > 250 )
att:player.c:   else if( ch->pcdata->favor > -250 )
att:player.c:   else if( ch->pcdata->favor > -750 )
att:player.c:   else if( ch->pcdata->favor > -1000 )
att:player.c:   else if( ch->pcdata->favor > -1250 )
att:player.c:   else if( ch->pcdata->favor > -1500 )
att:player.c:   else if( ch->pcdata->favor > -1750 )
att:player.c:   else if( ch->pcdata->favor > -2000 )
att:player.c:   else if( ch->pcdata->favor > -2250 )
att:player.c:                 ch->pcdata->quest_curr, ch->carry_weight, buf, num_punct( ch->gold ) );
att:player.c:   if( !ch->pcdata->deity )
att:player.c:   if( ch->pcdata->favor < ch->level * 2 )
att:player.c:   pager_printf( ch, "%s appears in a vision, revealing that your remains... ", ch->pcdata->deity->name );
att:player.c:      ch->pcdata->favor -= ch->level * 2;
att:player.c:   STRFREE( ch->pcdata->title );
att:player.c:   ch->pcdata->title = STRALLOC( buf );
att:player.c:   if( IS_SET( ch->pcdata->flags, PCFLAG_NOTITLE ) )
att:player.c:   if( IS_SET( ch->pcdata->flags, PCFLAG_NOCPOSE ) )
att:player.c:      if( !ch->pcdata->cpose )
att:player.c:         ch->pcdata->cpose = str_dup( "" );
att:player.c:      ch_printf( ch, "Your cpose is: %s\r\n", show_tilde( ch->pcdata->cpose ) );
att:player.c:      if( ch->pcdata->cpose )
att:player.c:         DISPOSE( ch->pcdata->cpose );
att:player.c:      ch->pcdata->cpose = str_dup( "" );
att:player.c:   if( ch->pcdata->cpose )
att:player.c:      DISPOSE( ch->pcdata->cpose );
att:player.c:   ch->pcdata->cpose = str_dup( buf );
att:player.c:   if( IS_SET( ch->pcdata->flags, PCFLAG_NODESC ) )
att:player.c:   if( IS_SET( ch->pcdata->flags, PCFLAG_NOBIO ) )
att:player.c:         start_editing( ch, ch->pcdata->bio );
att:player.c:         STRFREE( ch->pcdata->bio );
att:player.c:         ch->pcdata->bio = copy_buffer( ch );
att:player.c:                 ch->hit, ch->max_hit, ch->pcdata->condition[COND_BLOODTHIRST],
att:player.c:                ch->hit, ch->max_hit, ch->pcdata->condition[COND_BLOODTHIRST],
att:player.c:                 ch->hit, ch->max_hit, ch->pcdata->condition[COND_BLOODTHIRST],
att:player.c:                 ch->pcdata->condition[COND_BLOODTHIRST], 10 + ch->level, ch->move, ch->max_move, ch->exp );
att:player.c:                ch->pcdata->condition[COND_BLOODTHIRST], 10 + ch->level, ch->move, ch->max_move, ch->exp );
att:player.c:      ch_printf( ch, "%s\r\n", !str_cmp( ch->pcdata->fprompt, "" ) ? "(default prompt)" : ch->pcdata->fprompt );
att:player.c:   ch_printf( ch, "%s\r\n", !str_cmp( ch->pcdata->fprompt, "" ) ? "(default prompt)" : ch->pcdata->fprompt );
att:player.c:   if( ch->pcdata->fprompt )
att:player.c:      STRFREE( ch->pcdata->fprompt );
att:player.c:      ch->pcdata->fprompt = STRALLOC( "" );
att:player.c:      ch->pcdata->fprompt = STRALLOC( ch->pcdata->prompt );
att:player.c:      ch->pcdata->fprompt = STRALLOC( argument );
att:player.c:      ch_printf( ch, "%s\r\n", !str_cmp( ch->pcdata->prompt, "" ) ? "(default prompt)" : ch->pcdata->prompt );
att:player.c:   ch_printf( ch, "%s\r\n", !str_cmp( ch->pcdata->prompt, "" ) ? "(default prompt)" : ch->pcdata->prompt );
att:player.c:   if( ch->pcdata->prompt )
att:player.c:      STRFREE( ch->pcdata->prompt );
att:player.c:      ch->pcdata->prompt = STRALLOC( "" );
att:player.c:      ch->pcdata->prompt = STRALLOC( ch->pcdata->fprompt );
att:player.c:      ch->pcdata->prompt = STRALLOC( argument );
att:player.c:   if( !ch->pcdata->deity )
att:player.c:   else if( ch->pcdata->favor > 2250 )
att:player.c:   else if( ch->pcdata->favor > 2000 )
att:player.c:   else if( ch->pcdata->favor > 1750 )
att:player.c:   else if( ch->pcdata->favor > 1500 )
att:player.c:   else if( ch->pcdata->favor > 1250 )
att:player.c:   else if( ch->pcdata->favor > 1000 )
att:player.c:   else if( ch->pcdata->favor > 750 )
att:player.c:   else if( ch->pcdata->favor > 250 )
att:player.c:   else if( ch->pcdata->favor > -250 )
att:player.c:   else if( ch->pcdata->favor > -750 )
att:player.c:   else if( ch->pcdata->favor > -1000 )
att:player.c:   else if( ch->pcdata->favor > -1250 )
att:player.c:   else if( ch->pcdata->favor > -1500 )
att:player.c:   else if( ch->pcdata->favor > -1750 )
att:player.c:   else if( ch->pcdata->favor > -2000 )
att:player.c:   else if( ch->pcdata->favor > -2250 )
att:player.c:   ch_printf( ch, "%s considers you to be %s.\n\r", ch->pcdata->deity->name, buf );
att:polymorph.c:   if( morph->deity && ( !ch->pcdata->deity || !get_deity( morph->deity ) ) )
att:polymorph.c:         STRFREE( ch->pcdata->subprompt );
att:polymorph.c:      STRFREE( ch->pcdata->subprompt );
att:polymorph.c:      ch->pcdata->subprompt = STRALLOC( buf );
att:polymorph.c:      if( IS_NPC( ch ) || !ch->pcdata->deity || ch->pcdata->favor < morph->favourused )
att:polymorph.c:         ch->pcdata->favor -= morph->favourused;
att:renumber.c:      if( area->low_r_vnum < ch->pcdata->r_range_lo || area->hi_r_vnum > ch->pcdata->r_range_hi ||
att:renumber.c:          area->low_m_vnum < ch->pcdata->m_range_lo || area->hi_m_vnum > ch->pcdata->m_range_hi ||
att:renumber.c:          area->low_o_vnum < ch->pcdata->o_range_lo || area->hi_o_vnum > ch->pcdata->o_range_hi )
att:renumber.c:      if( r_area->low_room < ch->pcdata->r_range_lo || r_area->hi_room > ch->pcdata->r_range_hi ||
att:renumber.c:          r_area->low_obj < ch->pcdata->o_range_lo || r_area->hi_obj > ch->pcdata->o_range_hi ||
att:renumber.c:          r_area->low_mob < ch->pcdata->m_range_lo || r_area->hi_mob > ch->pcdata->m_range_hi )
att:reset.c:   if( IS_NPC( ch ) || get_trust( ch ) < LEVEL_SAVIOR || !ch->pcdata->area )
att:reset.c:   if( ch->in_room->area != ch->pcdata->area && get_trust( ch ) < LEVEL_GREATER )
att:reset.c:   if( IS_NPC( ch ) || get_trust( ch ) < LEVEL_SAVIOR || !ch->pcdata->area )
att:reset.c:   pArea = ch->pcdata->area;
att:save.c:   ch->pcdata->day = ( number_range( 1, sysdata.dayspermonth ) - 1 );   /* Assign random day of birth */
att:save.c:   ch->pcdata->month = ( number_range( 1, sysdata.monthsperyear ) - 1 );   /* Assign random month of birth */
att:save.c:   ch->pcdata->year = time_info.year - age;  /* Assign birth year based on calculations above */
att:save.c:   snprintf( strsave, MAX_INPUT_LENGTH, "%s%c/%s", PLAYER_DIR, tolower( ch->pcdata->filename[0] ),
att:save.c:             capitalize( ch->pcdata->filename ) );
att:save.c:      snprintf( strback, MAX_INPUT_LENGTH, "%s%c/%s", BACKUP_DIR, tolower( ch->pcdata->filename[0] ),
att:save.c:                capitalize( ch->pcdata->filename ) );
att:save.c:   if( ch->level >= LEVEL_IMMORTAL || IS_SET( ch->pcdata->flags, PCFLAG_RETIRED ) )
att:save.c:      snprintf( strback, MAX_INPUT_LENGTH, "%s%s", GOD_DIR, capitalize( ch->pcdata->filename ) );
att:save.c:         fprintf( fp, "Pcflags      %d\n", ch->pcdata->flags );
att:save.c:         if( ch->pcdata->r_range_lo && ch->pcdata->r_range_hi )
att:save.c:            fprintf( fp, "RoomRange    %d %d\n", ch->pcdata->r_range_lo, ch->pcdata->r_range_hi );
att:save.c:         if( ch->pcdata->o_range_lo && ch->pcdata->o_range_hi )
att:save.c:            fprintf( fp, "ObjRange     %d %d\n", ch->pcdata->o_range_lo, ch->pcdata->o_range_hi );
att:save.c:         if( ch->pcdata->m_range_lo && ch->pcdata->m_range_hi )
att:save.c:            fprintf( fp, "MobRange     %d %d\n", ch->pcdata->m_range_lo, ch->pcdata->m_range_hi );
att:save.c:         fwrite_obj( ch, ch->last_carrying, fp, 0, OS_CARRY, ch->pcdata->hotboot );
att:save.c:      if( sysdata.save_pets && ch->pcdata->pet )
att:save.c:         fwrite_mobile( fp, ch->pcdata->pet );
att:save.c:            ch->pcdata->age_bonus, ch->pcdata->day, ch->pcdata->month, ch->pcdata->year );
att:save.c:   fprintf( fp, "Str          %d\n", ch->pcdata->str );
att:save.c:   fprintf( fp, "Intel          %d\n", ch->pcdata->intel );
att:save.c:   fprintf( fp, "Dex         %d\n", ch->pcdata->dex );
att:save.c:   fprintf( fp, "Lck          %d\n", ch->pcdata->lck );
att:save.c:   fprintf( fp, "Att          %d\n", ch->pcdata->att );
att:save.c:   fprintf( fp, "Def          %d\n", ch->pcdata->def );
att:save.c:   fprintf( fp, "Matt          %d\n", ch->pcdata->matt );
att:save.c:   fprintf( fp, "Mdef          %d\n", ch->pcdata->mdef );
att:save.c:   fprintf( fp, "strplus          %d\n", ch->pcdata->strplus );
att:save.c:   fprintf( fp, "intplus          %d\n", ch->pcdata->intplus );
att:save.c:   fprintf( fp, "dexplus          %d\n", ch->pcdata->dexplus );
att:save.c:   fprintf( fp, "lckplus          %d\n", ch->pcdata->lckplus );
att:save.c:   fprintf( fp, "attplus          %d\n", ch->pcdata->attplus );
att:save.c:   fprintf( fp, "defplus          %d\n", ch->pcdata->defplus );
att:save.c:   fprintf( fp, "mattplus          %d\n", ch->pcdata->mattplus );
att:save.c:   fprintf( fp, "mdefplus          %d\n", ch->pcdata->mdefplus );
att:save.c:   fprintf( fp, "mlevel          %d\n", ch->pcdata->mlevel );
att:save.c:   fprintf( fp, "deflevel          %d\n", ch->pcdata->deflevel );
att:save.c:   fprintf( fp, "attlevel          %d\n", ch->pcdata->attlevel );
att:save.c:   fprintf( fp, "Favor        %d\n", ch->pcdata->favor );
att:save.c:   fprintf( fp, "Balance      %d\n", ch->pcdata->balance );
att:save.c:   fprintf( fp, "Glory        %d\n", ch->pcdata->quest_curr );
att:save.c:   fprintf( fp, "MGlory       %d\n", ch->pcdata->quest_accum );
att:save.c:   fprintf( fp, "Ap        %d\n", ch->pcdata->ap );   
att:save.c:   fprintf( fp, "Tier        %d\n", ch->pcdata->tier );   
att:save.c:   if( ch->pcdata && ch->pcdata->outcast_time )
att:save.c:      fprintf( fp, "Outcast_time %ld\n", ch->pcdata->outcast_time );
att:save.c:   if( ch->pcdata && ch->pcdata->nuisance )
att:save.c:      fprintf( fp, "NuisanceNew %ld %ld %d %d\n", ch->pcdata->nuisance->set_time,
att:save.c:               ch->pcdata->nuisance->max_time, ch->pcdata->nuisance->flags, ch->pcdata->nuisance->power );
att:save.c:   fprintf( fp, "Password     %s~\n", ch->pcdata->pwd );
att:save.c:   if( ch->pcdata->rank && ch->pcdata->rank[0] != '\0' )
att:save.c:      fprintf( fp, "Rank         %s~\n", ch->pcdata->rank );
att:save.c:   if( ch->pcdata->bestowments && ch->pcdata->bestowments[0] != '\0' )
att:save.c:      fprintf( fp, "Bestowments  %s~\n", ch->pcdata->bestowments );
att:save.c:   fprintf( fp, "Title        %s~\n", ch->pcdata->title );
att:save.c:   fprintf( fp, "Cpose        %s~\n", ch->pcdata->cpose );
att:save.c:   fprintf( fp, "Hometown        %s~\n", ch->pcdata->hometown );
att:save.c:   fprintf( fp, "Customclass        %s~\n", ch->pcdata->customclass );
att:save.c:   if( ch->pcdata->homepage && ch->pcdata->homepage[0] != '\0' )
att:save.c:      fprintf( fp, "Homepage     %s~\n", ch->pcdata->homepage );
att:save.c:   if( ch->pcdata->bio && ch->pcdata->bio[0] != '\0' )
att:save.c:      fprintf( fp, "Bio          %s~\n", ch->pcdata->bio );
att:save.c:   if( ch->pcdata->authed_by && ch->pcdata->authed_by[0] != '\0' )
att:save.c:      fprintf( fp, "AuthedBy     %s~\n", ch->pcdata->authed_by );
att:save.c:   if( ch->pcdata->min_snoop )
att:save.c:      fprintf( fp, "Minsnoop     %d\n", ch->pcdata->min_snoop );
att:save.c:   if( ch->pcdata->prompt && *ch->pcdata->prompt )
att:save.c:      fprintf( fp, "Prompt       %s~\n", ch->pcdata->prompt );
att:save.c:   if( ch->pcdata->fprompt && *ch->pcdata->fprompt )
att:save.c:      fprintf( fp, "FPrompt	     %s~\n", ch->pcdata->fprompt );
att:save.c:   if( ch->pcdata->pagerlen != 24 )
att:save.c:      fprintf( fp, "Pagerlen     %d\n", ch->pcdata->pagerlen );
att:save.c:      for( temp = ch->pcdata->first_ignored; temp; temp = temp->next )
att:save.c:      if( ch->pcdata->bamfin && ch->pcdata->bamfin[0] != '\0' )
att:save.c:         fprintf( fp, "Bamfin       %s~\n", ch->pcdata->bamfin );
att:save.c:      if( ch->pcdata->bamfout && ch->pcdata->bamfout[0] != '\0' )
att:save.c:         fprintf( fp, "Bamfout      %s~\n", ch->pcdata->bamfout );
att:save.c:      if( ch->pcdata && ch->pcdata->restore_time )
att:save.c:         fprintf( fp, "Restore_time %ld\n", ch->pcdata->restore_time );
att:save.c:      fprintf( fp, "WizInvis     %d\n", ch->pcdata->wizinvis );
att:save.c:      if( ch->pcdata->r_range_lo && ch->pcdata->r_range_hi )
att:save.c:         fprintf( fp, "RoomRange    %d %d\n", ch->pcdata->r_range_lo, ch->pcdata->r_range_hi );
att:save.c:      if( ch->pcdata->o_range_lo && ch->pcdata->o_range_hi )
att:save.c:         fprintf( fp, "ObjRange     %d %d\n", ch->pcdata->o_range_lo, ch->pcdata->o_range_hi );
att:save.c:      if( ch->pcdata->m_range_lo && ch->pcdata->m_range_hi )
att:save.c:         fprintf( fp, "MobRange     %d %d\n", ch->pcdata->m_range_lo, ch->pcdata->m_range_hi );
att:save.c:   if( ch->pcdata->council )
att:save.c:      fprintf( fp, "Council      %s~\n", ch->pcdata->council_name );
att:save.c:   if( ch->pcdata->deity_name && ch->pcdata->deity_name[0] != '\0' )
att:save.c:      fprintf( fp, "Deity	     %s~\n", ch->pcdata->deity_name );
att:save.c:   if( ch->pcdata->clan_name && ch->pcdata->clan_name[0] != '\0' )
att:save.c:      fprintf( fp, "Clan         %s~\n", ch->pcdata->clan_name );
att:save.c:   fprintf( fp, "Flags        %d\n", ch->pcdata->flags );
att:save.c:   if( ch->pcdata->release_date )
att:save.c:      fprintf( fp, "Helled       %d %s~\n", ( int )ch->pcdata->release_date, ch->pcdata->helled_by );
att:save.c:   fprintf( fp, "PKills       %d\n", ch->pcdata->pkills );
att:save.c:   fprintf( fp, "PDeaths      %d\n", ch->pcdata->pdeaths );
att:save.c:   fprintf( fp, "MKills       %d\n", ch->pcdata->mkills );
att:save.c:   fprintf( fp, "MDeaths      %d\n", ch->pcdata->mdeaths );
att:save.c:   fprintf( fp, "IllegalPK    %d\n", ch->pcdata->illegal_pk );
att:save.c:   fprintf( fp, "Timezone     %d\n", ch->pcdata->timezone );
att:save.c:            ch->pcdata->condition[0], ch->pcdata->condition[1], ch->pcdata->condition[2], ch->pcdata->condition[3] );
att:save.c:   if( ch->pcdata->recent_site )
att:save.c:      fprintf( fp, "Site         %s\n", ch->pcdata->recent_site );
att:save.c:      if( skill_table[sn]->name && ch->pcdata->learned[sn] > 0 )
att:save.c:               fprintf( fp, "Skill        %d '%s'\n", ch->pcdata->learned[sn], skill_table[sn]->name );
att:save.c:               fprintf( fp, "Ability      %d '%s'\n", ch->pcdata->learned[sn], skill_table[sn]->name );
att:save.c:               fprintf( fp, "Spell        %d '%s'\n", ch->pcdata->learned[sn], skill_table[sn]->name );
att:save.c:               fprintf( fp, "Weapon       %d '%s'\n", ch->pcdata->learned[sn], skill_table[sn]->name );
att:save.c:               fprintf( fp, "Tongue       %d '%s'\n", ch->pcdata->learned[sn], skill_table[sn]->name );
att:save.c:      if( ch->pcdata->killed[sn].vnum == 0 )
att:save.c:      fprintf( fp, "Killed       %d %d\n", ch->pcdata->killed[sn].vnum, ch->pcdata->killed[sn].count );
att:save.c:   ch->pcdata->filename = STRALLOC( name );
att:save.c:      ch->pcdata->recent_site = STRALLOC( d->host );
att:save.c:   ch->pcdata->condition[COND_THIRST] = 48;
att:save.c:   ch->pcdata->condition[COND_FULL] = 48;
att:save.c:   ch->pcdata->condition[COND_BLOODTHIRST] = 10;
att:save.c:   ch->pcdata->nuisance = NULL;
att:save.c:   ch->pcdata->wizinvis = 0;
att:save.c:   ch->pcdata->balance = 0;
att:save.c:   ch->pcdata->charmies = 0;
att:save.c:      ch->pcdata->learned[i] = 0;
att:save.c:   ch->pcdata->release_date = 0;
att:save.c:   ch->pcdata->helled_by = NULL;
att:save.c:   ch->pcdata->pagerlen = 24;
att:save.c:   ch->pcdata->first_ignored = NULL;   /* Ignore list */
att:save.c:   ch->pcdata->last_ignored = NULL;
att:save.c:   ch->pcdata->tell_history = NULL; /* imm only lasttell cmnd */
att:save.c:   ch->pcdata->lt_index = 0;  /* last tell index */
att:save.c:   ch->pcdata->hotboot = FALSE;  /* Never changed except when PC is saved during hotboot save */
att:save.c:                          preload ? "Preloading" : "Loading", ch->pcdata->filename, ( int )fst.st_size / 1024 );
att:save.c:               ch->pcdata->pet = mob;
att:save.c:      ch->pcdata->clan_name = STRALLOC( "" );
att:save.c:      ch->pcdata->clan = NULL;
att:save.c:      ch->pcdata->council_name = STRALLOC( "" );
att:save.c:      ch->pcdata->council = NULL;
att:save.c:      ch->pcdata->deity_name = STRALLOC( "" );
att:save.c:      ch->pcdata->deity = NULL;
att:save.c:      ch->pcdata->pet = NULL;
att:save.c:      ch->pcdata->pwd = str_dup( "" );
att:save.c:      ch->pcdata->bamfin = str_dup( "" );
att:save.c:      ch->pcdata->bamfout = str_dup( "" );
att:save.c:      ch->pcdata->rank = str_dup( "" );
att:save.c:      ch->pcdata->bestowments = str_dup( "" );
att:save.c:      ch->pcdata->title = STRALLOC( "" );
att:save.c:      ch->pcdata->customclass = STRALLOC( "" );
att:save.c:      ch->pcdata->homepage = str_dup( "" );
att:save.c:      ch->pcdata->bio = STRALLOC( "" );
att:save.c:      ch->pcdata->authed_by = STRALLOC( "" );
att:save.c:      ch->pcdata->prompt = STRALLOC( "" );
att:save.c:      ch->pcdata->fprompt = STRALLOC( "" );
att:save.c:      ch->pcdata->r_range_lo = 0;
att:save.c:      ch->pcdata->r_range_hi = 0;
att:save.c:      ch->pcdata->m_range_lo = 0;
att:save.c:      ch->pcdata->m_range_hi = 0;
att:save.c:      ch->pcdata->o_range_lo = 0;
att:save.c:      ch->pcdata->o_range_hi = 0;
att:save.c:      ch->pcdata->wizinvis = 0;
att:save.c:      ch->pcdata->timezone = -1;
att:save.c:      if( !ch->pcdata->clan_name )
att:save.c:         ch->pcdata->clan_name = STRALLOC( "" );
att:save.c:         ch->pcdata->clan = NULL;
att:save.c:      if( !ch->pcdata->council_name )
att:save.c:         ch->pcdata->council_name = STRALLOC( "" );
att:save.c:         ch->pcdata->council = NULL;
att:save.c:      if( !ch->pcdata->deity_name )
att:save.c:         ch->pcdata->deity_name = STRALLOC( "" );
att:save.c:         ch->pcdata->deity = NULL;
att:save.c:      if( !ch->pcdata->bio )
att:save.c:         ch->pcdata->bio = STRALLOC( "" );
att:save.c:      if( !ch->pcdata->authed_by )
att:save.c:         ch->pcdata->authed_by = STRALLOC( "" );
att:save.c:         if( ch->pcdata->wizinvis < 2 )
att:save.c:            ch->pcdata->wizinvis = ch->level;
att:save.c:                     KEY( "Att", ch->pcdata->att, fread_number( fp ) );
att:save.c:                     KEY( "Attplus", ch->pcdata->attplus, fread_number( fp ) );
att:save.c:                     KEY( "Attlevel", ch->pcdata->attlevel, fread_number( fp ) );
att:save.c:                     ch->pcdata->learned[sn] = value;
att:save.c:                           ch->pcdata->learned[sn] = 0;
att:save.c:                  ch->pcdata->age_bonus = x1;
att:save.c:                  ch->pcdata->day = x2;
att:save.c:                  ch->pcdata->month = x3;
att:save.c:                  ch->pcdata->year = x4;
att:save.c:            KEY( "Ap", ch->pcdata->ap, fread_number( fp ) );
att:save.c:            KEY( "AuthedBy", ch->pcdata->authed_by, fread_string( fp ) );
att:save.c:            KEY( "Balance", ch->pcdata->balance, fread_number( fp ) );
att:save.c:            KEY( "Bamfin", ch->pcdata->bamfin, fread_string_nohash( fp ) );
att:save.c:            KEY( "Bamfout", ch->pcdata->bamfout, fread_string_nohash( fp ) );
att:save.c:            KEY( "Bestowments", ch->pcdata->bestowments, fread_string_nohash( fp ) );
att:save.c:            KEY( "Bio", ch->pcdata->bio, fread_string( fp ) );
att:save.c:               ch->pcdata->clan_name = fread_string( fp );
att:save.c:                   && ch->pcdata->clan_name[0] != '\0' && ( ch->pcdata->clan = get_clan( ch->pcdata->clan_name ) ) == NULL )
att:save.c:                     ch->pcdata->clan_name );
att:save.c:                  STRFREE( ch->pcdata->clan_name );
att:save.c:                  ch->pcdata->clan_name = STRALLOC( "" );
att:save.c:            KEY( "Customclass", ch->pcdata->customclass, fread_string( fp ) );
att:save.c:               ch->pcdata->condition[0] = x1;
att:save.c:               ch->pcdata->condition[1] = x2;
att:save.c:               ch->pcdata->condition[2] = x3;
att:save.c:               ch->pcdata->condition[3] = x4;
att:save.c:               ch->pcdata->council_name = fread_string( fp );
att:save.c:                   && ch->pcdata->council_name[0] != '\0'
att:save.c:                   && ( ch->pcdata->council = get_council( ch->pcdata->council_name ) ) == NULL )
att:save.c:                     ch->pcdata->council_name );
att:save.c:                  STRFREE( ch->pcdata->council_name );
att:save.c:                  ch->pcdata->council_name = STRALLOC( "" );
att:save.c:               ch->pcdata->cpose = fread_string( fp );
att:save.c:               if( isalpha( ch->pcdata->cpose[0] ) || isdigit( ch->pcdata->cpose[0] ) )
att:save.c:                  snprintf( buf, MAX_STRING_LENGTH, " %s", ch->pcdata->cpose );
att:save.c:                  if( ch->pcdata->cpose )
att:save.c:                     STRFREE( ch->pcdata->cpose );
att:save.c:                  ch->pcdata->cpose = STRALLOC( buf );
att:save.c:                     KEY( "Dex", ch->pcdata->dex, fread_number( fp ) );
att:save.c:                     KEY( "Def", ch->pcdata->def, fread_number( fp ) );
att:save.c:                     KEY( "Dexplus", ch->pcdata->dexplus, fread_number( fp ) );
att:save.c:                     KEY( "Defplus", ch->pcdata->defplus, fread_number( fp ) );
att:save.c:                     KEY( "Deflevel", ch->pcdata->deflevel, fread_number( fp ) );
att:save.c:               ch->pcdata->deity_name = fread_string( fp );
att:save.c:                   && ch->pcdata->deity_name[0] != '\0'
att:save.c:                   && ( ch->pcdata->deity = get_deity( ch->pcdata->deity_name ) ) == NULL )
att:save.c:                  snprintf( buf, MAX_STRING_LENGTH, "&R\r\nYour deity, %s, has met its demise!\r\n", ch->pcdata->deity_name );
att:save.c:                  STRFREE( ch->pcdata->deity_name );
att:save.c:                  ch->pcdata->deity_name = STRALLOC( "" );
att:save.c:                  ch->pcdata->favor = 0;
att:save.c:            KEY( "Favor", ch->pcdata->favor, fread_number( fp ) );
att:save.c:            KEY( "Flags", ch->pcdata->flags, fread_number( fp ) );
att:save.c:            KEY( "FPrompt", ch->pcdata->fprompt, fread_string( fp ) );
att:save.c:            KEY( "Glory", ch->pcdata->quest_curr, fread_number( fp ) );
att:save.c:               ch->pcdata->clan_name = fread_string( fp );
att:save.c:                   && ch->pcdata->clan_name[0] != '\0' && ( ch->pcdata->clan = get_clan( ch->pcdata->clan_name ) ) == NULL )
att:save.c:                     ch->pcdata->clan_name );
att:save.c:                  STRFREE( ch->pcdata->clan_name );
att:save.c:                  ch->pcdata->clan_name = STRALLOC( "" );
att:save.c:               ch->pcdata->release_date = fread_number( fp );
att:save.c:               ch->pcdata->helled_by = fread_string( fp );
att:save.c:            KEY( "Homepage", ch->pcdata->homepage, fread_string_nohash( fp ) );
att:save.c:               ch->pcdata->hometown = fread_string( fp );
att:save.c:               if( isalpha( ch->pcdata->hometown[0] ) || isdigit( ch->pcdata->hometown[0] ) )
att:save.c:                  snprintf( buf, MAX_STRING_LENGTH, " %s", ch->pcdata->hometown );
att:save.c:                  if( ch->pcdata->hometown )
att:save.c:                     STRFREE( ch->pcdata->hometown );
att:save.c:                  ch->pcdata->hometown = STRALLOC( buf );
att:save.c:               for( ign = 0, inode = ch->pcdata->first_ignored; inode; inode = inode->next )
att:save.c:                  LINK( inode, ch->pcdata->first_ignored, ch->pcdata->last_ignored, next, prev );
att:save.c:            KEY( "IllegalPK", ch->pcdata->illegal_pk, fread_number( fp ) );
att:save.c:                   KEY( "Intel", ch->pcdata->intel, fread_number( fp ) );
att:save.c:                   KEY( "Intplus", ch->pcdata->intplus, fread_number( fp ) );
att:save.c:                  ch->pcdata->killed[killcnt].vnum = fread_number( fp );
att:save.c:                  ch->pcdata->killed[killcnt++].count = fread_number( fp );
att:save.c:                     KEY( "Lck", ch->pcdata->lck, fread_number( fp ) );
att:save.c:                     KEY( "Lckplus", ch->pcdata->lckplus, fread_number( fp ) );
att:save.c:                   KEY( "Matt", ch->pcdata->matt, fread_number( fp ) );
att:save.c:                   KEY( "Mdef", ch->pcdata->mdef, fread_number( fp ) );
att:save.c:                   KEY( "Mattplus", ch->pcdata->mattplus, fread_number( fp ) );
att:save.c:                   KEY( "Mdefplus", ch->pcdata->mdefplus, fread_number( fp ) );
att:save.c:                   KEY( "Mlevel", ch->pcdata->mlevel, fread_number( fp ) );
att:save.c:            KEY( "MDeaths", ch->pcdata->mdeaths, fread_number( fp ) );
att:save.c:            KEY( "MGlory", ch->pcdata->quest_accum, fread_number( fp ) );
att:save.c:            KEY( "Minsnoop", ch->pcdata->min_snoop, fread_number( fp ) );
att:save.c:            KEY( "MKills", ch->pcdata->mkills, fread_number( fp ) );
att:save.c:               ch->pcdata->m_range_lo = fread_number( fp );
att:save.c:               ch->pcdata->m_range_hi = fread_number( fp );
att:save.c:               CREATE( ch->pcdata->nuisance, NUISANCE_DATA, 1 );
att:save.c:               ch->pcdata->nuisance->set_time = fread_number( fp );
att:save.c:               ch->pcdata->nuisance->max_time = fread_number( fp );
att:save.c:               ch->pcdata->nuisance->flags = fread_number( fp );
att:save.c:               ch->pcdata->nuisance->power = 1;
att:save.c:               CREATE( ch->pcdata->nuisance, NUISANCE_DATA, 1 );
att:save.c:               ch->pcdata->nuisance->set_time = fread_number( fp );
att:save.c:               ch->pcdata->nuisance->max_time = fread_number( fp );
att:save.c:               ch->pcdata->nuisance->flags = fread_number( fp );
att:save.c:               ch->pcdata->nuisance->power = fread_number( fp );
att:save.c:            KEY( "Outcast_time", ch->pcdata->outcast_time, fread_number( fp ) );
att:save.c:               ch->pcdata->o_range_lo = fread_number( fp );
att:save.c:               ch->pcdata->o_range_hi = fread_number( fp );
att:save.c:            KEY( "Pagerlen", ch->pcdata->pagerlen, fread_number( fp ) );
att:save.c:            KEY( "Password", ch->pcdata->pwd, fread_string_nohash( fp ) );
att:save.c:            KEY( "PDeaths", ch->pcdata->pdeaths, fread_number( fp ) );
att:save.c:            KEY( "PKills", ch->pcdata->pkills, fread_number( fp ) );
att:save.c:            KEY( "Prompt", ch->pcdata->prompt, fread_string( fp ) );
att:save.c:            KEY( "Rank", ch->pcdata->rank, fread_string_nohash( fp ) );
att:save.c:            KEY( "Restore_time", ch->pcdata->restore_time, fread_number( fp ) );
att:save.c:               ch->pcdata->r_range_lo = fread_number( fp );
att:save.c:               ch->pcdata->r_range_hi = fread_number( fp );
att:save.c:                   KEY( "Str", ch->pcdata->str, fread_number( fp ) );
att:save.c:                   KEY( "Strplus", ch->pcdata->strplus, fread_number( fp ) );
att:save.c:                  ch->pcdata->prev_site = STRALLOC( fread_word( fp ) );
att:save.c:                  ch_printf( ch, "Last connected from: %s\r\n", ch->pcdata->prev_site );
att:save.c:                     ch->pcdata->learned[sn] = value;
att:save.c:                           ch->pcdata->learned[sn] = 0;
att:save.c:                     ch->pcdata->learned[sn] = value;
att:save.c:                           ch->pcdata->learned[sn] = 0;
att:save.c:               if( !ch->pcdata->pwd )
att:save.c:                  ch->pcdata->pwd = str_dup( "" );
att:save.c:               if( !ch->pcdata->bamfin )
att:save.c:                  ch->pcdata->bamfin = str_dup( "" );
att:save.c:               if( !ch->pcdata->bamfout )
att:save.c:                  ch->pcdata->bamfout = str_dup( "" );
att:save.c:               if( !ch->pcdata->bio )
att:save.c:                  ch->pcdata->bio = STRALLOC( "" );
att:save.c:               if( !ch->pcdata->rank )
att:save.c:                  ch->pcdata->rank = str_dup( "" );
att:save.c:               if( !ch->pcdata->bestowments )
att:save.c:                  ch->pcdata->bestowments = str_dup( "" );
att:save.c:               if( !ch->pcdata->title )
att:save.c:                  ch->pcdata->title = STRALLOC( "" );
att:save.c:               if( !ch->pcdata->customclass )
att:save.c:                  ch->pcdata->customclass = STRALLOC( "" );
att:save.c:               if( !ch->pcdata->cpose )
att:save.c:                  ch->pcdata->cpose = STRALLOC( "" );
att:save.c:               if( !ch->pcdata->hometown )
att:save.c:                  ch->pcdata->hometown = STRALLOC( "" );
att:save.c:               if( !ch->pcdata->homepage )
att:save.c:                  ch->pcdata->homepage = str_dup( "" );
att:save.c:               if( !ch->pcdata->authed_by )
att:save.c:                  ch->pcdata->authed_by = STRALLOC( "" );
att:save.c:               if( !ch->pcdata->prompt )
att:save.c:                  ch->pcdata->prompt = STRALLOC( "" );
att:save.c:               if( !ch->pcdata->fprompt )
att:save.c:                  ch->pcdata->fprompt = STRALLOC( "" );
att:save.c:                  ch->pcdata->killed[killcnt].vnum = 0;
att:save.c:                  CREATE( ch->pcdata->tell_history, const char *, 26 );
att:save.c:                     ch->pcdata->tell_history[i] = NULL;
att:save.c:               if( !ch->pcdata->prompt )
att:save.c:                  ch->pcdata->prompt = STRALLOC( "" );
att:save.c:               if( ch->pcdata->clan )
att:save.c:                     KEY( "Tier", ch->pcdata->tier, fread_number( fp ) );
att:save.c:                     ch->pcdata->learned[sn] = value;
att:save.c:                           ch->pcdata->learned[sn] = 0;
att:save.c:            KEY( "Timezone", ch->pcdata->timezone, fread_number( fp )); 
att:save.c:               ch->pcdata->title = fread_string( fp );
att:save.c:               if( isalpha( ch->pcdata->title[0] ) || isdigit( ch->pcdata->title[0] ) )
att:save.c:                  snprintf( buf, MAX_STRING_LENGTH, " %s", ch->pcdata->title );
att:save.c:                  if( ch->pcdata->title )
att:save.c:                     STRFREE( ch->pcdata->title );
att:save.c:                  ch->pcdata->title = STRALLOC( buf );
att:save.c:                     ch->pcdata->learned[sn] = value;
att:save.c:                           ch->pcdata->learned[sn] = 0;
att:save.c:            KEY( "WizInvis", ch->pcdata->wizinvis, fread_number( fp ) );
att:save.c:   if( IS_NPC( ch ) || !ch->pcdata->pet )
att:save.c:   mob = ch->pcdata->pet;
att:skills.c:   if( ch->pcdata->clan && ch->pcdata->clan == vch->pcdata->clan )
att:skills.c:         if( ch->pcdata->condition[COND_BLOODTHIRST] < blood )
att:skills.c:         if( ch->pcdata->condition[COND_BLOODTHIRST] < blood )
att:skills.c:   if( IS_NPC( ch ) || ch->pcdata->learned[sn] <= 0 )
att:skills.c:   if( ch->pcdata->learned[sn] < adept )
att:skills.c:      schance = ch->pcdata->learned[sn] + ( 5 * skill_table[sn]->difficulty );
att:skills.c:      ch->pcdata->learned[sn] = UMIN( adept, ch->pcdata->learned[sn] + learn );
att:skills.c:      if( ch->pcdata->learned[sn] == adept ) /* fully learned! */
att:skills.c:   if( IS_NPC( ch ) || ch->pcdata->learned[sn] <= 0 )
att:skills.c:   if( ch->pcdata->learned[sn] < adept )
att:skills.c:      schance = ch->pcdata->learned[sn] + ( 5 * skill_table[sn]->difficulty );
att:skills.c:      ch->pcdata->learned[sn] = UMIN( adept, ch->pcdata->learned[sn] + learn );
att:skills.c:      if( ch->pcdata->learned[sn] == adept ) /* fully learned! */
att:skills.c:   if( IS_NPC( ch ) || ch->pcdata->learned[sn] <= 0 )
att:skills.c:   schance = ch->pcdata->learned[sn] + ( 5 * skill_table[sn]->difficulty );
att:skills.c:   if( ch->pcdata->learned[sn] < ( adept - 1 ) )
att:skills.c:      ch->pcdata->learned[sn] = UMIN( adept, ch->pcdata->learned[sn] + 1 );
att:skills.c:	    (IS_NPC(ch) ? 80 : ch->pcdata->learned[gsn_dig]) )
att:skills.c:   if( ch->pcdata->condition[COND_BLOODTHIRST] < 10 )
att:skills.c:          && ch->fighting && ch->pcdata->condition[COND_BLOODTHIRST] < ( 10 + ch->level ) )
att:skills.c:                               ( 10 + ch->level ) - ch->pcdata->condition[COND_BLOODTHIRST] ) );
att:skills.c:         if( ch->pcdata->condition[COND_FULL] <= 37 )
att:skills.c:          && ch->fighting && ch->pcdata->condition[COND_BLOODTHIRST] < ( 10 + ch->level ) )
att:skills.c:   if( IS_PKILL( ch ) && ch->pcdata->condition[COND_BLOODTHIRST] > 22 )
att:skills.c:   if( !IS_NPC( ch ) && ch->pcdata->clan )
att:skills.c:      location = get_room_index( ch->pcdata->clan->recall );
att:skills.c:   if( !IS_NPC( ch ) && !location && ch->level >= 5 && IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
att:skills.c:   if( !IS_NPC( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_GAG ) )   /* SB */
att:skills.c:   if( !IS_NPC( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_GAG ) )
att:skills.c:   if( !IS_NPC( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_GAG ) )
att:skills.c:   if( !IS_NPC( ch ) && ( ( get_curr_dex( ch ) < 17 ) || ch->pcdata->condition[COND_DRUNK] > 0 ) )
att:skills.c:            || !IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
att:skills.c:   if( skill_table[gsn]->guild == 99 && !IS_NPC( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
att:track.c:   if( !IS_NPC( ch ) && ch->pcdata->learned[gsn_track] <= 0 )
att:update.c:   add_hp = UMAX( 1, add_hp ) + ( ch->pcdata->lck * .3 );
att:update.c:   add_mana = UMAX( 0, add_mana ) + ( (ch->pcdata->lck * .4) + ch->pcdata->intel );
att:update.c:   add_move = UMAX( 10, add_move ) + (( ch->pcdata->lck * .5 ) + ch->pcdata->dex );
att:update.c:   ch->pcdata->str += 1;
att:update.c:   ch->pcdata->intel += 1;
att:update.c:   ch->pcdata->dex += 1;
att:update.c:   ch->pcdata->lck += 1;
att:update.c:   ch->pcdata->def += 1;
att:update.c:   ch->pcdata->mdef += 1;
att:update.c:   ch->pcdata->att += 1;
att:update.c:         if( ch->pcdata->condition[COND_BLOODTHIRST] <= 1 )
att:update.c:         else if( ch->pcdata->condition[COND_BLOODTHIRST] >= ( 8 + ch->level ) )
att:update.c:      if( ch->pcdata->condition[COND_FULL] == 0 )
att:update.c:      if( ch->pcdata->condition[COND_THIRST] == 0 )
att:update.c:      if( ch->pcdata->condition[COND_FULL] == 0 )
att:update.c:      if( ch->pcdata->condition[COND_THIRST] == 0 )
att:update.c:         if( ch->pcdata->condition[COND_BLOODTHIRST] <= 1 )
att:update.c:         else if( ch->pcdata->condition[COND_BLOODTHIRST] >= ( 8 + ch->level ) )
att:update.c:      if( ch->pcdata->condition[COND_FULL] == 0 )
att:update.c:      if( ch->pcdata->condition[COND_THIRST] == 0 )
att:update.c:   condition = ch->pcdata->condition[iCond];
att:update.c:      ch->pcdata->condition[iCond] = URANGE( 0, condition + value, 10 + ch->level );
att:update.c:      ch->pcdata->condition[iCond] = URANGE( 0, condition + value, 48 );
att:update.c:   if( ch->pcdata->condition[iCond] == 0 )
att:update.c:   if( ch->pcdata->condition[iCond] == 1 )
att:update.c:   if( ch->pcdata->condition[iCond] == 2 )
att:update.c:   if( ch->pcdata->condition[iCond] == 3 )
att:update.c:      if( !IS_NPC( ch ) && ch->pcdata->nuisance )
att:update.c:         if( ch->pcdata->nuisance->flags < MAX_NUISANCE_STAGE )
att:update.c:            temp = ch->pcdata->nuisance->max_time - ch->pcdata->nuisance->set_time;
att:update.c:            temp *= ch->pcdata->nuisance->flags;
att:update.c:            temp += ch->pcdata->nuisance->set_time;
att:update.c:               ++ch->pcdata->nuisance->flags;
att:update.c:               SET_BIT( ch->pcdata->flags, PCFLAG_IDLE );
att:update.c:         if( ch->pcdata->condition[COND_DRUNK] > 8 )
att:update.c:            worsen_mental_state( ch, ch->pcdata->condition[COND_DRUNK] / 8 );
att:update.c:         if( ch->pcdata->condition[COND_FULL] > 1 )
att:update.c:         if( ch->pcdata->condition[COND_THIRST] > 1 )
att:update.c:         if( CAN_PKILL( ch ) && ch->pcdata->condition[COND_THIRST] - 9 > 10 )
att:update.c:         if( !IS_NPC( ch ) && ch->pcdata->nuisance )
att:update.c:            value = ( ( 0 - ch->pcdata->nuisance->flags ) * ch->pcdata->nuisance->power );
att:update.c:      if( !IS_NPC( ch ) && !IS_IMMORTAL( ch ) && ch->pcdata->release_date > 0 && ch->pcdata->release_date <= current_time )
att:update.c:         if( ch->pcdata->clan )
att:update.c:            location = get_room_index( ch->pcdata->clan->recall );
att:update.c:         STRFREE( ch->pcdata->helled_by );
att:update.c:         ch->pcdata->helled_by = NULL;
att:update.c:         ch->pcdata->release_date = 0;
att:update.c:   if( IS_NPC( ch ) || ch->pcdata->condition[COND_DRUNK] <= 0 )
att:update.c:   drunk = ch->pcdata->condition[COND_DRUNK];
bank.c:      int total = ch->pcdata->balance + ch->gold;
bank.c:	       ch->pcdata->balance, (ch->pcdata->balance == 1) ? "" : "s");
bank.c:      ch->pcdata->balance += amount;
bank.c:	amount = ch->pcdata->balance;
bank.c:      if (amount > ch->pcdata->balance)
bank.c:      ch->pcdata->balance -= amount;
bank.c:	amount = ch->pcdata->balance;
bank.c:      if (amount > ch->pcdata->balance)
bank.c:      ch->pcdata->balance -= amount;
bank.c:      victim->pcdata->balance += amount;
boards.c:      if( ch->pcdata->clan && !str_cmp( ch->pcdata->clan->name, board->read_group ) )
boards.c:      if( ch->pcdata->council && !str_cmp( ch->pcdata->council->name, board->read_group ) )
boards.c:      if( ch->pcdata->clan && !str_cmp( ch->pcdata->clan->name, board->post_group ) )
boards.c:      if( ch->pcdata->council && !str_cmp( ch->pcdata->council->name, board->post_group ) )
build.c:   if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
build.c:   if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
build.c:   if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
build.c:   if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
build.c:   if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
build.c:      if( !IS_NPC( fch ) && get_trust( ch ) < get_trust( fch ) && IS_SET( fch->pcdata->flags, PCFLAG_DND ) )
build.c:      if( get_trust( ch ) < LEVEL_CREATOR || vnum < 1 || IS_NPC( ch ) || !ch->pcdata->area )
build.c:         if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
build.c:      location = make_room( vnum, ch->pcdata->area );
build.c:    if ( !IS_SET( ch->pcdata->flags, PCFLAG_BUILDWALK ) && !IS_NPC( ch ) )
build.c:         (ch->pcdata && ch->pcdata->bamfout[0] != '\0')
build.c:         ? ch->pcdata->bamfout : "leaves in a swirling mist.", TO_ROOM);
build.c:    if ( !IS_SET( ch->pcdata->flags, PCFLAG_BUILDWALK ) && !IS_NPC( ch ) )
build.c:         (ch->pcdata && ch->pcdata->bamfin[0] != '\0')
build.c:         ? ch->pcdata->bamfin : "appears in a swirling mist.", TO_ROOM);
build.c:         if( ch->pcdata && ch->pcdata->subprompt )
build.c:            STRFREE( ch->pcdata->subprompt );
build.c:            ch->pcdata->subprompt = NULL;
build.c:         if( ch->pcdata->subprompt )
build.c:            STRFREE( ch->pcdata->subprompt );
build.c:         ch->pcdata->subprompt = STRALLOC( buf );
build.c:	victim->pcdata->str = value;
build.c:	victim->pcdata->intel = value;
build.c:	victim->pcdata->dex = value;
build.c:	victim->pcdata->dex = value;
build.c:	victim->pcdata->lck = value;
build.c:      victim->pcdata->ap = value;
build.c:      victim->pcdata->tier = value;
build.c:      DISPOSE( victim->pcdata->pwd );
build.c:      victim->pcdata->pwd = str_dup( pwdnew );
build.c:      DISPOSE( victim->pcdata->rank );
build.c:         victim->pcdata->rank = str_dup( "" );
build.c:         victim->pcdata->rank = str_dup( argument );
build.c:      victim->pcdata->quest_number = value;
build.c:      victim->pcdata->quest_accum = value;
build.c:      victim->pcdata->quest_curr = value;
build.c:      victim->pcdata->favor = value;
build.c:      victim->pcdata->condition[COND_THIRST] = value;
build.c:      victim->pcdata->condition[COND_DRUNK] = value;
build.c:      victim->pcdata->condition[COND_FULL] = value;
build.c:      victim->pcdata->condition[COND_BLOODTHIRST] = value;
build.c:         victim->pcdata->min_snoop = value;
build.c:         if( victim->pcdata->clan == NULL )
build.c:            --victim->pcdata->clan->members;
build.c:            if( victim->pcdata->clan->members < 0 )
build.c:               victim->pcdata->clan->members = 0;
build.c:            remove_roster( victim->pcdata->clan, victim->name );
build.c:            if( !str_cmp( victim->name, victim->pcdata->clan->leader ) )
build.c:               STRFREE( victim->pcdata->clan->leader );
build.c:               victim->pcdata->clan->leader = STRALLOC( "" );
build.c:            if( !str_cmp( victim->name, victim->pcdata->clan->number1 ) )
build.c:               STRFREE( victim->pcdata->clan->number1 );
build.c:               victim->pcdata->clan->number1 = STRALLOC( "" );
build.c:            if( !str_cmp( victim->name, victim->pcdata->clan->number2 ) )
build.c:               STRFREE( victim->pcdata->clan->number2 );
build.c:               victim->pcdata->clan->number2 = STRALLOC( "" );
build.c:            if( !str_cmp( victim->name, victim->pcdata->clan->deity ) )
build.c:               STRFREE( victim->pcdata->clan->deity );
build.c:               victim->pcdata->clan->deity = STRALLOC( "" );
build.c:            save_clan( victim->pcdata->clan );
build.c:         remove_roster( victim->pcdata->clan, victim->name );
build.c:         STRFREE( victim->pcdata->clan_name );
build.c:         victim->pcdata->clan_name = STRALLOC( "" );
build.c:         victim->pcdata->clan = NULL;
build.c:      if( victim->pcdata->clan != NULL && !IS_IMMORTAL( victim ) )
build.c:         --victim->pcdata->clan->members;
build.c:         if( victim->pcdata->clan->members < 0 )
build.c:            victim->pcdata->clan->members = 0;
build.c:         remove_roster( victim->pcdata->clan, victim->name );
build.c:         if( !str_cmp( victim->name, victim->pcdata->clan->leader ) )
build.c:            STRFREE( victim->pcdata->clan->leader );
build.c:            victim->pcdata->clan->leader = STRALLOC( "" );
build.c:         if( !str_cmp( victim->name, victim->pcdata->clan->number1 ) )
build.c:            STRFREE( victim->pcdata->clan->number1 );
build.c:            victim->pcdata->clan->number1 = STRALLOC( "" );
build.c:         if( !str_cmp( victim->name, victim->pcdata->clan->number2 ) )
build.c:            STRFREE( victim->pcdata->clan->number2 );
build.c:            victim->pcdata->clan->number2 = STRALLOC( "" );
build.c:         if( !str_cmp( victim->name, victim->pcdata->clan->deity ) )
build.c:            STRFREE( victim->pcdata->clan->deity );
build.c:            victim->pcdata->clan->deity = STRALLOC( "" );
build.c:         save_clan( victim->pcdata->clan );
build.c:      STRFREE( victim->pcdata->clan_name );
build.c:      victim->pcdata->clan_name = QUICKLINK( clan->name );
build.c:      victim->pcdata->clan = clan;
build.c:         add_roster( victim->pcdata->clan, victim->name, victim->Class, victim->level, victim->pcdata->mkills,
build.c:                     victim->pcdata->mdeaths );
build.c:         ++victim->pcdata->clan->members;
build.c:         save_clan( victim->pcdata->clan );
build.c:         if( victim->pcdata->deity )
build.c:            --victim->pcdata->deity->worshippers;
build.c:            if( victim->pcdata->deity->worshippers < 0 )
build.c:               victim->pcdata->deity->worshippers = 0;
build.c:            save_deity( victim->pcdata->deity );
build.c:         STRFREE( victim->pcdata->deity_name );
build.c:         victim->pcdata->deity = NULL;
build.c:      if( victim->pcdata->deity )
build.c:         --victim->pcdata->deity->worshippers;
build.c:         if( victim->pcdata->deity->worshippers < 0 )
build.c:            victim->pcdata->deity->worshippers = 0;
build.c:         save_deity( victim->pcdata->deity );
build.c:      STRFREE( victim->pcdata->deity_name );
build.c:      victim->pcdata->deity_name = QUICKLINK( deity->name );
build.c:      victim->pcdata->deity = deity;
build.c:         if( victim->pcdata->council )
build.c:            --victim->pcdata->council->members;
build.c:            if( victim->pcdata->council->members < 0 )
build.c:               victim->pcdata->council->members = 0;
build.c:            if( !str_cmp( victim->name, victim->pcdata->council->head ) )
build.c:               STRFREE( victim->pcdata->council->head );
build.c:               victim->pcdata->council->head = STRALLOC( "" );
build.c:            if( victim->pcdata->council->head2 != NULL && !str_cmp( victim->name, victim->pcdata->council->head2 ) )
build.c:               STRFREE( victim->pcdata->council->head2 );
build.c:               victim->pcdata->council->head2 = NULL;
build.c:            save_council( victim->pcdata->council );
build.c:         STRFREE( victim->pcdata->council_name );
build.c:         victim->pcdata->council_name = STRALLOC( "" );
build.c:         victim->pcdata->council = NULL;
build.c:      if( victim->pcdata->council )
build.c:         --victim->pcdata->council->members;
build.c:         if( victim->pcdata->council->members < 0 )
build.c:            victim->pcdata->council->members = 0;
build.c:         if( !str_cmp( victim->name, victim->pcdata->council->head ) )
build.c:            STRFREE( victim->pcdata->council->head );
build.c:            victim->pcdata->council->head = STRALLOC( "" );
build.c:         if( victim->pcdata->council->head2 != NULL && !str_cmp( victim->name, victim->pcdata->council->head2 ) )
build.c:            STRFREE( victim->pcdata->council->head2 );
build.c:            victim->pcdata->council->head2 = NULL;
build.c:         save_council( victim->pcdata->council );
build.c:      STRFREE( victim->pcdata->council_name );
build.c:      victim->pcdata->council_name = QUICKLINK( council->name );
build.c:      victim->pcdata->council = council;
build.c:      if( !victim->pcdata->area )
build.c:      if( !IS_SET( victim->pcdata->area->status, AREA_LOADED ) )
build.c:         SET_BIT( victim->pcdata->area->status, AREA_LOADED );
build.c:         REMOVE_BIT( victim->pcdata->area->status, AREA_LOADED );
build.c:      if( IS_SET( victim->pcdata->flags, PCFLAG_DEADLY ) )
build.c:         REMOVE_BIT( victim->pcdata->flags, PCFLAG_DEADLY );
build.c:         SET_BIT( victim->pcdata->flags, PCFLAG_DEADLY );
build.c:      if( victim->pcdata->clan && !IS_IMMORTAL( victim ) )
build.c:         remove_roster( victim->pcdata->clan, victim->name );
build.c:         if( victim->pcdata->clan->clan_type == CLAN_GUILD )
build.c:               if( skill_table[sn]->guild == victim->pcdata->clan->Class && skill_table[sn]->name != NULL )
build.c:                  victim->pcdata->learned[sn] = 0;
build.c:         --victim->pcdata->clan->members;
build.c:         if( !str_cmp( victim->name, victim->pcdata->clan->leader ) )
build.c:            STRFREE( victim->pcdata->clan->leader );
build.c:            victim->pcdata->clan->leader = STRALLOC( "" );
build.c:         if( !str_cmp( victim->name, victim->pcdata->clan->number1 ) )
build.c:            STRFREE( victim->pcdata->clan->number1 );
build.c:            victim->pcdata->clan->number1 = STRALLOC( "" );
build.c:         if( !str_cmp( victim->name, victim->pcdata->clan->number2 ) )
build.c:            STRFREE( victim->pcdata->clan->number2 );
build.c:            victim->pcdata->clan->number2 = STRALLOC( "" );
build.c:         save_clan( victim->pcdata->clan );
build.c:         STRFREE( victim->pcdata->clan_name );
build.c:         victim->pcdata->clan_name = STRALLOC( "" );
build.c:         victim->pcdata->clan = NULL;
build.c:         if( ch->pcdata && ch->pcdata->subprompt )
build.c:            STRFREE( ch->pcdata->subprompt );
build.c:            ch->pcdata->subprompt = NULL;
build.c:         if( ch->pcdata->subprompt )
build.c:            STRFREE( ch->pcdata->subprompt );
build.c:         ch->pcdata->subprompt = STRALLOC( buf );
build.c:                && get_trust( ch ) < LEVEL_GREATER && !is_name( "protoflag", ch->pcdata->bestowments ) )
build.c:   if( !ch->pcdata->area )
build.c:      pArea = ch->pcdata->area;
build.c:      location->area = ch->pcdata->area;
build.c:   pArea = ch->pcdata->area;
build.c:         location->area = ch->pcdata->area;
build.c:   if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
build.c:         if( ch->pcdata && ch->pcdata->subprompt )
build.c:            STRFREE( ch->pcdata->subprompt );
build.c:            ch->pcdata->subprompt = NULL;
build.c:         if( ch->pcdata->subprompt )
build.c:            STRFREE( ch->pcdata->subprompt );
build.c:         ch->pcdata->subprompt = STRALLOC( "<&CRedit &W#%r&w> %i" );
build.c:    if ( !IS_SET( ch->pcdata->flags, PCFLAG_BUILDWALK ) && !IS_NPC( ch ) )
build.c:      if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
build.c:      if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
build.c:   if( get_trust( ch ) > LEVEL_IMMORTAL && ch->pcdata->r_range_lo && ch->pcdata->r_range_hi )
build.c:      tarea = ch->pcdata->area;
build.c:      tarea->low_r_vnum = ch->pcdata->r_range_lo;
build.c:      tarea->low_o_vnum = ch->pcdata->o_range_lo;
build.c:      tarea->low_m_vnum = ch->pcdata->m_range_lo;
build.c:      tarea->hi_r_vnum = ch->pcdata->r_range_hi;
build.c:      tarea->hi_o_vnum = ch->pcdata->o_range_hi;
build.c:      tarea->hi_m_vnum = ch->pcdata->m_range_hi;
build.c:      ch->pcdata->area = tarea;
build.c:      ch->pcdata->area = NULL;
build.c:      if( !ch->pcdata->area )
build.c:       || ( is_name( buf, ch->pcdata->bestowments )
build.c:       || ( ch->pcdata->council && is_name( buf, ch->pcdata->council->powers ) ) )
build.c:                || is_name( tmp->filename, ch->pcdata->bestowments )
build.c:                || ( ch->pcdata->council
build.c:                     && ( is_name( buf, ch->pcdata->council->powers )
build.c:                          || is_name( "aassign", ch->pcdata->council->powers ) ) ) )
build.c:   ch->pcdata->area = tarea;
build.c:   if( IS_NPC( ch ) || get_trust( ch ) < LEVEL_CREATOR || !ch->pcdata || ( argument[0] == '\0' && !ch->pcdata->area ) )
build.c:      tarea = ch->pcdata->area;
build.c:   if( IS_NPC( ch ) || get_trust( ch ) < LEVEL_CREATOR || !ch->pcdata || ( argument[0] == '\0' && !ch->pcdata->area ) )
build.c:      tarea = ch->pcdata->area;
build.c:            if( d->character && d->character->pcdata && d->character->pcdata->area == tarea )
build.c:               d->character->pcdata->area = NULL;
build.c:               d->character->pcdata->r_range_lo = 0;
build.c:               d->character->pcdata->r_range_hi = 0;
build.c:               d->character->pcdata->o_range_lo = 0;
build.c:               d->character->pcdata->o_range_hi = 0;
build.c:               d->character->pcdata->m_range_lo = 0;
build.c:               d->character->pcdata->m_range_hi = 0;
build.c:       || ( !ch->pcdata->area && get_trust( ch ) < LEVEL_GREATER ) )
build.c:   tarea = ch->pcdata->area;
build.c:       || ( !ch->pcdata->area && get_trust( ch ) < LEVEL_GREATER ) )
build.c:   tarea = ch->pcdata->area;
build.c:       || ( !ch->pcdata->area && get_trust( ch ) < LEVEL_GREATER ) )
build.c:   tarea = ch->pcdata->area;
build.c:       && ( obj->vnum < ch->pcdata->area->low_o_vnum || obj->vnum > ch->pcdata->area->hi_o_vnum ) )
build.c:       && ( mob->vnum < ch->pcdata->area->low_m_vnum || mob->vnum > ch->pcdata->area->hi_m_vnum ) )
build.c:       || ( !ch->pcdata->area && get_trust( ch ) < LEVEL_GREATER ) )
build.c:   tarea = ch->pcdata->area;
calendar.c:   ch->pcdata->timezone = i;
calendar.c:      bug( "%s", "pcdata->save_timedata: fopen" );
calendar.c:   ch_printf( ch, "&wYour local time        :  &W %s&D\r\n", c_time( current_time, ch->pcdata->timezone ) );
calendar.c:      if( day == ch->pcdata->day + 1 && time_info.month == ch->pcdata->month )
clans.c:   if( IS_NPC( ch ) || !ch->pcdata->clan )
clans.c:   for( roster = ch->pcdata->clan->first_member; roster; roster = roster->next )
clans.c:         roster->kills = ch->pcdata->mkills;
clans.c:         roster->deaths = ch->pcdata->mdeaths;
clans.c:         save_clan( ch->pcdata->clan );
clans.c:   add_roster( ch->pcdata->clan, ch->name, ch->Class, ch->level, ch->pcdata->mkills, ch->pcdata->mdeaths );
clans.c:   save_clan( ch->pcdata->clan );
clans.c:   if( IS_NPC( ch ) || !ch->pcdata->clan )
clans.c:   clan = ch->pcdata->clan;
clans.c:   if( IS_NPC( ch ) || !ch->pcdata->clan )
clans.c:   clan = ch->pcdata->clan;
clans.c:   if( ( ch->pcdata && ch->pcdata->bestowments
clans.c:         && is_name( "caninduct", ch->pcdata->bestowments ) )
clans.c:   if( victim->pcdata->clan )
clans.c:      if( victim->pcdata->clan->clan_type == CLAN_ORDER )
clans.c:         if( victim->pcdata->clan == clan )
clans.c:      else if( victim->pcdata->clan->clan_type == CLAN_GUILD )
clans.c:         if( victim->pcdata->clan == clan )
clans.c:         if( victim->pcdata->clan == clan )
clans.c:      SET_BIT( victim->pcdata->flags, PCFLAG_DEADLY );
clans.c:            victim->pcdata->learned[sn] = GET_ADEPT( victim, sn );
clans.c:   victim->pcdata->clan = clan;
clans.c:   STRFREE( victim->pcdata->clan_name );
clans.c:   victim->pcdata->clan_name = QUICKLINK( clan->name );
clans.c:   add_roster( clan, victim->name, victim->Class, victim->level, victim->pcdata->mkills, victim->pcdata->mdeaths );
clans.c:   if( IS_NPC( ch ) || !ch->pcdata->council )
clans.c:   council = ch->pcdata->council;
clans.c:   if( victim->pcdata->council )
clans.c:   victim->pcdata->council = council;
clans.c:   STRFREE( victim->pcdata->council_name );
clans.c:   victim->pcdata->council_name = QUICKLINK( council->name );
clans.c:   if( IS_NPC( ch ) || !ch->pcdata->clan )
clans.c:   clan = ch->pcdata->clan;
clans.c:   if( ( ch->pcdata && ch->pcdata->bestowments
clans.c:         && is_name( "canoutcast", ch->pcdata->bestowments ) )
clans.c:      if( ch->pcdata->clan->clan_type == CLAN_ORDER )
clans.c:      else if( ch->pcdata->clan->clan_type == CLAN_GUILD )
clans.c:   if( victim->pcdata->clan != ch->pcdata->clan )
clans.c:      if( ch->pcdata->clan->clan_type == CLAN_ORDER )
clans.c:      else if( ch->pcdata->clan->clan_type == CLAN_GUILD )
clans.c:         if( skill_table[sn]->guild == victim->pcdata->clan->Class && skill_table[sn]->name != NULL )
clans.c:            victim->pcdata->learned[sn] = 0;
clans.c:   if( !str_cmp( victim->name, ch->pcdata->clan->number1 ) )
clans.c:      STRFREE( ch->pcdata->clan->number1 );
clans.c:      ch->pcdata->clan->number1 = STRALLOC( "" );
clans.c:   if( !str_cmp( victim->name, ch->pcdata->clan->number2 ) )
clans.c:      STRFREE( ch->pcdata->clan->number2 );
clans.c:      ch->pcdata->clan->number2 = STRALLOC( "" );
clans.c:   if( !str_cmp( victim->name, ch->pcdata->clan->deity ) )
clans.c:      STRFREE( ch->pcdata->clan->deity );
clans.c:      ch->pcdata->clan->deity = STRALLOC( "" );
clans.c:   victim->pcdata->clan = NULL;
clans.c:   STRFREE( victim->pcdata->clan_name );
clans.c:   victim->pcdata->clan_name = STRALLOC( "" );
clans.c:   if( IS_NPC( ch ) || !ch->pcdata->council )
clans.c:   council = ch->pcdata->council;
clans.c:   if( victim->pcdata->council != ch->pcdata->council )
clans.c:   if( council->head2 && !str_cmp( victim->name, ch->pcdata->council->head2 ) )
clans.c:      STRFREE( ch->pcdata->council->head2 );
clans.c:      ch->pcdata->council->head2 = NULL;
clans.c:   victim->pcdata->council = NULL;
clans.c:   STRFREE( victim->pcdata->council_name );
clans.c:   victim->pcdata->council_name = STRALLOC( "" );
clans.c:   if( IS_NPC( ch ) || !ch->pcdata->clan )
clans.c:   if( ch->pcdata->clan->clan_type != CLAN_ORDER && ch->pcdata->clan->clan_type != CLAN_GUILD )
clans.c:      snprintf( filename, 256, "%s%s.defeats", CLAN_DIR, ch->pcdata->clan->name );
clans.c:      if( !str_cmp( ch->name, ch->pcdata->clan->leader ) && !str_cmp( argument, "clean" ) )
clans.c:   if( IS_NPC( ch ) || !ch->pcdata->clan )
clans.c:   if( ch->pcdata->clan->clan_type != CLAN_ORDER && ch->pcdata->clan->clan_type != CLAN_GUILD )
clans.c:      snprintf( filename, 256, "%s%s.record", CLAN_DIR, ch->pcdata->clan->name );
clans.c:      if( !str_cmp( ch->name, ch->pcdata->clan->leader ) && !str_cmp( argument, "clean" ) )
clans.c:   if( IS_NPC( ch ) || !IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
clans.c:   if( IS_NPC( victim ) || !IS_SET( victim->pcdata->flags, PCFLAG_DEADLY ) )
clans.c:   if( !xIS_SET( victim->act, PLR_SHOVEDRAG ) && !IS_SET( victim->pcdata->flags, PCFLAG_DEADLY ) )
clans.c:   if( !IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) && IS_SET( victim->pcdata->flags, PCFLAG_DEADLY ) )
clans.c:   if( !IS_SET( victim->pcdata->flags, PCFLAG_DEADLY ) && victim->position > 3 )
clans.c:      if( IS_SET( victim->pcdata->flags, PCFLAG_DEADLY ) && IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
color.c:      if( IS_NPC( ch ) || !IS_SET( ch->pcdata->flags, PCFLAG_PAGERON ) )
comm.c:      log_printf_plus( LOG_COMM, UMAX( sysdata.log_level, ch->level ), "Closing link to %s. (INRoom %d)", ch->pcdata->filename, ( ch->in_room ? ch->in_room->vnum : -1 ) );
comm.c:   if( IS_SET( ch->pcdata->flags, PCFLAG_BUILDWALK ) )
comm.c:   if( !IS_SET( ch->pcdata->flags, PCFLAG_NOINTRO ) )
comm.c:   if( str_cmp( sha256_crypt( argument ), ch->pcdata->pwd ) )
comm.c:   if( check_playing( d, ch->pcdata->filename, TRUE ) )
comm.c:chk = check_reconnect( d, ch->pcdata->filename, TRUE );
comm.c:   mudstrlcpy( buf, ch->pcdata->filename, MAX_STRING_LENGTH );
comm.c:   DISPOSE( ch->pcdata->pwd );
comm.c:   ch->pcdata->pwd = str_dup( pwdnew );
comm.c:   if( str_cmp( sha256_crypt( argument ), ch->pcdata->pwd ) )
comm.c:   ch->pcdata->cpose = str_dup( " is here." );
comm.c:   ch->pcdata->customclass = str_dup( "Adventurer" );
comm.c:   ch->pcdata->str = 4;
comm.c:   ch->pcdata->intel = 3;
comm.c:   ch->pcdata->dex = 4;
comm.c:   ch->pcdata->lck = 2;
comm.c:   ch->pcdata->def = 15;
comm.c:   ch->pcdata->matt = 5;
comm.c:   ch->pcdata->strplus = 0;
comm.c:   ch->pcdata->intplus = 0;
comm.c:   ch->pcdata->dexplus = 0;
comm.c:   ch->pcdata->lckplus = 0;
comm.c:   ch->pcdata->attplus = 0;
comm.c:   ch->pcdata->defplus = 0;
comm.c:   ch->pcdata->mattplus = 0;
comm.c:   ch->pcdata->mlevel = 1;
comm.c:   ch->pcdata->deflevel = 1;
comm.c:   ch->pcdata->attlevel = 1;
comm.c:   ch->pcdata->hometown = str_dup( "Kroridge" );
comm.c:   ch->pcdata->hometown = str_dup( "O'ran Thalore" );
comm.c:   ch->pcdata->hometown = str_dup( "Kimlodar" );
comm.c:   ch->pcdata->hometown = str_dup( "Shireton" );
comm.c:   ch->pcdata->hometown = str_dup( "BeachCastle" );
comm.c:   ch->pcdata->hometown = str_dup( "Calmarnock" );
comm.c:   ch->pcdata->hometown = str_dup( "Tarnstead" );
comm.c:   ch->pcdata->hometown = str_dup( "Dhubrokh" );
comm.c:      SET_BIT( ch->pcdata->flags, PCFLAG_WATCH );
comm.c:      REMOVE_BIT( ch->pcdata->flags, PCFLAG_WATCH );
comm.c:      ch->pcdata->clan = NULL;
comm.c:         ch->pcdata->learned[iLang] = 100;
comm.c:                  ch->pcdata->learned[uLang] = 100;
comm.c:      ch->pcdata->day = time_info.day;
comm.c:      ch->pcdata->month = time_info.month;
comm.c:      ch->pcdata->year = time_info.year - 17;
comm.c:      ch->pcdata->age = 17;
comm.c:      ch->pcdata->age_bonus = 0;
comm.c:         ch->pcdata->auth_state = 0;
comm.c:         SET_BIT( ch->pcdata->flags, PCFLAG_UNAUTHED );
comm.c:   else if( !IS_IMMORTAL( ch ) && ch->pcdata->release_date > 0 && ch->pcdata->release_date > current_time )
comm.c:   if( ch->pcdata->pet )
comm.c:      act( AT_ACTION, "$n returns to $s master from the Void.", ch->pcdata->pet, NULL, ch, TO_NOTVICT );
comm.c:      act( AT_ACTION, "$N returns with you to the realms.", ch, NULL, ch->pcdata->pet, TO_CHAR );
comm.c:   if( str_cmp( sha256_crypt( argument ), ch->pcdata->pwd ) )
comm.c:      if( !IS_NPC( ch ) && ( !fConn || !ch->desc ) && ch->pcdata->filename && !str_cmp( name, ch->pcdata->filename ) )
comm.c:            DISPOSE( d->character->pcdata->pwd );
comm.c:            d->character->pcdata->pwd = str_dup( ch->pcdata->pwd );
comm.c:               ch->pcdata->recent_site = STRALLOC( d->host );
comm.c:          && !str_cmp( name, dold->original ? dold->original->pcdata->filename : dold->character->pcdata->filename ) )
comm.c:            log_printf_plus( LOG_COMM, sysdata.log_level, "%s already connected.", ch->pcdata->filename );
comm.c:            ch->pcdata->recent_site = STRALLOC( d->host );
comm.c:                          ch->pcdata->filename, d->host );
comm.c:   REMOVE_BIT( ch->pcdata->flags, PCFLAG_IDLE );
comm.c:         && ( get_trust(to) < ( ch->pcdata ? ch->pcdata->wizinvis : 0 ) ) ) ) ) )
comm.c:   if( !NOT_AUTHED( ch ) || ch->pcdata->auth_state != 2 )
comm.c:   STRFREE( ch->pcdata->filename );
comm.c:   ch->pcdata->filename = STRALLOC( ucase_argument );
comm.c:   ch->pcdata->auth_state = 0;
comm.c:   if( !IS_NPC( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_HELPSTART ) )
comm.c:   else if( !IS_NPC( ch ) && ch->substate != SUB_NONE && ch->pcdata->subprompt && ch->pcdata->subprompt[0] != '\0' )
comm.c:      prompt = ch->pcdata->subprompt;
comm.c:   else if( IS_NPC( ch ) || ( !ch->fighting && ( !ch->pcdata->prompt || !*ch->pcdata->prompt ) ) )
comm.c:      if( !ch->pcdata->fprompt || !*ch->pcdata->fprompt )
comm.c:         prompt = ch->pcdata->fprompt;
comm.c:      prompt = ch->pcdata->prompt;
comm.c:                     pstat = ch->pcdata->condition[COND_BLOODTHIRST];
comm.c:                     if( IS_SET( ch->pcdata->flags, PCFLAG_DND ) )
comm.c:                               ( IS_NPC( ch ) ? ch->mobinvis : ch->pcdata->wizinvis ) );
comm.c:                            : ( xIS_SET( ch->act, PLR_WIZINVIS ) ? ch->pcdata->wizinvis : 0 ) );
comm.c:   pclines = UMAX( ch->pcdata->pagerlen, 5 ) - 1;
comm.c.backup:      log_printf_plus( LOG_COMM, UMAX( sysdata.log_level, ch->level ), "Closing link to %s. (INRoom %d)", ch->pcdata->filename, ( ch->in_room ? ch->in_room->vnum : -1 ) );
comm.c.backup:   if( !IS_SET( ch->pcdata->flags, PCFLAG_NOINTRO ) )
comm.c.backup:   if( str_cmp( sha256_crypt( argument ), ch->pcdata->pwd ) )
comm.c.backup:   if( check_playing( d, ch->pcdata->filename, TRUE ) )
comm.c.backup:chk = check_reconnect( d, ch->pcdata->filename, TRUE );
comm.c.backup:   mudstrlcpy( buf, ch->pcdata->filename, MAX_STRING_LENGTH );
comm.c.backup:   DISPOSE( ch->pcdata->pwd );
comm.c.backup:   ch->pcdata->pwd = str_dup( pwdnew );
comm.c.backup:   if( str_cmp( sha256_crypt( argument ), ch->pcdata->pwd ) )
comm.c.backup:   ch->pcdata->customclass = str_dup( "Adventurer" );
comm.c.backup:      SET_BIT( ch->pcdata->flags, PCFLAG_WATCH );
comm.c.backup:      REMOVE_BIT( ch->pcdata->flags, PCFLAG_WATCH );
comm.c.backup:      ch->pcdata->clan = NULL;
comm.c.backup:         ch->pcdata->learned[iLang] = 100;
comm.c.backup:                  ch->pcdata->learned[uLang] = 100;
comm.c.backup:      ch->pcdata->day = time_info.day;
comm.c.backup:      ch->pcdata->month = time_info.month;
comm.c.backup:      ch->pcdata->year = time_info.year - 17;
comm.c.backup:      ch->pcdata->age = 17;
comm.c.backup:      ch->pcdata->age_bonus = 0;
comm.c.backup:         ch->pcdata->auth_state = 0;
comm.c.backup:         SET_BIT( ch->pcdata->flags, PCFLAG_UNAUTHED );
comm.c.backup:   else if( !IS_IMMORTAL( ch ) && ch->pcdata->release_date > 0 && ch->pcdata->release_date > current_time )
comm.c.backup:   if( ch->pcdata->pet )
comm.c.backup:      act( AT_ACTION, "$n returns to $s master from the Void.", ch->pcdata->pet, NULL, ch, TO_NOTVICT );
comm.c.backup:      act( AT_ACTION, "$N returns with you to the realms.", ch, NULL, ch->pcdata->pet, TO_CHAR );
comm.c.backup:   if( str_cmp( sha256_crypt( argument ), ch->pcdata->pwd ) )
comm.c.backup:      if( !IS_NPC( ch ) && ( !fConn || !ch->desc ) && ch->pcdata->filename && !str_cmp( name, ch->pcdata->filename ) )
comm.c.backup:            DISPOSE( d->character->pcdata->pwd );
comm.c.backup:            d->character->pcdata->pwd = str_dup( ch->pcdata->pwd );
comm.c.backup:               ch->pcdata->recent_site = STRALLOC( d->host );
comm.c.backup:          && !str_cmp( name, dold->original ? dold->original->pcdata->filename : dold->character->pcdata->filename ) )
comm.c.backup:            log_printf_plus( LOG_COMM, sysdata.log_level, "%s already connected.", ch->pcdata->filename );
comm.c.backup:            ch->pcdata->recent_site = STRALLOC( d->host );
comm.c.backup:                          ch->pcdata->filename, d->host );
comm.c.backup:   REMOVE_BIT( ch->pcdata->flags, PCFLAG_IDLE );
comm.c.backup:         && ( get_trust(to) < ( ch->pcdata ? ch->pcdata->wizinvis : 0 ) ) ) ) ) )
comm.c.backup:   if( !NOT_AUTHED( ch ) || ch->pcdata->auth_state != 2 )
comm.c.backup:   STRFREE( ch->pcdata->filename );
comm.c.backup:   ch->pcdata->filename = STRALLOC( ucase_argument );
comm.c.backup:   ch->pcdata->auth_state = 0;
comm.c.backup:   if( !IS_NPC( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_HELPSTART ) )
comm.c.backup:   else if( !IS_NPC( ch ) && ch->substate != SUB_NONE && ch->pcdata->subprompt && ch->pcdata->subprompt[0] != '\0' )
comm.c.backup:      prompt = ch->pcdata->subprompt;
comm.c.backup:   else if( IS_NPC( ch ) || ( !ch->fighting && ( !ch->pcdata->prompt || !*ch->pcdata->prompt ) ) )
comm.c.backup:      if( !ch->pcdata->fprompt || !*ch->pcdata->fprompt )
comm.c.backup:         prompt = ch->pcdata->fprompt;
comm.c.backup:      prompt = ch->pcdata->prompt;
comm.c.backup:                     pstat = ch->pcdata->condition[COND_BLOODTHIRST];
comm.c.backup:                     if( IS_SET( ch->pcdata->flags, PCFLAG_DND ) )
comm.c.backup:                               ( IS_NPC( ch ) ? ch->mobinvis : ch->pcdata->wizinvis ) );
comm.c.backup:                            : ( xIS_SET( ch->act, PLR_WIZINVIS ) ? ch->pcdata->wizinvis : 0 ) );
comm.c.backup:   pclines = UMAX( ch->pcdata->pagerlen, 5 ) - 1;
comm.c.bak:      log_printf_plus( LOG_COMM, UMAX( sysdata.log_level, ch->level ), "Closing link to %s. (INRoom %d)", ch->pcdata->filename, ( ch->in_room ? ch->in_room->vnum : -1 ) );
comm.c.bak:   if( !IS_SET( ch->pcdata->flags, PCFLAG_NOINTRO ) )
comm.c.bak:   if( str_cmp( sha256_crypt( argument ), ch->pcdata->pwd ) )
comm.c.bak:   if( check_playing( d, ch->pcdata->filename, TRUE ) )
comm.c.bak:chk = check_reconnect( d, ch->pcdata->filename, TRUE );
comm.c.bak:   mudstrlcpy( buf, ch->pcdata->filename, MAX_STRING_LENGTH );
comm.c.bak:   DISPOSE( ch->pcdata->pwd );
comm.c.bak:   ch->pcdata->pwd = str_dup( pwdnew );
comm.c.bak:   if( str_cmp( sha256_crypt( argument ), ch->pcdata->pwd ) )
comm.c.bak:   ch->pcdata->customclass = str_dup( "Adventurer" );
comm.c.bak:      SET_BIT( ch->pcdata->flags, PCFLAG_WATCH );
comm.c.bak:      REMOVE_BIT( ch->pcdata->flags, PCFLAG_WATCH );
comm.c.bak:      ch->pcdata->clan = NULL;
comm.c.bak:         ch->pcdata->learned[iLang] = 100;
comm.c.bak:                  ch->pcdata->learned[uLang] = 100;
comm.c.bak:      ch->pcdata->day = time_info.day;
comm.c.bak:      ch->pcdata->month = time_info.month;
comm.c.bak:      ch->pcdata->year = time_info.year - 17;
comm.c.bak:      ch->pcdata->age = 17;
comm.c.bak:      ch->pcdata->age_bonus = 0;
comm.c.bak:         ch->pcdata->auth_state = 0;
comm.c.bak:         SET_BIT( ch->pcdata->flags, PCFLAG_UNAUTHED );
comm.c.bak:   else if( !IS_IMMORTAL( ch ) && ch->pcdata->release_date > 0 && ch->pcdata->release_date > current_time )
comm.c.bak:   if( ch->pcdata->pet )
comm.c.bak:      act( AT_ACTION, "$n returns to $s master from the Void.", ch->pcdata->pet, NULL, ch, TO_NOTVICT );
comm.c.bak:      act( AT_ACTION, "$N returns with you to the realms.", ch, NULL, ch->pcdata->pet, TO_CHAR );
comm.c.bak:   if( str_cmp( sha256_crypt( argument ), ch->pcdata->pwd ) )
comm.c.bak:      if( !IS_NPC( ch ) && ( !fConn || !ch->desc ) && ch->pcdata->filename && !str_cmp( name, ch->pcdata->filename ) )
comm.c.bak:            DISPOSE( d->character->pcdata->pwd );
comm.c.bak:            d->character->pcdata->pwd = str_dup( ch->pcdata->pwd );
comm.c.bak:               ch->pcdata->recent_site = STRALLOC( d->host );
comm.c.bak:          && !str_cmp( name, dold->original ? dold->original->pcdata->filename : dold->character->pcdata->filename ) )
comm.c.bak:            log_printf_plus( LOG_COMM, sysdata.log_level, "%s already connected.", ch->pcdata->filename );
comm.c.bak:            ch->pcdata->recent_site = STRALLOC( d->host );
comm.c.bak:                          ch->pcdata->filename, d->host );
comm.c.bak:   REMOVE_BIT( ch->pcdata->flags, PCFLAG_IDLE );
comm.c.bak:         && ( get_trust(to) < ( ch->pcdata ? ch->pcdata->wizinvis : 0 ) ) ) ) ) )
comm.c.bak:   if( !NOT_AUTHED( ch ) || ch->pcdata->auth_state != 2 )
comm.c.bak:   STRFREE( ch->pcdata->filename );
comm.c.bak:   ch->pcdata->filename = STRALLOC( ucase_argument );
comm.c.bak:   ch->pcdata->auth_state = 0;
comm.c.bak:   if( !IS_NPC( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_HELPSTART ) )
comm.c.bak:   else if( !IS_NPC( ch ) && ch->substate != SUB_NONE && ch->pcdata->subprompt && ch->pcdata->subprompt[0] != '\0' )
comm.c.bak:      prompt = ch->pcdata->subprompt;
comm.c.bak:   else if( IS_NPC( ch ) || ( !ch->fighting && ( !ch->pcdata->prompt || !*ch->pcdata->prompt ) ) )
comm.c.bak:      if( !ch->pcdata->fprompt || !*ch->pcdata->fprompt )
comm.c.bak:         prompt = ch->pcdata->fprompt;
comm.c.bak:      prompt = ch->pcdata->prompt;
comm.c.bak:                     pstat = ch->pcdata->condition[COND_BLOODTHIRST];
comm.c.bak:                     if( IS_SET( ch->pcdata->flags, PCFLAG_DND ) )
comm.c.bak:                               ( IS_NPC( ch ) ? ch->mobinvis : ch->pcdata->wizinvis ) );
comm.c.bak:                            : ( xIS_SET( ch->act, PLR_WIZINVIS ) ? ch->pcdata->wizinvis : 0 ) );
comm.c.bak:   pclines = UMAX( ch->pcdata->pagerlen, 5 ) - 1;
db.c:      if( ch->pcdata->pet )
db.c:         extract_char( ch->pcdata->pet, TRUE );
db.c:         ch->pcdata->pet = NULL;
db.c:      for( temp = ch->pcdata->first_ignored; temp; temp = next )
db.c:         UNLINK( temp, ch->pcdata->first_ignored, ch->pcdata->last_ignored, next, prev );
db.c:      STRFREE( ch->pcdata->filename );
db.c:      STRFREE( ch->pcdata->deity_name );
db.c:      STRFREE( ch->pcdata->clan_name );
db.c:      STRFREE( ch->pcdata->council_name );
db.c:      if( ch->pcdata->recent_site )
db.c:         STRFREE( ch->pcdata->recent_site );
db.c:      if( ch->pcdata->prev_site )
db.c:         STRFREE( ch->pcdata->prev_site );
db.c:      DISPOSE( ch->pcdata->pwd );   /* no hash */
db.c:      DISPOSE( ch->pcdata->bamfin );   /* no hash */
db.c:      DISPOSE( ch->pcdata->bamfout );  /* no hash */
db.c:      DISPOSE( ch->pcdata->rank );
db.c:      STRFREE( ch->pcdata->title );
db.c:      STRFREE( ch->pcdata->bio );
db.c:      DISPOSE( ch->pcdata->bestowments ); /* no hash */
db.c:      DISPOSE( ch->pcdata->homepage ); /* no hash */
db.c:      STRFREE( ch->pcdata->authed_by );
db.c:      STRFREE( ch->pcdata->prompt );
db.c:      STRFREE( ch->pcdata->fprompt );
db.c:      if( ch->pcdata->helled_by )
db.c:         STRFREE( ch->pcdata->helled_by );
db.c:      if( ch->pcdata->subprompt )
db.c:         STRFREE( ch->pcdata->subprompt );
db.c:      if( ch->pcdata->tell_history )
db.c:            if( ch->pcdata->tell_history[i] )
db.c:               STRFREE( ch->pcdata->tell_history[i] );
db.c:         DISPOSE( ch->pcdata->tell_history );
deity.c:            if( vch->pcdata->deity == deity )
deity.c:               snprintf( buf, MAX_STRING_LENGTH, "&R\r\nYour deity, %s, has met its demise!\r\n", vch->pcdata->deity_name );
deity.c:               xREMOVE_BITS( vch->affected_by, vch->pcdata->deity->affected );
deity.c:               REMOVE_BIT( vch->resistant, vch->pcdata->deity->element );
deity.c:               REMOVE_BIT( vch->susceptible, vch->pcdata->deity->suscept );
deity.c:               vch->pcdata->deity = NULL;
deity.c:               STRFREE( vch->pcdata->deity_name );
deity.c:               vch->pcdata->deity_name = STRALLOC( "" );
deity.c:      if( !ch->pcdata->deity )
deity.c:      --ch->pcdata->deity->worshippers;
deity.c:      if( ch->pcdata->deity->worshippers < 0 )
deity.c:         ch->pcdata->deity->worshippers = 0;
deity.c:      ch->pcdata->favor = -2500;
deity.c:      xREMOVE_BITS( ch->affected_by, ch->pcdata->deity->affected );
deity.c:      REMOVE_BIT( ch->resistant, ch->pcdata->deity->element );
deity.c:      REMOVE_BIT( ch->susceptible, ch->pcdata->deity->suscept );
deity.c:      save_deity( ch->pcdata->deity );
deity.c:      ch->pcdata->deity = NULL;
deity.c:      STRFREE( ch->pcdata->deity_name );
deity.c:      ch->pcdata->deity_name = STRALLOC( "" );
deity.c:   if( ch->pcdata->deity )
deity.c:   STRFREE( ch->pcdata->deity_name );
deity.c:   ch->pcdata->deity_name = QUICKLINK( deity->name );
deity.c:   ch->pcdata->deity = deity;
deity.c:   if( ch->pcdata->favor > deity->affectednum )
deity.c:      xSET_BITS( ch->affected_by, ch->pcdata->deity->affected );
deity.c:   if( ch->pcdata->favor > deity->elementnum )
deity.c:      SET_BIT( ch->resistant, ch->pcdata->deity->element );
deity.c:   if( ch->pcdata->favor < deity->susceptnum )
deity.c:      SET_BIT( ch->susceptible, ch->pcdata->deity->suscept );
deity.c:   act( AT_MAGIC, "Body and soul, you devote yourself to $t!", ch, ch->pcdata->deity_name, NULL, TO_CHAR );
deity.c:   ++ch->pcdata->deity->worshippers;
deity.c:   save_deity( ch->pcdata->deity );
deity.c:   if( IS_NPC( ch ) || !ch->pcdata->deity )
deity.c:   oldfavor = ch->pcdata->favor;
deity.c:      if( ch->pcdata->favor < ch->pcdata->deity->scorpse )
deity.c:                  ch->pcdata->favor -= ch->pcdata->deity->scorpse;
deity.c:      ch->pcdata->favor -= ch->pcdata->deity->scorpse;
deity.c:      if( ch->pcdata->favor < ch->pcdata->deity->susceptnum )
deity.c:         SET_BIT( ch->susceptible, ch->pcdata->deity->suscept );
deity.c:      if( ( oldfavor > ch->pcdata->deity->affectednum &&
deity.c:            ch->pcdata->favor <= ch->pcdata->deity->affectednum ) ||
deity.c:          ( oldfavor > ch->pcdata->deity->elementnum &&
deity.c:            ch->pcdata->favor <= ch->pcdata->deity->elementnum ) ||
deity.c:          ( oldfavor < ch->pcdata->deity->susceptnum && ch->pcdata->favor >= ch->pcdata->deity->susceptnum ) )
deity.c:      if( ch->pcdata->favor < ch->pcdata->deity->savatar )
deity.c:      snprintf( buf, MAX_STRING_LENGTH, victim->short_descr, ch->pcdata->deity->name );
deity.c:      snprintf( buf, MAX_STRING_LENGTH, victim->long_descr, ch->pcdata->deity->name );
deity.c:      snprintf( buf, MAX_STRING_LENGTH, victim->description, ch->pcdata->deity->name );
deity.c:      victim->hit = ch->hit * 6 + ch->pcdata->favor;
deity.c:      victim->alignment = ch->pcdata->deity->alignment;
deity.c:      victim->max_hit = ch->hit * 6 + ch->pcdata->favor;
deity.c:      ch->pcdata->favor -= ch->pcdata->deity->savatar;
deity.c:      if( ch->pcdata->favor < ch->pcdata->deity->susceptnum )
deity.c:         SET_BIT( ch->susceptible, ch->pcdata->deity->suscept );
deity.c:      if( ( oldfavor > ch->pcdata->deity->affectednum &&
deity.c:            ch->pcdata->favor <= ch->pcdata->deity->affectednum ) ||
deity.c:          ( oldfavor > ch->pcdata->deity->elementnum &&
deity.c:            ch->pcdata->favor <= ch->pcdata->deity->elementnum ) ||
deity.c:          ( oldfavor < ch->pcdata->deity->susceptnum && ch->pcdata->favor >= ch->pcdata->deity->susceptnum ) )
deity.c:      if( ch->pcdata->favor < ch->pcdata->deity->sdeityobj )
deity.c:      snprintf( buf, MAX_STRING_LENGTH, "sigil %s", ch->pcdata->deity->name );
deity.c:      snprintf( buf, MAX_STRING_LENGTH, obj->short_descr, ch->pcdata->deity->name );
deity.c:      snprintf( buf, MAX_STRING_LENGTH, obj->description, ch->pcdata->deity->name );
deity.c:      ch->pcdata->favor -= ch->pcdata->deity->sdeityobj;
deity.c:      if( ch->pcdata->favor < ch->pcdata->deity->susceptnum )
deity.c:         SET_BIT( ch->susceptible, ch->pcdata->deity->suscept );
deity.c:      if( ( oldfavor > ch->pcdata->deity->affectednum &&
deity.c:            ch->pcdata->favor <= ch->pcdata->deity->affectednum ) ||
deity.c:          ( oldfavor > ch->pcdata->deity->elementnum &&
deity.c:            ch->pcdata->favor <= ch->pcdata->deity->elementnum ) ||
deity.c:          ( oldfavor < ch->pcdata->deity->susceptnum && ch->pcdata->favor >= ch->pcdata->deity->susceptnum ) )
deity.c:      switch ( ch->pcdata->deity->objstat )
deity.c:      if( ch->pcdata->favor < ch->pcdata->deity->srecall )
deity.c:      if( !IS_NPC( ch ) && ch->pcdata->clan )
deity.c:         location = get_room_index( ch->pcdata->clan->recall );
deity.c:      if( !IS_NPC( ch ) && !location && ch->level >= 5 && IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
deity.c:      ch->pcdata->favor -= ch->pcdata->deity->srecall;
deity.c:      if( ch->pcdata->favor < ch->pcdata->deity->susceptnum )
deity.c:         SET_BIT( ch->susceptible, ch->pcdata->deity->suscept );
deity.c:      if( ( oldfavor > ch->pcdata->deity->affectednum &&
deity.c:            ch->pcdata->favor <= ch->pcdata->deity->affectednum ) ||
deity.c:          ( oldfavor > ch->pcdata->deity->elementnum &&
deity.c:            ch->pcdata->favor <= ch->pcdata->deity->elementnum ) ||
deity.c:          ( oldfavor < ch->pcdata->deity->susceptnum && ch->pcdata->favor >= ch->pcdata->deity->susceptnum ) )
deity.c:   if( IS_NPC( ch ) || !ch->pcdata->deity )
deity.c:   oldfavor = ch->pcdata->favor;
deity.c:   if( ( ch->alignment - ch->pcdata->deity->alignment > 650
deity.c:         || ch->alignment - ch->pcdata->deity->alignment < -650 ) && ch->pcdata->deity->alignment != 0 )
deity.c:      ch->pcdata->favor -= 2;
deity.c:      ch->pcdata->favor = URANGE( -2500, ch->pcdata->favor, 2500 );
deity.c:      if( ch->pcdata->favor > ch->pcdata->deity->affectednum )
deity.c:         xSET_BITS( ch->affected_by, ch->pcdata->deity->affected );
deity.c:      if( ch->pcdata->favor > ch->pcdata->deity->elementnum )
deity.c:         SET_BIT( ch->resistant, ch->pcdata->deity->element );
deity.c:      if( ch->pcdata->favor < ch->pcdata->deity->susceptnum )
deity.c:         SET_BIT( ch->susceptible, ch->pcdata->deity->suscept );
deity.c:      if( ( oldfavor > ch->pcdata->deity->affectednum &&
deity.c:            ch->pcdata->favor <= ch->pcdata->deity->affectednum ) ||
deity.c:          ( oldfavor > ch->pcdata->deity->elementnum &&
deity.c:            ch->pcdata->favor <= ch->pcdata->deity->elementnum ) ||
deity.c:          ( oldfavor < ch->pcdata->deity->susceptnum && ch->pcdata->favor >= ch->pcdata->deity->susceptnum ) )
deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->flee / mod );
deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->flee_npcrace / mod );
deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->kill / mod );
deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->kill_npcrace / mod );
deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->kill_magic / mod );
deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->sac / mod );
deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->bury_corpse / mod );
deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->aid_spell / mod );
deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->aid / mod );
deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->steal / mod );
deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->backstab / mod );
deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->die / mod );
deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->die_npcrace / mod );
deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->spell_aid / mod );
deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->dig_corpse / mod );
deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->die_npcfoe / mod );
deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->flee_npcfoe / mod );
deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->kill_npcfoe / mod );
deity.c:   ch->pcdata->favor = URANGE( -2500, ch->pcdata->favor, 2500 );
deity.c:   if( ch->pcdata->favor > ch->pcdata->deity->affectednum )
deity.c:      xSET_BITS( ch->affected_by, ch->pcdata->deity->affected );
deity.c:   if( ch->pcdata->favor > ch->pcdata->deity->elementnum )
deity.c:      SET_BIT( ch->resistant, ch->pcdata->deity->element );
deity.c:   if( ch->pcdata->favor < ch->pcdata->deity->susceptnum )
deity.c:      SET_BIT( ch->susceptible, ch->pcdata->deity->suscept );
deity.c:   if( ( oldfavor > ch->pcdata->deity->affectednum &&
deity.c:         ch->pcdata->favor <= ch->pcdata->deity->affectednum ) ||
deity.c:       ( oldfavor > ch->pcdata->deity->elementnum &&
deity.c:         ch->pcdata->favor <= ch->pcdata->deity->elementnum ) ||
deity.c:       ( oldfavor < ch->pcdata->deity->susceptnum && ch->pcdata->favor >= ch->pcdata->deity->susceptnum ) )
fight.c:               DISPOSE( ch->pcdata->nuisance );
fight.c:       * ( 1 + abs( ch->alignment - ch->pcdata->clan->alignment ) );
fight.c:         bonus -= ch->pcdata->favor / -400;
fight.c:   if( !IS_NPC( ch ) && ch->pcdata->learned[gsn_enhanced_damage] > 0 )
fight.c:   victim_ac = (((victim->pcdata->def * victim->pcdata->deflevel) /15 ) * -1 + GET_AC(victim));
fight.c:   if( !IS_NPC( ch ) && ch->pcdata->learned[gsn_enhanced_damage] > 0 )
fight.c:	dam = (dam + ch->pcdata->str + ch->mod_str) * ((ch->pcdata->dex/100) +1);
fight.c:      if( victim->hit <= ( victim->max_hit / 8 ) && victim->pcdata->condition[COND_BLOODTHIRST] > 5 )
fight.c:         if( !IS_NPC( ch ) && !IS_IMMORTAL( ch ) && ch->pcdata->clan
fight.c:             && ch->pcdata->clan->clan_type != CLAN_ORDER && ch->pcdata->clan->clan_type != CLAN_GUILD && victim != ch )
fight.c:            snprintf( filename, 256, "%s%s.record", CLAN_DIR, ch->pcdata->clan->name );
fight.c:                      victim->pcdata->clan ? victim->pcdata->clan->badge :
fight.c:            if( victim->pcdata && victim->pcdata->clan && victim->pcdata->clan->name == ch->pcdata->clan->name )
fight.c:         if( !IS_NPC( victim ) && !IS_IMMORTAL( victim ) && victim->pcdata->clan
fight.c:             && victim->pcdata->clan->clan_type != CLAN_ORDER
fight.c:             && victim->pcdata->clan->clan_type != CLAN_GUILD && ch != victim && !IS_NPC( ch ) )
fight.c:            snprintf( filename, 256, "%s%s.defeats", CLAN_DIR, victim->pcdata->clan->name );
fight.c:                     ch->pcdata->clan ? ch->pcdata->clan->badge :
fight.c:            if( ch->pcdata && ch->pcdata->clan && ch->pcdata->clan->name == victim->pcdata->clan->name )
fight.c:      if( !IS_NPC( ch ) && ch->pcdata->clan )
fight.c:      if( !IS_NPC( victim ) && victim->pcdata->clan )
fight.c:   if( !npcvict && !victim->desc && !IS_SET( victim->pcdata->flags, PCFLAG_NORECALL ) )
fight.c:       && IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) && IS_SET( victim->pcdata->flags, PCFLAG_DEADLY ) )
fight.c:         if( ch->pcdata->clan )
fight.c:            ch->pcdata->clan->mkills++;
fight.c:         ch->pcdata->mkills++;
fight.c:         if( ch->pcdata->deity )
fight.c:            if( victim->race == ch->pcdata->deity->npcrace )
fight.c:            else if( victim->race == ch->pcdata->deity->npcfoe )
fight.c:         ch->pcdata->pkills++;
fight.c:         victim->pcdata->pdeaths++;
fight.c:         if( ch->pcdata->clan )
fight.c:               ch->pcdata->clan->pkills[0]++;
fight.c:               ch->pcdata->clan->pkills[1]++;
fight.c:               ch->pcdata->clan->pkills[2]++;
fight.c:               ch->pcdata->clan->pkills[3]++;
fight.c:               ch->pcdata->clan->pkills[4]++;
fight.c:               ch->pcdata->clan->pkills[5]++;
fight.c:               ch->pcdata->clan->pkills[6]++;
fight.c:         ch->pcdata->pkills++;
fight.c:       && IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) && IS_SET( victim->pcdata->flags, PCFLAG_DEADLY ) )
fight.c:      if( !ch->pcdata->clan
fight.c:          || !victim->pcdata->clan
fight.c:          || ( ch->pcdata->clan->clan_type != CLAN_NOKILL
fight.c:               && victim->pcdata->clan->clan_type != CLAN_NOKILL && ch->pcdata->clan != victim->pcdata->clan ) )
fight.c:         if( ch->pcdata->clan )
fight.c:               ch->pcdata->clan->pkills[0]++;
fight.c:               ch->pcdata->clan->pkills[1]++;
fight.c:               ch->pcdata->clan->pkills[2]++;
fight.c:               ch->pcdata->clan->pkills[3]++;
fight.c:               ch->pcdata->clan->pkills[4]++;
fight.c:               ch->pcdata->clan->pkills[5]++;
fight.c:               ch->pcdata->clan->pkills[6]++;
fight.c:         ch->pcdata->pkills++;
fight.c:            ch->pcdata->condition[COND_BLOODTHIRST] = ( 10 + ch->level );
fight.c:         if( victim->pcdata->clan )
fight.c:               victim->pcdata->clan->pdeaths[0]++;
fight.c:               victim->pcdata->clan->pdeaths[1]++;
fight.c:               victim->pcdata->clan->pdeaths[2]++;
fight.c:               victim->pcdata->clan->pdeaths[3]++;
fight.c:               victim->pcdata->clan->pdeaths[4]++;
fight.c:               victim->pcdata->clan->pdeaths[5]++;
fight.c:               victim->pcdata->clan->pdeaths[6]++;
fight.c:         victim->pcdata->pdeaths++;
fight.c:         if( victim->pcdata->clan )
fight.c:            victim->pcdata->clan->mdeaths++;
fight.c:         victim->pcdata->mdeaths++;
fight.c:         if( victim->pcdata->deity )
fight.c:            if( ch->race == victim->pcdata->deity->npcrace )
fight.c:            else if( ch->race == victim->pcdata->deity->npcfoe )
fight.c:      if( ch->pcdata->clan )
fight.c:         ch->pcdata->clan->illegal_pk++;
fight.c:      ch->pcdata->illegal_pk++;
fight.c:      if( victim->pcdata->clan )
fight.c:            victim->pcdata->clan->pdeaths[0]++;
fight.c:            victim->pcdata->clan->pdeaths[1]++;
fight.c:            victim->pcdata->clan->pdeaths[2]++;
fight.c:            victim->pcdata->clan->pdeaths[3]++;
fight.c:            victim->pcdata->clan->pdeaths[4]++;
fight.c:            victim->pcdata->clan->pdeaths[5]++;
fight.c:            victim->pcdata->clan->pdeaths[6]++;
fight.c:      victim->pcdata->pdeaths++;
fight.c:    { if ( !(ch->pcdata->clan && victim->pcdata->clan
fight.c:      && ch->pcdata->clan == victim->pcdata->clan ) )  return; }
fight.c:   if( victim->pcdata->mdeaths + victim->pcdata->pdeaths < 3 )
fight.c:   victim->pcdata->condition[COND_FULL] = 12;
fight.c:   victim->pcdata->condition[COND_THIRST] = 12;
fight.c:      victim->pcdata->condition[COND_BLOODTHIRST] = ( victim->level / 2 );
fight.c:        ch->pcdata->ap += (victim->level);
fight.c:   if( dam == 0 && ( !IS_NPC( ch ) && ( IS_SET( ch->pcdata->flags, PCFLAG_GAG ) ) ) )
fight.c:   if( dam == 0 && ( !IS_NPC( victim ) && ( IS_SET( victim->pcdata->flags, PCFLAG_GAG ) ) ) )
fight.c:      if( ( !IS_SET( victim->pcdata->flags, PCFLAG_DEADLY )
fight.c:            || !IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
fight.c:         if( wf && ch->pcdata->deity )
fight.c:            if( wf && wf->race == ch->pcdata->deity->npcrace )
fight.c:            else if( wf && wf->race == ch->pcdata->deity->npcfoe )
fight.c.backup:               DISPOSE( ch->pcdata->nuisance );
fight.c.backup:       * ( 1 + abs( ch->alignment - ch->pcdata->clan->alignment ) );
fight.c.backup:         bonus -= ch->pcdata->favor / -400;
fight.c.backup:   if( !IS_NPC( ch ) && ch->pcdata->learned[gsn_enhanced_damage] > 0 )
fight.c.backup:   victim_ac = ((((ch->pcdata->def + ch->pcdata->defplus) * ch->pcdata->deflevel) /15 ) * -1);
fight.c.backup:   if( !IS_NPC( ch ) && ch->pcdata->learned[gsn_enhanced_damage] > 0 )
fight.c.backup:	dam = (dam + ch->pcdata->str + ch->pcdata->att + ch->pcdata->attplus) * ch->pcdata->attlevel;
fight.c.backup:      if( victim->hit <= ( victim->max_hit / 8 ) && victim->pcdata->condition[COND_BLOODTHIRST] > 5 )
fight.c.backup:         if( !IS_NPC( ch ) && !IS_IMMORTAL( ch ) && ch->pcdata->clan
fight.c.backup:             && ch->pcdata->clan->clan_type != CLAN_ORDER && ch->pcdata->clan->clan_type != CLAN_GUILD && victim != ch )
fight.c.backup:            snprintf( filename, 256, "%s%s.record", CLAN_DIR, ch->pcdata->clan->name );
fight.c.backup:                      victim->pcdata->clan ? victim->pcdata->clan->badge :
fight.c.backup:            if( victim->pcdata && victim->pcdata->clan && victim->pcdata->clan->name == ch->pcdata->clan->name )
fight.c.backup:         if( !IS_NPC( victim ) && !IS_IMMORTAL( victim ) && victim->pcdata->clan
fight.c.backup:             && victim->pcdata->clan->clan_type != CLAN_ORDER
fight.c.backup:             && victim->pcdata->clan->clan_type != CLAN_GUILD && ch != victim && !IS_NPC( ch ) )
fight.c.backup:            snprintf( filename, 256, "%s%s.defeats", CLAN_DIR, victim->pcdata->clan->name );
fight.c.backup:                     ch->pcdata->clan ? ch->pcdata->clan->badge :
fight.c.backup:            if( ch->pcdata && ch->pcdata->clan && ch->pcdata->clan->name == victim->pcdata->clan->name )
fight.c.backup:      if( !IS_NPC( ch ) && ch->pcdata->clan )
fight.c.backup:      if( !IS_NPC( victim ) && victim->pcdata->clan )
fight.c.backup:   if( !npcvict && !victim->desc && !IS_SET( victim->pcdata->flags, PCFLAG_NORECALL ) )
fight.c.backup:       && IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) && IS_SET( victim->pcdata->flags, PCFLAG_DEADLY ) )
fight.c.backup:         if( ch->pcdata->clan )
fight.c.backup:            ch->pcdata->clan->mkills++;
fight.c.backup:         ch->pcdata->mkills++;
fight.c.backup:         if( ch->pcdata->deity )
fight.c.backup:            if( victim->race == ch->pcdata->deity->npcrace )
fight.c.backup:            else if( victim->race == ch->pcdata->deity->npcfoe )
fight.c.backup:         ch->pcdata->pkills++;
fight.c.backup:         victim->pcdata->pdeaths++;
fight.c.backup:         if( ch->pcdata->clan )
fight.c.backup:               ch->pcdata->clan->pkills[0]++;
fight.c.backup:               ch->pcdata->clan->pkills[1]++;
fight.c.backup:               ch->pcdata->clan->pkills[2]++;
fight.c.backup:               ch->pcdata->clan->pkills[3]++;
fight.c.backup:               ch->pcdata->clan->pkills[4]++;
fight.c.backup:               ch->pcdata->clan->pkills[5]++;
fight.c.backup:               ch->pcdata->clan->pkills[6]++;
fight.c.backup:         ch->pcdata->pkills++;
fight.c.backup:       && IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) && IS_SET( victim->pcdata->flags, PCFLAG_DEADLY ) )
fight.c.backup:      if( !ch->pcdata->clan
fight.c.backup:          || !victim->pcdata->clan
fight.c.backup:          || ( ch->pcdata->clan->clan_type != CLAN_NOKILL
fight.c.backup:               && victim->pcdata->clan->clan_type != CLAN_NOKILL && ch->pcdata->clan != victim->pcdata->clan ) )
fight.c.backup:         if( ch->pcdata->clan )
fight.c.backup:               ch->pcdata->clan->pkills[0]++;
fight.c.backup:               ch->pcdata->clan->pkills[1]++;
fight.c.backup:               ch->pcdata->clan->pkills[2]++;
fight.c.backup:               ch->pcdata->clan->pkills[3]++;
fight.c.backup:               ch->pcdata->clan->pkills[4]++;
fight.c.backup:               ch->pcdata->clan->pkills[5]++;
fight.c.backup:               ch->pcdata->clan->pkills[6]++;
fight.c.backup:         ch->pcdata->pkills++;
fight.c.backup:            ch->pcdata->condition[COND_BLOODTHIRST] = ( 10 + ch->level );
fight.c.backup:         if( victim->pcdata->clan )
fight.c.backup:               victim->pcdata->clan->pdeaths[0]++;
fight.c.backup:               victim->pcdata->clan->pdeaths[1]++;
fight.c.backup:               victim->pcdata->clan->pdeaths[2]++;
fight.c.backup:               victim->pcdata->clan->pdeaths[3]++;
fight.c.backup:               victim->pcdata->clan->pdeaths[4]++;
fight.c.backup:               victim->pcdata->clan->pdeaths[5]++;
fight.c.backup:               victim->pcdata->clan->pdeaths[6]++;
fight.c.backup:         victim->pcdata->pdeaths++;
fight.c.backup:         if( victim->pcdata->clan )
fight.c.backup:            victim->pcdata->clan->mdeaths++;
fight.c.backup:         victim->pcdata->mdeaths++;
fight.c.backup:         if( victim->pcdata->deity )
fight.c.backup:            if( ch->race == victim->pcdata->deity->npcrace )
fight.c.backup:            else if( ch->race == victim->pcdata->deity->npcfoe )
fight.c.backup:      if( ch->pcdata->clan )
fight.c.backup:         ch->pcdata->clan->illegal_pk++;
fight.c.backup:      ch->pcdata->illegal_pk++;
fight.c.backup:      if( victim->pcdata->clan )
fight.c.backup:            victim->pcdata->clan->pdeaths[0]++;
fight.c.backup:            victim->pcdata->clan->pdeaths[1]++;
fight.c.backup:            victim->pcdata->clan->pdeaths[2]++;
fight.c.backup:            victim->pcdata->clan->pdeaths[3]++;
fight.c.backup:            victim->pcdata->clan->pdeaths[4]++;
fight.c.backup:            victim->pcdata->clan->pdeaths[5]++;
fight.c.backup:            victim->pcdata->clan->pdeaths[6]++;
fight.c.backup:      victim->pcdata->pdeaths++;
fight.c.backup:    { if ( !(ch->pcdata->clan && victim->pcdata->clan
fight.c.backup:      && ch->pcdata->clan == victim->pcdata->clan ) )  return; }
fight.c.backup:   if( victim->pcdata->mdeaths + victim->pcdata->pdeaths < 3 )
fight.c.backup:   victim->pcdata->condition[COND_FULL] = 12;
fight.c.backup:   victim->pcdata->condition[COND_THIRST] = 12;
fight.c.backup:      victim->pcdata->condition[COND_BLOODTHIRST] = ( victim->level / 2 );
fight.c.backup:        ch->pcdata->ap += (victim->level * get_curr_lck(ch));
fight.c.backup:   if( dam == 0 && ( !IS_NPC( ch ) && ( IS_SET( ch->pcdata->flags, PCFLAG_GAG ) ) ) )
fight.c.backup:   if( dam == 0 && ( !IS_NPC( victim ) && ( IS_SET( victim->pcdata->flags, PCFLAG_GAG ) ) ) )
fight.c.backup:      if( ( !IS_SET( victim->pcdata->flags, PCFLAG_DEADLY )
fight.c.backup:            || !IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
fight.c.backup:         if( wf && ch->pcdata->deity )
fight.c.backup:            if( wf && wf->race == ch->pcdata->deity->npcrace )
fight.c.backup:            else if( wf && wf->race == ch->pcdata->deity->npcfoe )
handler.c:   ch_days = ( ch->pcdata->month + 1 ) * sysdata.dayspermonth;
handler.c:   ch_days += ch->pcdata->day;
handler.c:   age = time_info.year - ch->pcdata->year;
handler.c:         ch->pcdata->learned[sn] += mod;
handler.c:         ch->pcdata->learned[sn] = URANGE( 0, ch->pcdata->learned[sn] + mod, GET_ADEPT( ch, sn ) );
handler.c:            ch->pcdata->condition[COND_FULL] = URANGE( 0, ch->pcdata->condition[COND_FULL] + mod, 48 );
handler.c:            ch->pcdata->condition[COND_THIRST] = URANGE( 0, ch->pcdata->condition[COND_THIRST] + mod, 48 );
handler.c:            ch->pcdata->condition[COND_DRUNK] = URANGE( 0, ch->pcdata->condition[COND_DRUNK] + mod, 48 );
handler.c:            ch->pcdata->condition[COND_BLOODTHIRST] =
handler.c:               URANGE( 0, ch->pcdata->condition[COND_BLOODTHIRST] + mod, ch->level + 10 );
handler.c:   if( ch->pcdata->deity )
handler.c:      if( ch->pcdata->favor > ch->pcdata->deity->affectednum )
handler.c:         xSET_BITS( ch->affected_by, ch->pcdata->deity->affected );
handler.c:      if( ch->pcdata->favor > ch->pcdata->deity->elementnum )
handler.c:         SET_BIT( ch->resistant, ch->pcdata->deity->element );
handler.c:      if( ch->pcdata->favor < ch->pcdata->deity->susceptnum )
handler.c:         SET_BIT( ch->susceptible, ch->pcdata->deity->suscept );
handler.c:         if( wch->pcdata && wch->pcdata->pet == ch )
handler.c:            wch->pcdata->pet = NULL;
handler.c:      if( !IS_NPC( ch ) && ch->pcdata->clan )
handler.c:         location = get_room_index( ch->pcdata->clan->recall );
handler.c:   int drunk = IS_NPC( ch ) ? 0 : ch->pcdata->condition[COND_DRUNK];
handler.c:          && IS_SET( rch->pcdata->flags, PCFLAG_DND ) && get_trust( ch ) < get_trust( rch ) && can_see( ch, rch ) )
handler.c:   if( !IS_NPC( victim ) && xIS_SET( victim->act, PLR_WIZINVIS ) && get_trust( ch ) < victim->pcdata->wizinvis )
handler.c:      if( ch->pcdata->council && !str_cmp( ch->pcdata->council->name, "Newbie Council" ) )
handler.c:    clan_factor = 1 + abs( ch->alignment - ch->pcdata->clan->alignment ) / 1000; 
handler.c:      deity_factor = ch->pcdata->favor / -500;
handler.c:      deity_factor = ch->pcdata->favor / -500;
handler.c:   if( !IS_NPC( ch ) && ch->pcdata->nuisance && ch->pcdata->nuisance->flags > 2 )
handler.c:      c += ( int )( .4 * ( ( ch->pcdata->nuisance->flags - 2 ) * ch->pcdata->nuisance->power ) );
handler.c:      if( ch->pcdata->killed[x].vnum == vnum )
handler.c:         if( ch->pcdata->killed[x].count < 50 )
handler.c:            ++ch->pcdata->killed[x].count;
handler.c:      else if( ch->pcdata->killed[x].vnum == 0 )
handler.c:   memmove( ( char * )ch->pcdata->killed + sizeof( KILLED_DATA ),
handler.c:            ch->pcdata->killed, ( track - 1 ) * sizeof( KILLED_DATA ) );
handler.c:   ch->pcdata->killed[0].vnum = vnum;
handler.c:   ch->pcdata->killed[0].count = 1;
handler.c:      ch->pcdata->killed[track].vnum = 0;
handler.c:      if( ch->pcdata->killed[x].vnum == vnum )
handler.c:         return ch->pcdata->killed[x].count;
handler.c:      else if( ch->pcdata->killed[x].vnum == 0 )
handler.c:         if( !IS_NPC( ch ) && ch->pcdata->bestowments && is_name( cmd->name, ch->pcdata->bestowments )
handler.c.backup:   ch_days = ( ch->pcdata->month + 1 ) * sysdata.dayspermonth;
handler.c.backup:   ch_days += ch->pcdata->day;
handler.c.backup:   age = time_info.year - ch->pcdata->year;
handler.c.backup:         ch->pcdata->learned[sn] += mod;
handler.c.backup:         ch->pcdata->learned[sn] = URANGE( 0, ch->pcdata->learned[sn] + mod, GET_ADEPT( ch, sn ) );
handler.c.backup:            ch->pcdata->condition[COND_FULL] = URANGE( 0, ch->pcdata->condition[COND_FULL] + mod, 48 );
handler.c.backup:            ch->pcdata->condition[COND_THIRST] = URANGE( 0, ch->pcdata->condition[COND_THIRST] + mod, 48 );
handler.c.backup:            ch->pcdata->condition[COND_DRUNK] = URANGE( 0, ch->pcdata->condition[COND_DRUNK] + mod, 48 );
handler.c.backup:            ch->pcdata->condition[COND_BLOODTHIRST] =
handler.c.backup:               URANGE( 0, ch->pcdata->condition[COND_BLOODTHIRST] + mod, ch->level + 10 );
handler.c.backup:   if( ch->pcdata->deity )
handler.c.backup:      if( ch->pcdata->favor > ch->pcdata->deity->affectednum )
handler.c.backup:         xSET_BITS( ch->affected_by, ch->pcdata->deity->affected );
handler.c.backup:      if( ch->pcdata->favor > ch->pcdata->deity->elementnum )
handler.c.backup:         SET_BIT( ch->resistant, ch->pcdata->deity->element );
handler.c.backup:      if( ch->pcdata->favor < ch->pcdata->deity->susceptnum )
handler.c.backup:         SET_BIT( ch->susceptible, ch->pcdata->deity->suscept );
handler.c.backup:         if( wch->pcdata && wch->pcdata->pet == ch )
handler.c.backup:            wch->pcdata->pet = NULL;
handler.c.backup:      if( !IS_NPC( ch ) && ch->pcdata->clan )
handler.c.backup:         location = get_room_index( ch->pcdata->clan->recall );
handler.c.backup:   int drunk = IS_NPC( ch ) ? 0 : ch->pcdata->condition[COND_DRUNK];
handler.c.backup:          && IS_SET( rch->pcdata->flags, PCFLAG_DND ) && get_trust( ch ) < get_trust( rch ) && can_see( ch, rch ) )
handler.c.backup:   if( !IS_NPC( victim ) && xIS_SET( victim->act, PLR_WIZINVIS ) && get_trust( ch ) < victim->pcdata->wizinvis )
handler.c.backup:      if( ch->pcdata->council && !str_cmp( ch->pcdata->council->name, "Newbie Council" ) )
handler.c.backup:    clan_factor = 1 + abs( ch->alignment - ch->pcdata->clan->alignment ) / 1000; 
handler.c.backup:      deity_factor = ch->pcdata->favor / -500;
handler.c.backup:      deity_factor = ch->pcdata->favor / -500;
handler.c.backup:   if( !IS_NPC( ch ) && ch->pcdata->nuisance && ch->pcdata->nuisance->flags > 2 )
handler.c.backup:      c += ( int )( .4 * ( ( ch->pcdata->nuisance->flags - 2 ) * ch->pcdata->nuisance->power ) );
handler.c.backup:      if( ch->pcdata->killed[x].vnum == vnum )
handler.c.backup:         if( ch->pcdata->killed[x].count < 50 )
handler.c.backup:            ++ch->pcdata->killed[x].count;
handler.c.backup:      else if( ch->pcdata->killed[x].vnum == 0 )
handler.c.backup:   memmove( ( char * )ch->pcdata->killed + sizeof( KILLED_DATA ),
handler.c.backup:            ch->pcdata->killed, ( track - 1 ) * sizeof( KILLED_DATA ) );
handler.c.backup:   ch->pcdata->killed[0].vnum = vnum;
handler.c.backup:   ch->pcdata->killed[0].count = 1;
handler.c.backup:      ch->pcdata->killed[track].vnum = 0;
handler.c.backup:      if( ch->pcdata->killed[x].vnum == vnum )
handler.c.backup:         return ch->pcdata->killed[x].count;
handler.c.backup:      else if( ch->pcdata->killed[x].vnum == 0 )
handler.c.backup:         if( !IS_NPC( ch ) && ch->pcdata->bestowments && is_name( cmd->name, ch->pcdata->bestowments )
hotboot.c:         och->pcdata->hotboot = TRUE;
house.c:   if( d->character->pcdata->prev_site )
house.c:      d->character->pcdata->recent_site = STRALLOC( d->character->pcdata->prev_site );
house.c:   if( sysdata.save_pets && ch->pcdata && ch->pcdata->pet )
house.c:      extract_char( ch->pcdata->pet, TRUE );
house.c:   if( ch->pcdata && ch->pcdata->clan )
house.c:      save_clan( ch->pcdata->clan );
imccfg.h:#define CH_IMCDATA(ch)           ((ch)->pcdata->imcchardata)
imccfg.h:#define CH_IMCTITLE(ch)          ((ch)->pcdata->title)
imccfg.h:#define CH_IMCRANK(ch)           ((ch)->pcdata->rank)
interp.c:                  || ( !IS_NPC( ch ) && ch->pcdata->council
interp.c:                       && is_name( cmd->name, ch->pcdata->council->powers )
interp.c:                  || ( !IS_NPC( ch ) && IS_SET( ch->pcdata->flags, PCFLAG_RETIRED )
interp.c:                  || ( !IS_NPC( ch ) && ch->pcdata->bestowments && ch->pcdata->bestowments[0] != '\0'
interp.c:                       && is_name( cmd->name, ch->pcdata->bestowments ) && cmd->level <= ( trust + sysdata.bestow_dif ) ) ) )
interp.c:      else if( IS_SET( ch->pcdata->flags, PCFLAG_WATCH ) )
interp.c:   if( !IS_NPC( ch ) && ch->pcdata->nuisance && ch->pcdata->nuisance->flags > 9
interp.c:       && number_percent(  ) < ( ( ch->pcdata->nuisance->flags - 9 ) * 10 * ch->pcdata->nuisance->power ) )
liquids.c:   if( !IS_NPC( ch ) && ch->pcdata->condition[COND_DRUNK] > MAX_COND_VALUE - 8 )
liquids.c:                && ch->level > 5 && ch->pcdata->condition[COND_BLOODTHIRST] > ( 5 + ch->level / 10 ) )
liquids.c:            if( ch->pcdata->condition[COND_BLOODTHIRST] < ( 10 + ch->level ) )
liquids.c:               if( ch->pcdata->condition[COND_FULL] >= MAX_COND_VALUE
liquids.c:                   || ch->pcdata->condition[COND_THIRST] >= MAX_COND_VALUE )
liquids.c:            ch->pcdata->condition[COND_THIRST] = MAX_COND_VALUE;
liquids.c:         if( !IS_NPC( ch ) && ( ch->pcdata->condition[COND_THIRST] == MAX_COND_VALUE
liquids.c:                                || ch->pcdata->condition[COND_FULL] == MAX_COND_VALUE ) )
liquids.c:            if( ch->pcdata->condition[COND_DRUNK] > ( MAX_COND_VALUE / 2 )
liquids.c:                && ch->pcdata->condition[COND_DRUNK] < ( MAX_COND_VALUE * .4 ) )
liquids.c:            else if( ch->pcdata->condition[COND_DRUNK] >= ( MAX_COND_VALUE * .4 )
liquids.c:                     && ch->pcdata->condition[COND_DRUNK] < ( MAX_COND_VALUE * .6 ) )
liquids.c:            else if( ch->pcdata->condition[COND_DRUNK] >= ( MAX_COND_VALUE * .6 )
liquids.c:                     && ch->pcdata->condition[COND_DRUNK] < ( MAX_COND_VALUE * .9 ) )
liquids.c:            else if( ch->pcdata->condition[COND_DRUNK] >= ( MAX_COND_VALUE * .9 )
liquids.c:                     && ch->pcdata->condition[COND_DRUNK] < MAX_COND_VALUE )
liquids.c:            else if( ch->pcdata->condition[COND_DRUNK] == MAX_COND_VALUE )
liquids.c:            if( ch->pcdata->condition[COND_THIRST] > ( MAX_COND_VALUE / 2 )
liquids.c:                && ch->pcdata->condition[COND_THIRST] < ( MAX_COND_VALUE * .4 ) )
liquids.c:            else if( ch->pcdata->condition[COND_THIRST] >= ( MAX_COND_VALUE * .4 )
liquids.c:                     && ch->pcdata->condition[COND_THIRST] < ( MAX_COND_VALUE * .6 ) )
liquids.c:            else if( ch->pcdata->condition[COND_THIRST] >= ( MAX_COND_VALUE * .6 )
liquids.c:                     && ch->pcdata->condition[COND_THIRST] < ( MAX_COND_VALUE * .9 ) )
liquids.c:            else if( ch->pcdata->condition[COND_THIRST] >= ( MAX_COND_VALUE * .9 )
liquids.c:                     && ch->pcdata->condition[COND_THIRST] < MAX_COND_VALUE )
liquids.c:            else if( ch->pcdata->condition[COND_THIRST] == MAX_COND_VALUE )
liquids.c:               if( ch->pcdata->condition[COND_BLOODTHIRST] > ( MAX_COND_VALUE / 2 )
liquids.c:                   && ch->pcdata->condition[COND_BLOODTHIRST] < ( MAX_COND_VALUE * .4 ) )
liquids.c:               else if( ch->pcdata->condition[COND_BLOODTHIRST] >= ( MAX_COND_VALUE * .4 )
liquids.c:                        && ch->pcdata->condition[COND_BLOODTHIRST] < ( MAX_COND_VALUE * .6 ) )
liquids.c:               else if( ch->pcdata->condition[COND_BLOODTHIRST] >= ( MAX_COND_VALUE * .6 )
liquids.c:                        && ch->pcdata->condition[COND_BLOODTHIRST] < ( MAX_COND_VALUE * .9 ) )
liquids.c:               else if( ch->pcdata->condition[COND_BLOODTHIRST] >= ( MAX_COND_VALUE * .9 )
liquids.c:                        && ch->pcdata->condition[COND_BLOODTHIRST] < MAX_COND_VALUE )
liquids.c:            else if( !IS_VAMPIRE( ch ) && ch->pcdata->condition[COND_BLOODTHIRST] >= MAX_COND_VALUE )
liquids.c:               ch->pcdata->condition[COND_BLOODTHIRST] = MAX_COND_VALUE;
liquids.c:            if( ch->pcdata->condition[COND_DRUNK] > ( MAX_COND_VALUE / 2 )
liquids.c:                && ch->pcdata->condition[COND_DRUNK] < ( MAX_COND_VALUE * .4 ) )
liquids.c:            else if( ch->pcdata->condition[COND_DRUNK] >= ( MAX_COND_VALUE * .4 )
liquids.c:                     && ch->pcdata->condition[COND_DRUNK] < ( MAX_COND_VALUE * .6 ) )
liquids.c:            else if( ch->pcdata->condition[COND_DRUNK] >= ( MAX_COND_VALUE * .6 )
liquids.c:                     && ch->pcdata->condition[COND_DRUNK] < ( MAX_COND_VALUE * .9 ) )
liquids.c:            else if( ch->pcdata->condition[COND_DRUNK] >= ( MAX_COND_VALUE * .9 )
liquids.c:                     && ch->pcdata->condition[COND_DRUNK] < MAX_COND_VALUE )
liquids.c:            else if( ch->pcdata->condition[COND_DRUNK] == MAX_COND_VALUE )
liquids.c:            if( ch->pcdata->condition[COND_THIRST] > ( MAX_COND_VALUE / 2 )
liquids.c:                && ch->pcdata->condition[COND_THIRST] < ( MAX_COND_VALUE * .4 ) )
liquids.c:            else if( ch->pcdata->condition[COND_THIRST] >= ( MAX_COND_VALUE * .4 )
liquids.c:                     && ch->pcdata->condition[COND_THIRST] < ( MAX_COND_VALUE * .6 ) )
liquids.c:            else if( ch->pcdata->condition[COND_THIRST] >= ( MAX_COND_VALUE * .6 )
liquids.c:                     && ch->pcdata->condition[COND_THIRST] < ( MAX_COND_VALUE * .9 ) )
liquids.c:            else if( ch->pcdata->condition[COND_THIRST] >= ( MAX_COND_VALUE * .9 )
liquids.c:                     && ch->pcdata->condition[COND_THIRST] < MAX_COND_VALUE )
liquids.c:            else if( ch->pcdata->condition[COND_THIRST] == MAX_COND_VALUE )
liquids.c:               if( ch->pcdata->condition[COND_BLOODTHIRST] > ( MAX_COND_VALUE / 2 )
liquids.c:                   && ch->pcdata->condition[COND_BLOODTHIRST] < ( MAX_COND_VALUE * .4 ) )
liquids.c:               else if( ch->pcdata->condition[COND_BLOODTHIRST] >= ( MAX_COND_VALUE * .4 )
liquids.c:                        && ch->pcdata->condition[COND_BLOODTHIRST] < ( MAX_COND_VALUE * .6 ) )
liquids.c:               else if( ch->pcdata->condition[COND_BLOODTHIRST] >= ( MAX_COND_VALUE * .6 )
liquids.c:                        && ch->pcdata->condition[COND_BLOODTHIRST] < ( MAX_COND_VALUE * .9 ) )
liquids.c:               else if( ch->pcdata->condition[COND_BLOODTHIRST] >= ( MAX_COND_VALUE * .9 )
liquids.c:                        && ch->pcdata->condition[COND_BLOODTHIRST] < MAX_COND_VALUE )
liquids.c:            else if( !IS_VAMPIRE( ch ) && ch->pcdata->condition[COND_BLOODTHIRST] >= MAX_COND_VALUE )
liquids.c:               ch->pcdata->condition[COND_BLOODTHIRST] = MAX_COND_VALUE;
liquids.c:            if( !IS_OBJ_STAT( source, ITEM_CLANCORPSE ) || !IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
magic.c:   if( ch->pcdata->learned[sn] > 0
magic.c:      if( ch->pcdata->learned[sn] > 0
magic.c:      if( !ch->pcdata->special_skills[sn] || !ch->pcdata->special_skills[sn]->name )
magic.c:      if( LOWER( name[0] ) == LOWER( ch->pcdata->special_skills[sn]->name[0] )
magic.c:          && !str_prefix( name, ch->pcdata->special_skills[sn]->name ) )
magic.c:            return ch->pcdata->intel;
magic.c:         if( !IS_NPC( ch ) && ch->pcdata->nuisance &&
magic.c:             ch->pcdata->nuisance->flags > 5
magic.c:             && number_percent(  ) < ( ( ( ch->pcdata->nuisance->flags - 5 ) * 8 ) + ch->pcdata->nuisance->power * 6 ) )
magic.c:         if( !IS_NPC( ch ) && ch->fighting && ch->pcdata->nuisance &&
magic.c:             ch->pcdata->nuisance->flags > 5
magic.c:             && number_percent(  ) < ( ( ( ch->pcdata->nuisance->flags - 5 ) * 8 ) + 6 * ch->pcdata->nuisance->power ) )
magic.c:             && skill->guild != CLASS_NONE && ( !ch->pcdata->clan || skill->guild != ch->pcdata->clan->Class ) )
magic.c:            if( ch->pcdata->condition[COND_BLOODTHIRST] < blood )
magic.c:   if( !IS_NPC( ch ) && ( number_percent(  ) + skill->difficulty * 5 ) > ch->pcdata->learned[sn] )
magic.c:         if( !IS_NPC( vch ) && xIS_SET( vch->act, PLR_WIZINVIS ) && vch->pcdata->wizinvis >= LEVEL_IMMORTAL )
magic.c:   if( ( ( get_curr_cha( ch ) / 3 ) + 1 ) > ch->pcdata->charmies )
magic.c:      ch->pcdata->charmies++;
magic.c:   schance = ( ch->pcdata->intel  - victim->pcdata->intel  );
magic.c:         if( !IS_NPC( vch ) && xIS_SET( vch->act, PLR_WIZINVIS ) && vch->pcdata->wizinvis >= LEVEL_IMMORTAL )
magic.c:             && ( get_trust( ch ) < in_obj->carried_by->pcdata->wizinvis )
magic.c:       || ( !IS_NPC( ch ) && !IS_NPC( victim ) && IS_SET( victim->pcdata->flags, PCFLAG_NOSUMMON ) ) )
magic.c:      if( !IS_NPC( vch ) && xIS_SET( vch->act, PLR_WIZINVIS ) && vch->pcdata->wizinvis >= LEVEL_IMMORTAL )
magic.c:   if( IS_PKILL( ch ) && ch->pcdata->condition[COND_BLOODTHIRST] > 22 )
magic.c:         if( !IS_IMMORTAL( ch ) && ch->pcdata->condition[COND_BLOODTHIRST] - ( pMobIndex->level / 3 ) < 0 )
magic.c:      if( !IS_NPC( vch ) && xIS_SET( vch->act, PLR_WIZINVIS ) && vch->pcdata->wizinvis >= LEVEL_IMMORTAL )
magic.c:      if( !IS_NPC( vch ) && xIS_SET( vch->act, PLR_WIZINVIS ) && vch->pcdata->wizinvis >= LEVEL_IMMORTAL )
magic.c:               if( ch->level - obj->level < 10 || obj->cost > ch->level * ch->pcdata->intel )
magic.c:               if( ch->level - obj->level < 20 || obj->cost > ch->level * ch->pcdata->intel / 5 )
magic.c:               if( ch->level - obj->level < 5 || obj->cost > ch->level * 10 * ch->pcdata->intel )
magic.c:               if( ch->level - obj->level < 0 || obj->cost > ch->level * 50 * ch->pcdata->intel )
mapout.c:   for( i = ch->pcdata->area->low_r_vnum; i <= ch->pcdata->area->hi_r_vnum; i++ )
mapout.c:         if( !( location = make_room( i, ch->pcdata->area ) ) )
mapout.c:         location->area = ch->pcdata->area;
mapout.c:   for( i = ch->pcdata->area->low_r_vnum; i <= ch->pcdata->area->hi_r_vnum; i++ )
mapout.c:      for( i = ch->pcdata->area->low_r_vnum; i <= ch->pcdata->area->hi_r_vnum; i++ )
misc.c:   if( IS_NPC( ch ) || ch->pcdata->condition[COND_FULL] > 5 )
misc.c:      if( !IS_NPC( ch ) && ch->pcdata->condition[COND_FULL] > 40 )
misc.c:   if( !IS_NPC( ch ) && ( !IS_PKILL( ch ) || ( IS_PKILL( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_HIGHGAG ) ) ) )
misc.c:               condition = ch->pcdata->condition[COND_FULL];
misc.c:               if( condition <= 1 && ch->pcdata->condition[COND_FULL] > 1 )
misc.c:               else if( ch->pcdata->condition[COND_FULL] > 40 )
misc.c:               condition = ch->pcdata->condition[COND_FULL];
misc.c:               if( condition <= 1 && ch->pcdata->condition[COND_FULL] > 1 )
misc.c:               else if( ch->pcdata->condition[COND_FULL] > 40 )
misc.c:   if( !IS_NPC( ch ) && ( ch->pcdata->condition[COND_FULL] >= 48 || ch->pcdata->condition[COND_THIRST] >= 48 ) )
misc.c:   if( !IS_NPC( ch ) && ch->pcdata->nuisance &&
misc.c:       ch->pcdata->nuisance->flags > 3
misc.c:       && ( ch->pcdata->condition[COND_FULL] >= ( 48 - ( 3 * ch->pcdata->nuisance->flags ) + ch->pcdata->nuisance->power )
misc.c:            || ch->pcdata->condition[COND_THIRST] >= ( 48 - ( ch->pcdata->nuisance->flags ) + ch->pcdata->nuisance->power ) ) )
misc.c:   if( !IS_NPC( ch ) && ( !IS_PKILL( ch ) || ( IS_PKILL( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_HIGHGAG ) ) ) )
misc.c:      if( !IS_NPC( ch ) && ch->pcdata->condition[COND_THIRST] > 43 )
mpxset.c:	victim->pcdata->quest = value;
mpxset.c:      victim->pcdata->quest_curr += value;
mpxset.c:      victim->pcdata->quest_accum += value;
mpxset.c:      victim->pcdata->favor = value;
mpxset.c:      victim->pcdata->condition[COND_THIRST] = value;
mpxset.c:      victim->pcdata->condition[COND_DRUNK] = value;
mpxset.c:      victim->pcdata->condition[COND_FULL] = value;
mpxset.c:      victim->pcdata->condition[COND_BLOODTHIRST] = value;
mpxset.c:         STRFREE( victim->pcdata->deity_name );
mpxset.c:         victim->pcdata->deity_name = STRALLOC( "" );
mpxset.c:         victim->pcdata->deity = NULL;
mpxset.c:      STRFREE( victim->pcdata->deity_name );
mpxset.c:      victim->pcdata->deity_name = QUICKLINK( deity->name );
mpxset.c:      victim->pcdata->deity = deity;
mud_comm.c:               drunk = vch->pcdata->condition[COND_DRUNK];
mud_comm.c:               vch->pcdata->condition[COND_DRUNK] = 0;
mud_comm.c:               vch->pcdata->condition[COND_DRUNK] = drunk;
mud_comm.c:         drunk = victim->pcdata->condition[COND_DRUNK];
mud_comm.c:         victim->pcdata->condition[COND_DRUNK] = 0;
mud_comm.c:         victim->pcdata->condition[COND_DRUNK] = drunk;
mud_comm.c:   if( victim->pcdata->nuisance )
mud_comm.c:   CREATE( victim->pcdata->nuisance, NUISANCE_DATA, 1 );
mud_comm.c:   victim->pcdata->nuisance->set_time = current_time;
mud_comm.c:   victim->pcdata->nuisance->flags = 1;
mud_comm.c:   victim->pcdata->nuisance->power = 2;
mud_comm.c:   victim->pcdata->nuisance->max_time = mktime( now_time );
mud_comm.c:   if( !ch->pcdata->nuisance )
mud_comm.c:   DISPOSE( victim->pcdata->nuisance );
mud_comm.c:   if( ( victim->pcdata->learned[sn] >= adept ) || ( victim->pcdata->learned[sn] >= max ) )
mud_comm.c:   victim->pcdata->learned[sn] = max;
mud_comm.c:   if( victim->pcdata->learned[sn] >= adept )
mud_comm.c:      victim->pcdata->learned[sn] = adept;
mud_comm.c:      victim->pcdata->favor = URANGE( -2500, victim->pcdata->favor + favor, 2500 );
mud_comm.c:      victim->pcdata->favor = URANGE( -2500, victim->pcdata->favor - favor, 2500 );
mud_comm.c:      victim->pcdata->favor = URANGE( -2500, favor, 2500 );
mud_comm.c:   if( victim->pcdata->auth_state >= 1 )
mud_comm.c:   victim->pcdata->auth_state = 1;
mud_comm.c:   switch ( victim->pcdata->auth_state )
mud_comm.c:         victim->pcdata->auth_state = 1;
mud_comm.c:         REMOVE_BIT( victim->pcdata->flags, PCFLAG_UNAUTHED );
mud_comm.c:      if( !IS_SET( victim->pcdata->flags, PCFLAG_DEADLY ) )
mud_comm.c:         SET_BIT( victim->pcdata->flags, PCFLAG_DEADLY );
mud_comm.c:      if( IS_SET( victim->pcdata->flags, PCFLAG_DEADLY ) )
mud_comm.c:         REMOVE_BIT( victim->pcdata->flags, PCFLAG_DEADLY );
mud_comm.c.backup:               drunk = vch->pcdata->condition[COND_DRUNK];
mud_comm.c.backup:               vch->pcdata->condition[COND_DRUNK] = 0;
mud_comm.c.backup:               vch->pcdata->condition[COND_DRUNK] = drunk;
mud_comm.c.backup:         drunk = victim->pcdata->condition[COND_DRUNK];
mud_comm.c.backup:         victim->pcdata->condition[COND_DRUNK] = 0;
mud_comm.c.backup:         victim->pcdata->condition[COND_DRUNK] = drunk;
mud_comm.c.backup:   if( victim->pcdata->nuisance )
mud_comm.c.backup:   CREATE( victim->pcdata->nuisance, NUISANCE_DATA, 1 );
mud_comm.c.backup:   victim->pcdata->nuisance->set_time = current_time;
mud_comm.c.backup:   victim->pcdata->nuisance->flags = 1;
mud_comm.c.backup:   victim->pcdata->nuisance->power = 2;
mud_comm.c.backup:   victim->pcdata->nuisance->max_time = mktime( now_time );
mud_comm.c.backup:   if( !ch->pcdata->nuisance )
mud_comm.c.backup:   DISPOSE( victim->pcdata->nuisance );
mud_comm.c.backup:   if( ( victim->pcdata->learned[sn] >= adept ) || ( victim->pcdata->learned[sn] >= max ) )
mud_comm.c.backup:   victim->pcdata->learned[sn] = max;
mud_comm.c.backup:   if( victim->pcdata->learned[sn] >= adept )
mud_comm.c.backup:      victim->pcdata->learned[sn] = adept;
mud_comm.c.backup:      victim->pcdata->favor = URANGE( -2500, victim->pcdata->favor + favor, 2500 );
mud_comm.c.backup:      victim->pcdata->favor = URANGE( -2500, victim->pcdata->favor - favor, 2500 );
mud_comm.c.backup:      victim->pcdata->favor = URANGE( -2500, favor, 2500 );
mud_comm.c.backup:   if( victim->pcdata->auth_state >= 1 )
mud_comm.c.backup:   victim->pcdata->auth_state = 1;
mud_comm.c.backup:   switch ( victim->pcdata->auth_state )
mud_comm.c.backup:         victim->pcdata->auth_state = 1;
mud_comm.c.backup:         REMOVE_BIT( victim->pcdata->flags, PCFLAG_UNAUTHED );
mud_comm.c.backup:      if( !IS_SET( victim->pcdata->flags, PCFLAG_DEADLY ) )
mud_comm.c.backup:         SET_BIT( victim->pcdata->flags, PCFLAG_DEADLY );
mud_comm.c.backup:      if( IS_SET( victim->pcdata->flags, PCFLAG_DEADLY ) )
mud_comm.c.backup:         REMOVE_BIT( victim->pcdata->flags, PCFLAG_DEADLY );
mud.h:#define IS_DRUNK(ch, drunk)     (number_percent() < ( (ch)->pcdata->condition[COND_DRUNK] * 2 / (drunk) ) )
mud.h:				&& (ch)->pcdata->clan			    \
mud.h:				&& (ch)->pcdata->clan->clan_type != CLAN_ORDER  \
mud.h:				&& (ch)->pcdata->clan->clan_type != CLAN_GUILD)
mud.h:				&& (ch)->pcdata->clan			    \
mud.h:				&& (ch)->pcdata->clan->clan_type == CLAN_ORDER)
mud.h:				&& (ch)->pcdata->clan			    \
mud.h:				&& (ch)->pcdata->clan->clan_type == CLAN_GUILD)
mud.h:                && (ch)->pcdata->clan                \
mud.h:                && (ch)->pcdata->clan->clan_type != CLAN_NOKILL \
mud.h:                && (ch)->pcdata->clan->clan_type != CLAN_ORDER  \
mud.h:                && (ch)->pcdata->clan->clan_type != CLAN_GUILD)
mud.h:				&& (ch)->pcdata->deity)
mud.h:#define IS_IDLE(ch)		((ch)->pcdata && IS_SET( (ch)->pcdata->flags, PCFLAG_IDLE ))
mud.h:#define IS_PKILL(ch)            ((ch)->pcdata && IS_SET( (ch)->pcdata->flags, PCFLAG_DEADLY ))
mud.h:#define WAIT_STATE(ch, npulse) ((ch)->wait=(!IS_NPC(ch)&&ch->pcdata->nuisance&&\
mud.h:			      (ch->pcdata->nuisance->flags>4))?UMAX((ch)->wait,\
mud.h:			      (npulse+((ch)->pcdata->nuisance->flags-4)+ \
mud.h:               		      ch->pcdata->nuisance->power)): \
mud.h:#define IS_RETIRED(ch) (ch->pcdata && IS_SET(ch->pcdata->flags,PCFLAG_RETIRED))
mud.h:#define IS_GUEST(ch) (ch->pcdata && IS_SET(ch->pcdata->flags,PCFLAG_GUEST))
mud.h:#define NOT_AUTHED(ch)		(!IS_NPC(ch) && ch->pcdata->auth_state <= 3  \
mud.h:			      && IS_SET(ch->pcdata->flags, PCFLAG_UNAUTHED) )
mud.h:			      && ch->pcdata->auth_state == 1		     \
mud.h:			      && IS_SET(ch->pcdata->flags, PCFLAG_UNAUTHED) )
mud.h:#define LEARNED(ch,sn)	    (IS_NPC(ch) ? 80 : URANGE(0, (ch)->pcdata->learned[(sn)], 101))
mud.h.backup:#define IS_DRUNK(ch, drunk)     (number_percent() < ( (ch)->pcdata->condition[COND_DRUNK] * 2 / (drunk) ) )
mud.h.backup:				&& (ch)->pcdata->clan			    \
mud.h.backup:				&& (ch)->pcdata->clan->clan_type != CLAN_ORDER  \
mud.h.backup:				&& (ch)->pcdata->clan->clan_type != CLAN_GUILD)
mud.h.backup:				&& (ch)->pcdata->clan			    \
mud.h.backup:				&& (ch)->pcdata->clan->clan_type == CLAN_ORDER)
mud.h.backup:				&& (ch)->pcdata->clan			    \
mud.h.backup:				&& (ch)->pcdata->clan->clan_type == CLAN_GUILD)
mud.h.backup:                && (ch)->pcdata->clan                \
mud.h.backup:                && (ch)->pcdata->clan->clan_type != CLAN_NOKILL \
mud.h.backup:                && (ch)->pcdata->clan->clan_type != CLAN_ORDER  \
mud.h.backup:                && (ch)->pcdata->clan->clan_type != CLAN_GUILD)
mud.h.backup:				&& (ch)->pcdata->deity)
mud.h.backup:#define IS_IDLE(ch)		((ch)->pcdata && IS_SET( (ch)->pcdata->flags, PCFLAG_IDLE ))
mud.h.backup:#define IS_PKILL(ch)            ((ch)->pcdata && IS_SET( (ch)->pcdata->flags, PCFLAG_DEADLY ))
mud.h.backup:#define WAIT_STATE(ch, npulse) ((ch)->wait=(!IS_NPC(ch)&&ch->pcdata->nuisance&&\
mud.h.backup:			      (ch->pcdata->nuisance->flags>4))?UMAX((ch)->wait,\
mud.h.backup:			      (npulse+((ch)->pcdata->nuisance->flags-4)+ \
mud.h.backup:               		      ch->pcdata->nuisance->power)): \
mud.h.backup:#define IS_RETIRED(ch) (ch->pcdata && IS_SET(ch->pcdata->flags,PCFLAG_RETIRED))
mud.h.backup:#define IS_GUEST(ch) (ch->pcdata && IS_SET(ch->pcdata->flags,PCFLAG_GUEST))
mud.h.backup:#define NOT_AUTHED(ch)		(!IS_NPC(ch) && ch->pcdata->auth_state <= 3  \
mud.h.backup:			      && IS_SET(ch->pcdata->flags, PCFLAG_UNAUTHED) )
mud.h.backup:			      && ch->pcdata->auth_state == 1		     \
mud.h.backup:			      && IS_SET(ch->pcdata->flags, PCFLAG_UNAUTHED) )
mud.h.backup:#define LEARNED(ch,sn)	    (IS_NPC(ch) ? 80 : URANGE(0, (ch)->pcdata->learned[(sn)], 101))
mud_prog.c:         return ( !IS_NPC( chkchar ) ? mprog_veval( chkchar->pcdata->condition[COND_DRUNK], opr, atoi( rval ), mob ) : FALSE );
mud_prog.c:         return ( !IS_NPC( chkchar ) ? chkchar->pcdata->nuisance ? TRUE : FALSE : FALSE );
mud_prog.c:         return IS_NPC( chkchar ) ? FALSE : mprog_veval( chkchar->pcdata->quest_number, opr, atoi( rval ), mob );
mud_prog.c:         return IS_NPC( chkchar ) ? FALSE : mprog_veval( chkchar->pcdata->release_date, opr, atoi( rval ), mob );
mud_prog.c:         if( IS_NPC( chkchar ) || !chkchar->pcdata->nuisance )
mud_prog.c:         return mprog_veval( chkchar->pcdata->nuisance->flags, opr, rhsvl, mob );
mud_prog.c:         if( IS_NPC( chkchar ) || !chkchar->pcdata->clan )
mud_prog.c:         return mprog_seval( chkchar->pcdata->clan->name, opr, rval, mob );
mud_prog.c:         if( IS_NPC( chkchar ) || !chkchar->pcdata->council )
mud_prog.c:         return mprog_seval( chkchar->pcdata->council->name, opr, rval, mob );
mud_prog.c:         if( IS_NPC( chkchar ) || !chkchar->pcdata->deity )
mud_prog.c:         return mprog_seval( chkchar->pcdata->deity->name, opr, rval, mob );
mud_prog.c:         return mprog_seval( chkchar->pcdata->clan->name, opr, rval, mob );
mud_prog.c:         if( IS_NPC( chkchar ) || !chkchar->pcdata->clan )
mud_prog.c:         return mprog_veval( chkchar->pcdata->clan->clan_type, opr, atoi( rval ), mob );
mud_prog.c:         if( IS_NPC( chkchar ) || !chkchar->pcdata->favor )
mud_prog.c:         return mprog_veval( chkchar->pcdata->favor, opr, atoi( rval ), mob );
mud_prog.c:         return mprog_seval( chkchar->pcdata->rank, opr, rval, mob );
mud_prog.c:                  strcat( t, actor->pcdata->title );
mud_prog.c:                  strcat( t, vict->pcdata->title );
mud_prog.c:                  strcat( t, rndm->pcdata->title );
player.c:   pager_printf( ch, "\r\nWorth for %s%s.\r\n", ch->name, ch->pcdata->title );
player.c:   if( !ch->pcdata->deity )
player.c:   else if( ch->pcdata->favor > 2250 )
player.c:   else if( ch->pcdata->favor > 2000 )
player.c:   else if( ch->pcdata->favor > 1750 )
player.c:   else if( ch->pcdata->favor > 1500 )
player.c:   else if( ch->pcdata->favor > 1250 )
player.c:   else if( ch->pcdata->favor > 1000 )
player.c:   else if( ch->pcdata->favor > 750 )
player.c:   else if( ch->pcdata->favor > 250 )
player.c:   else if( ch->pcdata->favor > -250 )
player.c:   else if( ch->pcdata->favor > -750 )
player.c:   else if( ch->pcdata->favor > -1000 )
player.c:   else if( ch->pcdata->favor > -1250 )
player.c:   else if( ch->pcdata->favor > -1500 )
player.c:   else if( ch->pcdata->favor > -1750 )
player.c:   else if( ch->pcdata->favor > -2000 )
player.c:   else if( ch->pcdata->favor > -2250 )
player.c:                 ch->pcdata->quest_curr, ch->carry_weight, buf, num_punct( ch->gold ) );
player.c:   if( !ch->pcdata->deity )
player.c:   if( ch->pcdata->favor < ch->level * 2 )
player.c:   pager_printf( ch, "%s appears in a vision, revealing that your remains... ", ch->pcdata->deity->name );
player.c:      ch->pcdata->favor -= ch->level * 2;
player.c:   STRFREE( ch->pcdata->title );
player.c:   ch->pcdata->title = STRALLOC( buf );
player.c:   if( IS_SET( ch->pcdata->flags, PCFLAG_NOTITLE ) )
player.c:   if( IS_SET( ch->pcdata->flags, PCFLAG_NOCPOSE ) )
player.c:      if( !ch->pcdata->cpose )
player.c:         ch->pcdata->cpose = str_dup( "" );
player.c:      ch_printf( ch, "Your cpose is: %s\r\n", show_tilde( ch->pcdata->cpose ) );
player.c:      if( ch->pcdata->cpose )
player.c:         DISPOSE( ch->pcdata->cpose );
player.c:      ch->pcdata->cpose = str_dup( "" );
player.c:   if( ch->pcdata->cpose )
player.c:      DISPOSE( ch->pcdata->cpose );
player.c:   ch->pcdata->cpose = str_dup( buf );
player.c:   if( IS_SET( ch->pcdata->flags, PCFLAG_NODESC ) )
player.c:   if( IS_SET( ch->pcdata->flags, PCFLAG_NOBIO ) )
player.c:         start_editing( ch, ch->pcdata->bio );
player.c:         STRFREE( ch->pcdata->bio );
player.c:         ch->pcdata->bio = copy_buffer( ch );
player.c:                 ch->hit, ch->max_hit, ch->pcdata->condition[COND_BLOODTHIRST],
player.c:                ch->hit, ch->max_hit, ch->pcdata->condition[COND_BLOODTHIRST],
player.c:              ch->pcdata->str,  ch->pcdata->intel, ch->pcdata->dex,  ch->pcdata->lck );
player.c:              ch->pcdata->str,  ch->pcdata->intel, ch->pcdata->dex,  ch->pcdata->lck );
player.c:                 ch->hit, ch->max_hit, ch->pcdata->condition[COND_BLOODTHIRST],
player.c:                 ch->pcdata->condition[COND_BLOODTHIRST], 10 + ch->level, ch->move, ch->max_move, ch->exp );
player.c:                ch->pcdata->condition[COND_BLOODTHIRST], 10 + ch->level, ch->move, ch->max_move, ch->exp );
player.c:      ch_printf( ch, "%s\r\n", !str_cmp( ch->pcdata->fprompt, "" ) ? "(default prompt)" : ch->pcdata->fprompt );
player.c:   ch_printf( ch, "%s\r\n", !str_cmp( ch->pcdata->fprompt, "" ) ? "(default prompt)" : ch->pcdata->fprompt );
player.c:   if( ch->pcdata->fprompt )
player.c:      STRFREE( ch->pcdata->fprompt );
player.c:      ch->pcdata->fprompt = STRALLOC( "" );
player.c:      ch->pcdata->fprompt = STRALLOC( ch->pcdata->prompt );
player.c:      ch->pcdata->fprompt = STRALLOC( argument );
player.c:      ch_printf( ch, "%s\r\n", !str_cmp( ch->pcdata->prompt, "" ) ? "(default prompt)" : ch->pcdata->prompt );
player.c:   ch_printf( ch, "%s\r\n", !str_cmp( ch->pcdata->prompt, "" ) ? "(default prompt)" : ch->pcdata->prompt );
player.c:   if( ch->pcdata->prompt )
player.c:      STRFREE( ch->pcdata->prompt );
player.c:      ch->pcdata->prompt = STRALLOC( "" );
player.c:      ch->pcdata->prompt = STRALLOC( ch->pcdata->fprompt );
player.c:      ch->pcdata->prompt = STRALLOC( argument );
player.c:   if( !ch->pcdata->deity )
player.c:   else if( ch->pcdata->favor > 2250 )
player.c:   else if( ch->pcdata->favor > 2000 )
player.c:   else if( ch->pcdata->favor > 1750 )
player.c:   else if( ch->pcdata->favor > 1500 )
player.c:   else if( ch->pcdata->favor > 1250 )
player.c:   else if( ch->pcdata->favor > 1000 )
player.c:   else if( ch->pcdata->favor > 750 )
player.c:   else if( ch->pcdata->favor > 250 )
player.c:   else if( ch->pcdata->favor > -250 )
player.c:   else if( ch->pcdata->favor > -750 )
player.c:   else if( ch->pcdata->favor > -1000 )
player.c:   else if( ch->pcdata->favor > -1250 )
player.c:   else if( ch->pcdata->favor > -1500 )
player.c:   else if( ch->pcdata->favor > -1750 )
player.c:   else if( ch->pcdata->favor > -2000 )
player.c:   else if( ch->pcdata->favor > -2250 )
player.c:   ch_printf( ch, "%s considers you to be %s.\n\r", ch->pcdata->deity->name, buf );
polymorph.c:   if( morph->deity && ( !ch->pcdata->deity || !get_deity( morph->deity ) ) )
polymorph.c:         STRFREE( ch->pcdata->subprompt );
polymorph.c:      STRFREE( ch->pcdata->subprompt );
polymorph.c:      ch->pcdata->subprompt = STRALLOC( buf );
polymorph.c:      if( IS_NPC( ch ) || !ch->pcdata->deity || ch->pcdata->favor < morph->favourused )
polymorph.c:         ch->pcdata->favor -= morph->favourused;
renumber.c:      if( area->low_r_vnum < ch->pcdata->r_range_lo || area->hi_r_vnum > ch->pcdata->r_range_hi ||
renumber.c:          area->low_m_vnum < ch->pcdata->m_range_lo || area->hi_m_vnum > ch->pcdata->m_range_hi ||
renumber.c:          area->low_o_vnum < ch->pcdata->o_range_lo || area->hi_o_vnum > ch->pcdata->o_range_hi )
renumber.c:      if( r_area->low_room < ch->pcdata->r_range_lo || r_area->hi_room > ch->pcdata->r_range_hi ||
renumber.c:          r_area->low_obj < ch->pcdata->o_range_lo || r_area->hi_obj > ch->pcdata->o_range_hi ||
renumber.c:          r_area->low_mob < ch->pcdata->m_range_lo || r_area->hi_mob > ch->pcdata->m_range_hi )
reset.c:   if( IS_NPC( ch ) || get_trust( ch ) < LEVEL_SAVIOR || !ch->pcdata->area )
reset.c:   if( ch->in_room->area != ch->pcdata->area && get_trust( ch ) < LEVEL_GREATER )
reset.c:   if( IS_NPC( ch ) || get_trust( ch ) < LEVEL_SAVIOR || !ch->pcdata->area )
reset.c:   pArea = ch->pcdata->area;
save.c:   ch->pcdata->day = ( number_range( 1, sysdata.dayspermonth ) - 1 );   /* Assign random day of birth */
save.c:   ch->pcdata->month = ( number_range( 1, sysdata.monthsperyear ) - 1 );   /* Assign random month of birth */
save.c:   ch->pcdata->year = time_info.year - age;  /* Assign birth year based on calculations above */
save.c:   snprintf( strsave, MAX_INPUT_LENGTH, "%s%c/%s", PLAYER_DIR, tolower( ch->pcdata->filename[0] ),
save.c:             capitalize( ch->pcdata->filename ) );
save.c:      snprintf( strback, MAX_INPUT_LENGTH, "%s%c/%s", BACKUP_DIR, tolower( ch->pcdata->filename[0] ),
save.c:                capitalize( ch->pcdata->filename ) );
save.c:   if( ch->level >= LEVEL_IMMORTAL || IS_SET( ch->pcdata->flags, PCFLAG_RETIRED ) )
save.c:      snprintf( strback, MAX_INPUT_LENGTH, "%s%s", GOD_DIR, capitalize( ch->pcdata->filename ) );
save.c:         fprintf( fp, "Pcflags      %d\n", ch->pcdata->flags );
save.c:         if( ch->pcdata->r_range_lo && ch->pcdata->r_range_hi )
save.c:            fprintf( fp, "RoomRange    %d %d\n", ch->pcdata->r_range_lo, ch->pcdata->r_range_hi );
save.c:         if( ch->pcdata->o_range_lo && ch->pcdata->o_range_hi )
save.c:            fprintf( fp, "ObjRange     %d %d\n", ch->pcdata->o_range_lo, ch->pcdata->o_range_hi );
save.c:         if( ch->pcdata->m_range_lo && ch->pcdata->m_range_hi )
save.c:            fprintf( fp, "MobRange     %d %d\n", ch->pcdata->m_range_lo, ch->pcdata->m_range_hi );
save.c:         fwrite_obj( ch, ch->last_carrying, fp, 0, OS_CARRY, ch->pcdata->hotboot );
save.c:      if( sysdata.save_pets && ch->pcdata->pet )
save.c:         fwrite_mobile( fp, ch->pcdata->pet );
save.c:            ch->pcdata->age_bonus, ch->pcdata->day, ch->pcdata->month, ch->pcdata->year );
save.c:   fprintf( fp, "Str          %d\n", ch->pcdata->str );
save.c:   fprintf( fp, "Intel          %d\n", ch->pcdata->intel );
save.c:   fprintf( fp, "Dex         %d\n", ch->pcdata->dex );
save.c:   fprintf( fp, "Lck          %d\n", ch->pcdata->lck );
save.c:   fprintf( fp, "Def          %d\n", ch->pcdata->def );
save.c:   fprintf( fp, "Matt          %d\n", ch->pcdata->matt );
save.c:   fprintf( fp, "strplus          %d\n", ch->pcdata->strplus );
save.c:   fprintf( fp, "intplus          %d\n", ch->pcdata->intplus );
save.c:   fprintf( fp, "dexplus          %d\n", ch->pcdata->dexplus );
save.c:   fprintf( fp, "lckplus          %d\n", ch->pcdata->lckplus );
save.c:   fprintf( fp, "defplus          %d\n", ch->pcdata->defplus );
save.c:   fprintf( fp, "mattplus          %d\n", ch->pcdata->mattplus );
save.c:   fprintf( fp, "mlevel          %d\n", ch->pcdata->mlevel );
save.c:   fprintf( fp, "deflevel          %d\n", ch->pcdata->deflevel );
save.c:   fprintf( fp, "attlevel          %d\n", ch->pcdata->attlevel );
save.c:   fprintf( fp, "Favor        %d\n", ch->pcdata->favor );
save.c:   fprintf( fp, "Balance      %d\n", ch->pcdata->balance );
save.c:   fprintf( fp, "Glory        %d\n", ch->pcdata->quest_curr );
save.c:   fprintf( fp, "MGlory       %d\n", ch->pcdata->quest_accum );
save.c:   fprintf( fp, "Ap        %d\n", ch->pcdata->ap );   
save.c:   fprintf( fp, "Tier        %d\n", ch->pcdata->tier );   
save.c:   if( ch->pcdata && ch->pcdata->outcast_time )
save.c:      fprintf( fp, "Outcast_time %ld\n", ch->pcdata->outcast_time );
save.c:   if( ch->pcdata && ch->pcdata->nuisance )
save.c:      fprintf( fp, "NuisanceNew %ld %ld %d %d\n", ch->pcdata->nuisance->set_time,
save.c:               ch->pcdata->nuisance->max_time, ch->pcdata->nuisance->flags, ch->pcdata->nuisance->power );
save.c:   fprintf( fp, "Password     %s~\n", ch->pcdata->pwd );
save.c:   if( ch->pcdata->rank && ch->pcdata->rank[0] != '\0' )
save.c:      fprintf( fp, "Rank         %s~\n", ch->pcdata->rank );
save.c:   if( ch->pcdata->bestowments && ch->pcdata->bestowments[0] != '\0' )
save.c:      fprintf( fp, "Bestowments  %s~\n", ch->pcdata->bestowments );
save.c:   fprintf( fp, "Title        %s~\n", ch->pcdata->title );
save.c:   fprintf( fp, "Cpose        %s~\n", ch->pcdata->cpose );
save.c:   fprintf( fp, "Hometown        %s~\n", ch->pcdata->hometown );
save.c:   fprintf( fp, "Customclass        %s~\n", ch->pcdata->customclass );
save.c:   if( ch->pcdata->homepage && ch->pcdata->homepage[0] != '\0' )
save.c:      fprintf( fp, "Homepage     %s~\n", ch->pcdata->homepage );
save.c:   if( ch->pcdata->bio && ch->pcdata->bio[0] != '\0' )
save.c:      fprintf( fp, "Bio          %s~\n", ch->pcdata->bio );
save.c:   if( ch->pcdata->authed_by && ch->pcdata->authed_by[0] != '\0' )
save.c:      fprintf( fp, "AuthedBy     %s~\n", ch->pcdata->authed_by );
save.c:   if( ch->pcdata->min_snoop )
save.c:      fprintf( fp, "Minsnoop     %d\n", ch->pcdata->min_snoop );
save.c:   if( ch->pcdata->prompt && *ch->pcdata->prompt )
save.c:      fprintf( fp, "Prompt       %s~\n", ch->pcdata->prompt );
save.c:   if( ch->pcdata->fprompt && *ch->pcdata->fprompt )
save.c:      fprintf( fp, "FPrompt	     %s~\n", ch->pcdata->fprompt );
save.c:   if( ch->pcdata->pagerlen != 24 )
save.c:      fprintf( fp, "Pagerlen     %d\n", ch->pcdata->pagerlen );
save.c:      for( temp = ch->pcdata->first_ignored; temp; temp = temp->next )
save.c:      if( ch->pcdata->bamfin && ch->pcdata->bamfin[0] != '\0' )
save.c:         fprintf( fp, "Bamfin       %s~\n", ch->pcdata->bamfin );
save.c:      if( ch->pcdata->bamfout && ch->pcdata->bamfout[0] != '\0' )
save.c:         fprintf( fp, "Bamfout      %s~\n", ch->pcdata->bamfout );
save.c:      if( ch->pcdata && ch->pcdata->restore_time )
save.c:         fprintf( fp, "Restore_time %ld\n", ch->pcdata->restore_time );
save.c:      fprintf( fp, "WizInvis     %d\n", ch->pcdata->wizinvis );
save.c:      if( ch->pcdata->r_range_lo && ch->pcdata->r_range_hi )
save.c:         fprintf( fp, "RoomRange    %d %d\n", ch->pcdata->r_range_lo, ch->pcdata->r_range_hi );
save.c:      if( ch->pcdata->o_range_lo && ch->pcdata->o_range_hi )
save.c:         fprintf( fp, "ObjRange     %d %d\n", ch->pcdata->o_range_lo, ch->pcdata->o_range_hi );
save.c:      if( ch->pcdata->m_range_lo && ch->pcdata->m_range_hi )
save.c:         fprintf( fp, "MobRange     %d %d\n", ch->pcdata->m_range_lo, ch->pcdata->m_range_hi );
save.c:   if( ch->pcdata->council )
save.c:      fprintf( fp, "Council      %s~\n", ch->pcdata->council_name );
save.c:   if( ch->pcdata->deity_name && ch->pcdata->deity_name[0] != '\0' )
save.c:      fprintf( fp, "Deity	     %s~\n", ch->pcdata->deity_name );
save.c:   if( ch->pcdata->clan_name && ch->pcdata->clan_name[0] != '\0' )
save.c:      fprintf( fp, "Clan         %s~\n", ch->pcdata->clan_name );
save.c:   fprintf( fp, "Flags        %d\n", ch->pcdata->flags );
save.c:   if( ch->pcdata->release_date )
save.c:      fprintf( fp, "Helled       %d %s~\n", ( int )ch->pcdata->release_date, ch->pcdata->helled_by );
save.c:   fprintf( fp, "PKills       %d\n", ch->pcdata->pkills );
save.c:   fprintf( fp, "PDeaths      %d\n", ch->pcdata->pdeaths );
save.c:   fprintf( fp, "MKills       %d\n", ch->pcdata->mkills );
save.c:   fprintf( fp, "MDeaths      %d\n", ch->pcdata->mdeaths );
save.c:   fprintf( fp, "IllegalPK    %d\n", ch->pcdata->illegal_pk );
save.c:   fprintf( fp, "Timezone     %d\n", ch->pcdata->timezone );
save.c:            ch->pcdata->condition[0], ch->pcdata->condition[1], ch->pcdata->condition[2], ch->pcdata->condition[3] );
save.c:   if( ch->pcdata->recent_site )
save.c:      fprintf( fp, "Site         %s\n", ch->pcdata->recent_site );
save.c:      if( skill_table[sn]->name && ch->pcdata->learned[sn] > 0 )
save.c:               fprintf( fp, "Skill        %d '%s'\n", ch->pcdata->learned[sn], skill_table[sn]->name );
save.c:               fprintf( fp, "Ability      %d '%s'\n", ch->pcdata->learned[sn], skill_table[sn]->name );
save.c:               fprintf( fp, "Spell        %d '%s'\n", ch->pcdata->learned[sn], skill_table[sn]->name );
save.c:               fprintf( fp, "Weapon       %d '%s'\n", ch->pcdata->learned[sn], skill_table[sn]->name );
save.c:               fprintf( fp, "Tongue       %d '%s'\n", ch->pcdata->learned[sn], skill_table[sn]->name );
save.c:      if( ch->pcdata->killed[sn].vnum == 0 )
save.c:      fprintf( fp, "Killed       %d %d\n", ch->pcdata->killed[sn].vnum, ch->pcdata->killed[sn].count );
save.c:   ch->pcdata->filename = STRALLOC( name );
save.c:      ch->pcdata->recent_site = STRALLOC( d->host );
save.c:   ch->pcdata->condition[COND_THIRST] = 48;
save.c:   ch->pcdata->condition[COND_FULL] = 48;
save.c:   ch->pcdata->condition[COND_BLOODTHIRST] = 10;
save.c:   ch->pcdata->nuisance = NULL;
save.c:   ch->pcdata->wizinvis = 0;
save.c:   ch->pcdata->balance = 0;
save.c:   ch->pcdata->charmies = 0;
save.c:      ch->pcdata->learned[i] = 0;
save.c:   ch->pcdata->release_date = 0;
save.c:   ch->pcdata->helled_by = NULL;
save.c:   ch->pcdata->pagerlen = 24;
save.c:   ch->pcdata->first_ignored = NULL;   /* Ignore list */
save.c:   ch->pcdata->last_ignored = NULL;
save.c:   ch->pcdata->tell_history = NULL; /* imm only lasttell cmnd */
save.c:   ch->pcdata->lt_index = 0;  /* last tell index */
save.c:   ch->pcdata->hotboot = FALSE;  /* Never changed except when PC is saved during hotboot save */
save.c:                          preload ? "Preloading" : "Loading", ch->pcdata->filename, ( int )fst.st_size / 1024 );
save.c:               ch->pcdata->pet = mob;
save.c:      ch->pcdata->clan_name = STRALLOC( "" );
save.c:      ch->pcdata->clan = NULL;
save.c:      ch->pcdata->council_name = STRALLOC( "" );
save.c:      ch->pcdata->council = NULL;
save.c:      ch->pcdata->deity_name = STRALLOC( "" );
save.c:      ch->pcdata->deity = NULL;
save.c:      ch->pcdata->pet = NULL;
save.c:      ch->pcdata->pwd = str_dup( "" );
save.c:      ch->pcdata->bamfin = str_dup( "" );
save.c:      ch->pcdata->bamfout = str_dup( "" );
save.c:      ch->pcdata->rank = str_dup( "" );
save.c:      ch->pcdata->bestowments = str_dup( "" );
save.c:      ch->pcdata->title = STRALLOC( "" );
save.c:      ch->pcdata->customclass = STRALLOC( "" );
save.c:      ch->pcdata->homepage = str_dup( "" );
save.c:      ch->pcdata->bio = STRALLOC( "" );
save.c:      ch->pcdata->authed_by = STRALLOC( "" );
save.c:      ch->pcdata->prompt = STRALLOC( "" );
save.c:      ch->pcdata->fprompt = STRALLOC( "" );
save.c:      ch->pcdata->r_range_lo = 0;
save.c:      ch->pcdata->r_range_hi = 0;
save.c:      ch->pcdata->m_range_lo = 0;
save.c:      ch->pcdata->m_range_hi = 0;
save.c:      ch->pcdata->o_range_lo = 0;
save.c:      ch->pcdata->o_range_hi = 0;
save.c:      ch->pcdata->wizinvis = 0;
save.c:      ch->pcdata->timezone = -1;
save.c:      if( !ch->pcdata->clan_name )
save.c:         ch->pcdata->clan_name = STRALLOC( "" );
save.c:         ch->pcdata->clan = NULL;
save.c:      if( !ch->pcdata->council_name )
save.c:         ch->pcdata->council_name = STRALLOC( "" );
save.c:         ch->pcdata->council = NULL;
save.c:      if( !ch->pcdata->deity_name )
save.c:         ch->pcdata->deity_name = STRALLOC( "" );
save.c:         ch->pcdata->deity = NULL;
save.c:      if( !ch->pcdata->bio )
save.c:         ch->pcdata->bio = STRALLOC( "" );
save.c:      if( !ch->pcdata->authed_by )
save.c:         ch->pcdata->authed_by = STRALLOC( "" );
save.c:         if( ch->pcdata->wizinvis < 2 )
save.c:            ch->pcdata->wizinvis = ch->level;
save.c:   //                  KEY( "Att", ch->pcdata->att, fread_number( fp ) );
save.c:                     KEY( "Attplus", ch->pcdata->attplus, fread_number( fp ) );
save.c:                     KEY( "Attlevel", ch->pcdata->attlevel, fread_number( fp ) );
save.c:                     ch->pcdata->learned[sn] = value;
save.c:                           ch->pcdata->learned[sn] = 0;
save.c:                  ch->pcdata->age_bonus = x1;
save.c:                  ch->pcdata->day = x2;
save.c:                  ch->pcdata->month = x3;
save.c:                  ch->pcdata->year = x4;
save.c:            KEY( "Ap", ch->pcdata->ap, fread_number( fp ) );
save.c:            KEY( "AuthedBy", ch->pcdata->authed_by, fread_string( fp ) );
save.c:            KEY( "Balance", ch->pcdata->balance, fread_number( fp ) );
save.c:            KEY( "Bamfin", ch->pcdata->bamfin, fread_string_nohash( fp ) );
save.c:            KEY( "Bamfout", ch->pcdata->bamfout, fread_string_nohash( fp ) );
save.c:            KEY( "Bestowments", ch->pcdata->bestowments, fread_string_nohash( fp ) );
save.c:            KEY( "Bio", ch->pcdata->bio, fread_string( fp ) );
save.c:               ch->pcdata->clan_name = fread_string( fp );
save.c:                   && ch->pcdata->clan_name[0] != '\0' && ( ch->pcdata->clan = get_clan( ch->pcdata->clan_name ) ) == NULL )
save.c:                     ch->pcdata->clan_name );
save.c:                  STRFREE( ch->pcdata->clan_name );
save.c:                  ch->pcdata->clan_name = STRALLOC( "" );
save.c:            KEY( "Customclass", ch->pcdata->customclass, fread_string( fp ) );
save.c:               ch->pcdata->condition[0] = x1;
save.c:               ch->pcdata->condition[1] = x2;
save.c:               ch->pcdata->condition[2] = x3;
save.c:               ch->pcdata->condition[3] = x4;
save.c:               ch->pcdata->council_name = fread_string( fp );
save.c:                   && ch->pcdata->council_name[0] != '\0'
save.c:                   && ( ch->pcdata->council = get_council( ch->pcdata->council_name ) ) == NULL )
save.c:                     ch->pcdata->council_name );
save.c:                  STRFREE( ch->pcdata->council_name );
save.c:                  ch->pcdata->council_name = STRALLOC( "" );
save.c:               ch->pcdata->cpose = fread_string( fp );
save.c:               if( isalpha( ch->pcdata->cpose[0] ) || isdigit( ch->pcdata->cpose[0] ) )
save.c:                  snprintf( buf, MAX_STRING_LENGTH, " %s", ch->pcdata->cpose );
save.c:                  if( ch->pcdata->cpose )
save.c:                     STRFREE( ch->pcdata->cpose );
save.c:                  ch->pcdata->cpose = STRALLOC( buf );
save.c:                     KEY( "Dex", ch->pcdata->dex, fread_number( fp ) );
save.c:                     KEY( "Def", ch->pcdata->def, fread_number( fp ) );
save.c:                     KEY( "Dexplus", ch->pcdata->dexplus, fread_number( fp ) );
save.c:                     KEY( "Defplus", ch->pcdata->defplus, fread_number( fp ) );
save.c:                     KEY( "Deflevel", ch->pcdata->deflevel, fread_number( fp ) );
save.c:               ch->pcdata->deity_name = fread_string( fp );
save.c:                   && ch->pcdata->deity_name[0] != '\0'
save.c:                   && ( ch->pcdata->deity = get_deity( ch->pcdata->deity_name ) ) == NULL )
save.c:                  snprintf( buf, MAX_STRING_LENGTH, "&R\r\nYour deity, %s, has met its demise!\r\n", ch->pcdata->deity_name );
save.c:                  STRFREE( ch->pcdata->deity_name );
save.c:                  ch->pcdata->deity_name = STRALLOC( "" );
save.c:                  ch->pcdata->favor = 0;
save.c:            KEY( "Favor", ch->pcdata->favor, fread_number( fp ) );
save.c:            KEY( "Flags", ch->pcdata->flags, fread_number( fp ) );
save.c:            KEY( "FPrompt", ch->pcdata->fprompt, fread_string( fp ) );
save.c:            KEY( "Glory", ch->pcdata->quest_curr, fread_number( fp ) );
save.c:               ch->pcdata->clan_name = fread_string( fp );
save.c:                   && ch->pcdata->clan_name[0] != '\0' && ( ch->pcdata->clan = get_clan( ch->pcdata->clan_name ) ) == NULL )
save.c:                     ch->pcdata->clan_name );
save.c:                  STRFREE( ch->pcdata->clan_name );
save.c:                  ch->pcdata->clan_name = STRALLOC( "" );
save.c:               ch->pcdata->release_date = fread_number( fp );
save.c:               ch->pcdata->helled_by = fread_string( fp );
save.c:            KEY( "Homepage", ch->pcdata->homepage, fread_string_nohash( fp ) );
save.c:               ch->pcdata->hometown = fread_string( fp );
save.c:               if( isalpha( ch->pcdata->hometown[0] ) || isdigit( ch->pcdata->hometown[0] ) )
save.c:                  snprintf( buf, MAX_STRING_LENGTH, " %s", ch->pcdata->hometown );
save.c:                  if( ch->pcdata->hometown )
save.c:                     STRFREE( ch->pcdata->hometown );
save.c:                  ch->pcdata->hometown = STRALLOC( buf );
save.c:               for( ign = 0, inode = ch->pcdata->first_ignored; inode; inode = inode->next )
save.c:                  LINK( inode, ch->pcdata->first_ignored, ch->pcdata->last_ignored, next, prev );
save.c:            KEY( "IllegalPK", ch->pcdata->illegal_pk, fread_number( fp ) );
save.c:                   KEY( "Intel", ch->pcdata->intel, fread_number( fp ) );
save.c:                   KEY( "Intplus", ch->pcdata->intplus, fread_number( fp ) );
save.c:                  ch->pcdata->killed[killcnt].vnum = fread_number( fp );
save.c:                  ch->pcdata->killed[killcnt++].count = fread_number( fp );
save.c:                     KEY( "Lck", ch->pcdata->lck, fread_number( fp ) );
save.c:                     KEY( "Lckplus", ch->pcdata->lckplus, fread_number( fp ) );
save.c:                   KEY( "Matt", ch->pcdata->matt, fread_number( fp ) );
save.c:                   KEY( "Mattplus", ch->pcdata->mattplus, fread_number( fp ) );
save.c:                   KEY( "Mlevel", ch->pcdata->mlevel, fread_number( fp ) );
save.c:            KEY( "MDeaths", ch->pcdata->mdeaths, fread_number( fp ) );
save.c:            KEY( "MGlory", ch->pcdata->quest_accum, fread_number( fp ) );
save.c:            KEY( "Minsnoop", ch->pcdata->min_snoop, fread_number( fp ) );
save.c:            KEY( "MKills", ch->pcdata->mkills, fread_number( fp ) );
save.c:               ch->pcdata->m_range_lo = fread_number( fp );
save.c:               ch->pcdata->m_range_hi = fread_number( fp );
save.c:               CREATE( ch->pcdata->nuisance, NUISANCE_DATA, 1 );
save.c:               ch->pcdata->nuisance->set_time = fread_number( fp );
save.c:               ch->pcdata->nuisance->max_time = fread_number( fp );
save.c:               ch->pcdata->nuisance->flags = fread_number( fp );
save.c:               ch->pcdata->nuisance->power = 1;
save.c:               CREATE( ch->pcdata->nuisance, NUISANCE_DATA, 1 );
save.c:               ch->pcdata->nuisance->set_time = fread_number( fp );
save.c:               ch->pcdata->nuisance->max_time = fread_number( fp );
save.c:               ch->pcdata->nuisance->flags = fread_number( fp );
save.c:               ch->pcdata->nuisance->power = fread_number( fp );
save.c:            KEY( "Outcast_time", ch->pcdata->outcast_time, fread_number( fp ) );
save.c:               ch->pcdata->o_range_lo = fread_number( fp );
save.c:               ch->pcdata->o_range_hi = fread_number( fp );
save.c:            KEY( "Pagerlen", ch->pcdata->pagerlen, fread_number( fp ) );
save.c:            KEY( "Password", ch->pcdata->pwd, fread_string_nohash( fp ) );
save.c:            KEY( "PDeaths", ch->pcdata->pdeaths, fread_number( fp ) );
save.c:            KEY( "PKills", ch->pcdata->pkills, fread_number( fp ) );
save.c:            KEY( "Prompt", ch->pcdata->prompt, fread_string( fp ) );
save.c:            KEY( "Rank", ch->pcdata->rank, fread_string_nohash( fp ) );
save.c:            KEY( "Restore_time", ch->pcdata->restore_time, fread_number( fp ) );
save.c:               ch->pcdata->r_range_lo = fread_number( fp );
save.c:               ch->pcdata->r_range_hi = fread_number( fp );
save.c:                   KEY( "Str", ch->pcdata->str, fread_number( fp ) );
save.c:                   KEY( "Strplus", ch->pcdata->strplus, fread_number( fp ) );
save.c:                  ch->pcdata->prev_site = STRALLOC( fread_word( fp ) );
save.c:                  ch_printf( ch, "Last connected from: %s\r\n", ch->pcdata->prev_site );
save.c:                     ch->pcdata->learned[sn] = value;
save.c:                           ch->pcdata->learned[sn] = 0;
save.c:                     ch->pcdata->learned[sn] = value;
save.c:                           ch->pcdata->learned[sn] = 0;
save.c:               if( !ch->pcdata->pwd )
save.c:                  ch->pcdata->pwd = str_dup( "" );
save.c:               if( !ch->pcdata->bamfin )
save.c:                  ch->pcdata->bamfin = str_dup( "" );
save.c:               if( !ch->pcdata->bamfout )
save.c:                  ch->pcdata->bamfout = str_dup( "" );
save.c:               if( !ch->pcdata->bio )
save.c:                  ch->pcdata->bio = STRALLOC( "" );
save.c:               if( !ch->pcdata->rank )
save.c:                  ch->pcdata->rank = str_dup( "" );
save.c:               if( !ch->pcdata->bestowments )
save.c:                  ch->pcdata->bestowments = str_dup( "" );
save.c:               if( !ch->pcdata->title )
save.c:                  ch->pcdata->title = STRALLOC( "" );
save.c:               if( !ch->pcdata->customclass )
save.c:                  ch->pcdata->customclass = STRALLOC( "" );
save.c:               if( !ch->pcdata->cpose )
save.c:                  ch->pcdata->cpose = STRALLOC( "" );
save.c:               if( !ch->pcdata->hometown )
save.c:                  ch->pcdata->hometown = STRALLOC( "" );
save.c:               if( !ch->pcdata->homepage )
save.c:                  ch->pcdata->homepage = str_dup( "" );
save.c:               if( !ch->pcdata->authed_by )
save.c:                  ch->pcdata->authed_by = STRALLOC( "" );
save.c:               if( !ch->pcdata->prompt )
save.c:                  ch->pcdata->prompt = STRALLOC( "" );
save.c:               if( !ch->pcdata->fprompt )
save.c:                  ch->pcdata->fprompt = STRALLOC( "" );
save.c:                  ch->pcdata->killed[killcnt].vnum = 0;
save.c:                  CREATE( ch->pcdata->tell_history, const char *, 26 );
save.c:                     ch->pcdata->tell_history[i] = NULL;
save.c:               if( !ch->pcdata->prompt )
save.c:                  ch->pcdata->prompt = STRALLOC( "" );
save.c:               if( ch->pcdata->clan )
save.c:                     KEY( "Tier", ch->pcdata->tier, fread_number( fp ) );
save.c:                     ch->pcdata->learned[sn] = value;
save.c:                           ch->pcdata->learned[sn] = 0;
save.c:            KEY( "Timezone", ch->pcdata->timezone, fread_number( fp )); 
save.c:               ch->pcdata->title = fread_string( fp );
save.c:               if( isalpha( ch->pcdata->title[0] ) || isdigit( ch->pcdata->title[0] ) )
save.c:                  snprintf( buf, MAX_STRING_LENGTH, " %s", ch->pcdata->title );
save.c:                  if( ch->pcdata->title )
save.c:                     STRFREE( ch->pcdata->title );
save.c:                  ch->pcdata->title = STRALLOC( buf );
save.c:                     ch->pcdata->learned[sn] = value;
save.c:                           ch->pcdata->learned[sn] = 0;
save.c:            KEY( "WizInvis", ch->pcdata->wizinvis, fread_number( fp ) );
save.c:   if( IS_NPC( ch ) || !ch->pcdata->pet )
save.c:   mob = ch->pcdata->pet;
skills.c:   if( ch->pcdata->clan && ch->pcdata->clan == vch->pcdata->clan )
skills.c:         if( ch->pcdata->condition[COND_BLOODTHIRST] < blood )
skills.c:         if( ch->pcdata->condition[COND_BLOODTHIRST] < blood )
skills.c:               victim->pcdata->learned[sn] = adept;
skills.c:               victim->pcdata->learned[sn] = value;
skills.c:      victim->pcdata->learned[sn] = value;
skills.c:   if( IS_NPC( ch ) || ch->pcdata->learned[sn] <= 0 )
skills.c:   if( ch->pcdata->learned[sn] < adept )
skills.c:      schance = ch->pcdata->learned[sn] + ( 5 * skill_table[sn]->difficulty );
skills.c:      ch->pcdata->learned[sn] = UMIN( adept, ch->pcdata->learned[sn] + learn );
skills.c:      if( ch->pcdata->learned[sn] == adept ) /* fully learned! */
skills.c:   if( IS_NPC( ch ) || ch->pcdata->learned[sn] <= 0 )
skills.c:   if( ch->pcdata->learned[sn] < adept )
skills.c:      schance = ch->pcdata->learned[sn] + ( 5 * skill_table[sn]->difficulty );
skills.c:      ch->pcdata->learned[sn] = UMIN( adept, ch->pcdata->learned[sn] + learn );
skills.c:      if( ch->pcdata->learned[sn] == adept ) /* fully learned! */
skills.c:   if( IS_NPC( ch ) || ch->pcdata->learned[sn] <= 0 )
skills.c:   schance = ch->pcdata->learned[sn] + ( 5 * skill_table[sn]->difficulty );
skills.c:   if( ch->pcdata->learned[sn] < ( adept - 1 ) )
skills.c:      ch->pcdata->learned[sn] = UMIN( adept, ch->pcdata->learned[sn] + 1 );
skills.c:	    (IS_NPC(ch) ? 80 : ch->pcdata->learned[gsn_dig]) )
skills.c:   if( ch->pcdata->condition[COND_BLOODTHIRST] < 10 )
skills.c:          && ch->fighting && ch->pcdata->condition[COND_BLOODTHIRST] < ( 10 + ch->level ) )
skills.c:                               ( 10 + ch->level ) - ch->pcdata->condition[COND_BLOODTHIRST] ) );
skills.c:         if( ch->pcdata->condition[COND_FULL] <= 37 )
skills.c:          && ch->fighting && ch->pcdata->condition[COND_BLOODTHIRST] < ( 10 + ch->level ) )
skills.c:   if( IS_PKILL( ch ) && ch->pcdata->condition[COND_BLOODTHIRST] > 22 )
skills.c:   if( !IS_NPC( ch ) && ch->pcdata->clan )
skills.c:      location = get_room_index( ch->pcdata->clan->recall );
skills.c:   if( !IS_NPC( ch ) && !location && ch->level >= 5 && IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
skills.c:   if( !IS_NPC( victim ) && !IS_SET( victim->pcdata->flags, PCFLAG_GAG ) )
skills.c:   if( !IS_NPC( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_GAG ) )   /* SB */
skills.c:   if( !IS_NPC( victim ) && !IS_SET( victim->pcdata->flags, PCFLAG_GAG ) )
skills.c:   if( !IS_NPC( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_GAG ) )
skills.c:   if( !IS_NPC( victim ) && (!(victim->pcdata->learned[gsn_tumble] > 0 )))
skills.c:   if( !IS_NPC( victim ) && !IS_SET( victim->pcdata->flags, PCFLAG_GAG ) )
skills.c:   if( !IS_NPC( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_GAG ) )
skills.c:   if( !IS_NPC( ch ) && ( ( get_curr_dex( ch ) < 17 ) || ch->pcdata->condition[COND_DRUNK] > 0 ) )
skills.c:      if( ( !IS_SET( victim->pcdata->flags, PCFLAG_DEADLY )
skills.c:            || !IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
skills.c:   if( skill_table[gsn]->guild == 99 && !IS_NPC( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
Binary file smaug matches
special.c:            if( ch->pcdata->tier < trash->tier )
track.c:   if( !IS_NPC( ch ) && ch->pcdata->learned[gsn_track] <= 0 )
update.c:   add_hp = UMAX( 1, add_hp ) + ( ch->pcdata->lck * .3 );
update.c:   add_mana = UMAX( 0, add_mana ) + ( (ch->pcdata->lck * .4) + ch->pcdata->intel );
update.c:   add_move = UMAX( 10, add_move ) + (( ch->pcdata->lck * .5 ) + ch->pcdata->dex );
update.c:   ch->pcdata->str += 1;
update.c:   ch->pcdata->intel += 1;
update.c:   ch->pcdata->dex += 1;
update.c:   ch->pcdata->lck += 1;
update.c:   ch->pcdata->def += 1;
update.c:         if( ch->pcdata->condition[COND_BLOODTHIRST] <= 1 )
update.c:         else if( ch->pcdata->condition[COND_BLOODTHIRST] >= ( 8 + ch->level ) )
update.c:      if( ch->pcdata->condition[COND_FULL] == 0 )
update.c:      if( ch->pcdata->condition[COND_THIRST] == 0 )
update.c:      if( ch->pcdata->condition[COND_FULL] == 0 )
update.c:      if( ch->pcdata->condition[COND_THIRST] == 0 )
update.c:         if( ch->pcdata->condition[COND_BLOODTHIRST] <= 1 )
update.c:         else if( ch->pcdata->condition[COND_BLOODTHIRST] >= ( 8 + ch->level ) )
update.c:      if( ch->pcdata->condition[COND_FULL] == 0 )
update.c:      if( ch->pcdata->condition[COND_THIRST] == 0 )
update.c:   condition = ch->pcdata->condition[iCond];
update.c:      ch->pcdata->condition[iCond] = URANGE( 0, condition + value, 10 + ch->level );
update.c:      ch->pcdata->condition[iCond] = URANGE( 0, condition + value, 48 );
update.c:   if( ch->pcdata->condition[iCond] == 0 )
update.c:   if( ch->pcdata->condition[iCond] == 1 )
update.c:   if( ch->pcdata->condition[iCond] == 2 )
update.c:   if( ch->pcdata->condition[iCond] == 3 )
update.c:      if( !IS_NPC( ch ) && ch->pcdata->nuisance )
update.c:         if( ch->pcdata->nuisance->flags < MAX_NUISANCE_STAGE )
update.c:            temp = ch->pcdata->nuisance->max_time - ch->pcdata->nuisance->set_time;
update.c:            temp *= ch->pcdata->nuisance->flags;
update.c:            temp += ch->pcdata->nuisance->set_time;
update.c:               ++ch->pcdata->nuisance->flags;
update.c:               SET_BIT( ch->pcdata->flags, PCFLAG_IDLE );
update.c:         if( ch->pcdata->condition[COND_DRUNK] > 8 )
update.c:            worsen_mental_state( ch, ch->pcdata->condition[COND_DRUNK] / 8 );
update.c:         if( ch->pcdata->condition[COND_FULL] > 1 )
update.c:         if( ch->pcdata->condition[COND_THIRST] > 1 )
update.c:         if( CAN_PKILL( ch ) && ch->pcdata->condition[COND_THIRST] - 9 > 10 )
update.c:         if( !IS_NPC( ch ) && ch->pcdata->nuisance )
update.c:            value = ( ( 0 - ch->pcdata->nuisance->flags ) * ch->pcdata->nuisance->power );
update.c:      if( !IS_NPC( ch ) && !IS_IMMORTAL( ch ) && ch->pcdata->release_date > 0 && ch->pcdata->release_date <= current_time )
update.c:         if( ch->pcdata->clan )
update.c:            location = get_room_index( ch->pcdata->clan->recall );
update.c:         STRFREE( ch->pcdata->helled_by );
update.c:         ch->pcdata->helled_by = NULL;
update.c:         ch->pcdata->release_date = 0;
update.c:   if( IS_NPC( ch ) || ch->pcdata->condition[COND_DRUNK] <= 0 )
update.c:   drunk = ch->pcdata->condition[COND_DRUNK];
update.c:            if( IS_SET( d->character->pcdata->flags, PCFLAG_HINTS ) && number_bits( 1 ) == 0 )
act_comm.c:   drunk = ch->pcdata->condition[COND_DRUNK];
act_comm.c:            ch_printf( ch, "(%d) ", ( !IS_NPC( ch ) ) ? ch->pcdata->wizinvis : ch->mobinvis );
act_comm.c:            ch_printf( ch, "(%d) ", ( !IS_NPC( ch ) ) ? ch->pcdata->wizinvis : ch->mobinvis );
act_comm.c:            ch_printf( ch, "(%d) ", ( !IS_NPC( ch ) ) ? ch->pcdata->wizinvis : ch->mobinvis );
act_comm.c:            ch_printf( ch, "(%d) ", ( !IS_NPC( ch ) ) ? ch->pcdata->wizinvis : ch->mobinvis );
act_comm.c:            ch_printf( ch, "(%d) ", ( !IS_NPC( ch ) ) ? ch->pcdata->wizinvis : ch->mobinvis );
act_comm.c:            ch_printf( ch, "(%d) ", ( !IS_NPC( ch ) ) ? ch->pcdata->wizinvis : ch->mobinvis );
act_comm.c:             ( !IS_NPC( och ) && !IS_SET( och->pcdata->flags, PCFLAG_RETIRED ) ) )
act_comm.c:               && !( och->pcdata->council && !str_cmp( och->pcdata->council->name, "Newbie Council" ) ) ) )
act_comm.c:            if( vch->pcdata->clan != ch->pcdata->clan )
act_comm.c:            if( vch->pcdata->council != ch->pcdata->council )
act_comm.c:            snprintf( lbuf, MAX_INPUT_LENGTH + 4, "(%d) ", ( !IS_NPC( ch ) ) ? ch->pcdata->wizinvis : ch->mobinvis );
act_comm.c:         if( !IS_NPC( ch ) && ch->pcdata->nuisance
act_comm.c:             && ch->pcdata->nuisance->flags > 7
act_comm.c:             && ( number_percent(  ) < ( ( ch->pcdata->nuisance->flags - 7 ) * 10 * ch->pcdata->nuisance->power ) ) )
act_comm.c:         if( !IS_NPC( vch ) && vch->pcdata->nuisance &&
act_comm.c:             vch->pcdata->nuisance->flags > 7
act_comm.c:             && ( number_percent(  ) < ( ( vch->pcdata->nuisance->flags - 7 ) * 10 * vch->pcdata->nuisance->power ) ) )
act_comm.c:   if( IS_NPC( ch ) || !ch->pcdata->clan
act_comm.c:       || ch->pcdata->clan->clan_type == CLAN_ORDER || ch->pcdata->clan->clan_type == CLAN_GUILD )
act_comm.c:            && !( ch->pcdata->council && !str_cmp( ch->pcdata->council->name, "Newbie Council" ) ) ) )
act_comm.c:   if( IS_NPC( ch ) || !ch->pcdata->clan || ch->pcdata->clan->clan_type != CLAN_ORDER )
act_comm.c:   if( IS_NPC( ch ) || !ch->pcdata->council )
act_comm.c:   if( IS_NPC( ch ) || !ch->pcdata->clan || ch->pcdata->clan->clan_type != CLAN_GUILD )
act_comm.c:   if( !IS_IMMORTAL( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_RETIRED ) )
act_comm.c:   if( IS_SET( ch->pcdata->flags, PCFLAG_NOBECKON ) )
act_comm.c:   if( !IS_SET( victim->pcdata->flags, PCFLAG_BECKON ) && !IS_IMMORTAL( ch ) )
act_comm.c:   if( !IS_NPC( victim ) && IS_IMMORTAL( victim ) && victim->pcdata->tell_history &&
act_comm.c:      victim->pcdata->lt_index = tolower( IS_NPC( ch ) ? ch->short_descr[0] : ch->name[0] ) - 'a';
act_comm.c:      if( victim->pcdata->tell_history[victim->pcdata->lt_index] )
act_comm.c:         STRFREE( victim->pcdata->tell_history[victim->pcdata->lt_index] );
act_comm.c:      victim->pcdata->tell_history[victim->pcdata->lt_index] = STRALLOC( buf );
act_comm.c:   if( !IS_NPC( victim ) && IS_IMMORTAL( victim ) && victim->pcdata->tell_history &&
act_comm.c:      victim->pcdata->lt_index = tolower( IS_NPC( ch ) ? ch->short_descr[0] : ch->name[0] ) - 'a';
act_comm.c:      if( victim->pcdata->tell_history[victim->pcdata->lt_index] )
act_comm.c:         STRFREE( victim->pcdata->tell_history[victim->pcdata->lt_index] );
act_comm.c:      victim->pcdata->tell_history[victim->pcdata->lt_index] = STRALLOC( buf );
act_comm.c:   if( !IS_NPC( victim ) && IS_IMMORTAL( victim ) && victim->pcdata->tell_history &&
act_comm.c:      victim->pcdata->lt_index = tolower( IS_NPC( ch ) ? ch->short_descr[0] : ch->name[0] ) - 'a';
act_comm.c:      if( victim->pcdata->tell_history[victim->pcdata->lt_index] )
act_comm.c:         STRFREE( victim->pcdata->tell_history[victim->pcdata->lt_index] );
act_comm.c:      victim->pcdata->tell_history[victim->pcdata->lt_index] = STRALLOC( buf );
act_comm.c:   if( IS_NPC( ch ) || !IS_IMMORTAL( ch ) || !ch->pcdata->tell_history )
act_comm.c:      tindex = ch->pcdata->lt_index;
act_comm.c:   if( ch->pcdata->tell_history[tindex] )
act_comm.c:      send_to_char( ch->pcdata->tell_history[tindex], ch );
act_comm.c:   if( get_trust( ch ) >= LEVEL_ASCENDANT || is_name( "bug", ch->pcdata->bestowments ) )
act_comm.c:   if( ch->level >= LEVEL_HERO && !ch->pcdata->pet ) /* Pet crash fix */
act_comm.c:   if( sysdata.save_pets && ch->pcdata->pet )
act_comm.c:      act( AT_BYE, "$N follows $S master into the Void.", ch, NULL, ch->pcdata->pet, TO_ROOM );
act_comm.c:      extract_char( ch->pcdata->pet, TRUE );
act_comm.c:   if( ch->pcdata->clan )
act_comm.c:      save_clan( ch->pcdata->clan );
act_comm.c:   if( !ch->pcdata->council )
act_comm.c:   if( str_cmp( ch->pcdata->council->name, "Newbie Council" ) )
act_comm.c:                               && victim->pcdata->council && !str_cmp( victim->pcdata->council->name, "Newbie Council" ) ) )
act_comm.c:      master->pcdata->pet = ch;
act_comm.c:   if( IS_NPC( ch ) && !IS_NPC( ch->master ) && ch->master->pcdata->pet == ch )
act_comm.c:      ch->master->pcdata->pet = NULL;
act_comm.c:         ch->master->pcdata->charmies--;
act_comm.c:                          IS_VAMPIRE( gch ) ? gch->pcdata->condition[COND_BLOODTHIRST] : gch->mana,
act_comm.c:      if( ch->pcdata->clan == cch->pcdata->clan && ch->pcdata->clan != NULL )
act_comm.c:               return ch->pcdata->learned[sn];
act_comm.c:            if( ch->pcdata->learned[sn] >= 99 )
act_comm.c:            if( lang_array[langs] == LANG_CLAN && ( IS_NPC( ch ) || !ch->pcdata->clan ) )
act_comm.c:          lang_array[lang] == LANG_COMMON || ch->pcdata->learned[sn] >= 99 )
act_comm.c:      if( countlangs( ch->speaks ) >= ( ch->level / 10 ) && ch->pcdata->learned[sn] <= 0 )
act_comm.c:      ch->pcdata->learned[sn] += prct;
act_comm.c:      ch->pcdata->learned[sn] = UMIN( ch->pcdata->learned[sn], 99 );
act_comm.c:      if( ch->pcdata->learned[sn] == prct )
act_comm.c:      else if( ch->pcdata->learned[sn] < 60 )
act_comm.c:      else if( ch->pcdata->learned[sn] < 60 + prct )
act_comm.c:      else if( ch->pcdata->learned[sn] < 99 )
act_info.c:      * ( IS_NPC( ch ) ? 1 : ( ch->pcdata->condition[COND_DRUNK] ? ( ch->pcdata->condition[COND_DRUNK] / 12 ) : 1 ) );
act_info.c:         snprintf( buf1, MAX_STRING_LENGTH, "(Invis %d) ", victim->pcdata->wizinvis );
act_info.c:      if( victim->pcdata->clan
act_info.c:          && IS_SET( victim->pcdata->flags, PCFLAG_DEADLY )
act_info.c:          && victim->pcdata->clan->badge
act_info.c:          && ( victim->pcdata->clan->clan_type != CLAN_ORDER && victim->pcdata->clan->clan_type != CLAN_GUILD ) )
act_info.c:         ch_printf_color( ch, "&P%s ", victim->pcdata->clan->badge );
act_info.c:               mudstrlcat( buf, victim->pcdata->title, MAX_STRING_LENGTH );
act_info.c:    mudstrlcat( buf, victim->pcdata->title, MAX_STRING_LENGTH );
act_info.c:    mudstrlcat( buf, victim->pcdata->cpose, MAX_STRING_LENGTH );
act_info.c:   else if( ch->pcdata->learned[gsn_peek] > 0 )
act_info.c:      SET_BIT( ch->pcdata->flags, PCFLAG_HELPSTART );
act_info.c:      if( wch->level < iLevelLower || wch->level > iLevelUpper || ( fPkill && !CAN_PKILL( wch ) ) || ( fImmortalOnly && wch->level < LEVEL_IMMORTAL ) || ( fClassRestrict && !rgfClass[wch->Class] ) || ( fRaceRestrict && !rgfRace[wch->race] ) || ( fClanMatch && ( pClan != wch->pcdata->clan ) )  /* SB */
act_info.c:          || ( fCouncilMatch && ( pCouncil != wch->pcdata->council ) )  /* SB */
act_info.c:          || ( fDeityMatch && ( pDeity != wch->pcdata->deity ) ) )
act_info.c:      if( fLeader && !( wch->pcdata->council &&
act_info.c:                        ( ( wch->pcdata->council->head2 &&
act_info.c:                            !str_cmp( wch->pcdata->council->head2, wch->name ) ) ||
act_info.c:                          ( wch->pcdata->council->head &&
act_info.c:                            !str_cmp( wch->pcdata->council->head, wch->name ) ) ) ) &&
act_info.c:          !( wch->pcdata->clan && ( ( wch->pcdata->clan->deity &&
act_info.c:                                      !str_cmp( wch->pcdata->clan->deity, wch->name ) )
act_info.c:                                    || ( wch->pcdata->clan->leader
act_info.c:                                         && !str_cmp( wch->pcdata->clan->leader, wch->name ) )
act_info.c:                                    || ( wch->pcdata->clan->number1
act_info.c:                                         && !str_cmp( wch->pcdata->clan->number1, wch->name ) )
act_info.c:                                    || ( wch->pcdata->clan->number2
act_info.c:                                         && !str_cmp( wch->pcdata->clan->number2, wch->name ) ) ) ) )
act_info.c:      if( fGroup && !wch->leader && !IS_SET( wch->pcdata->flags, PCFLAG_GROUPWHO ) && ( !whogr_p || !whogr_p->indent ) )
act_info.c:      if( fShowHomepage && wch->pcdata->homepage && wch->pcdata->homepage[0] != '\0' )
act_info.c:         snprintf( char_name, MAX_INPUT_LENGTH, "<A HREF=\"%s\">%s</A>", show_tilde( wch->pcdata->homepage ), wch->name );
act_info.c:      else if( wch->pcdata->clan
act_info.c:               && !str_cmp( wch->name, wch->pcdata->clan->leader ) && wch->pcdata->clan->leadrank[0] != '\0' )
act_info.c:         Class = wch->pcdata->clan->leadrank;
act_info.c:      else if( wch->pcdata->clan
act_info.c:               && !str_cmp( wch->name, wch->pcdata->clan->number1 ) && wch->pcdata->clan->onerank[0] != '\0' )
act_info.c:         Class = wch->pcdata->clan->onerank;
act_info.c:      else if( wch->pcdata->clan
act_info.c:               && !str_cmp( wch->name, wch->pcdata->clan->number2 ) && wch->pcdata->clan->tworank[0] != '\0' )
act_info.c:         Class = wch->pcdata->clan->tworank;
act_info.c:      else if( wch->pcdata->rank && wch->pcdata->rank[0] != '\0' )
act_info.c:         Class = wch->pcdata->rank;
act_info.c:      if( wch->pcdata->clan )
act_info.c:         CLAN_DATA *pclan = wch->pcdata->clan;
act_info.c:      if( wch->pcdata->council )
act_info.c:         if( wch->pcdata->council->head2 == NULL )
act_info.c:            if( !str_cmp( wch->name, wch->pcdata->council->head ) )
act_info.c:            if( !str_cmp( wch->name, wch->pcdata->council->head ) || !str_cmp( wch->name, wch->pcdata->council->head2 ) )
act_info.c:         mudstrlcat( council_name, wch->pcdata->council_name, MAX_INPUT_LENGTH );
act_info.c:         snprintf( invis_str, MAX_INPUT_LENGTH, "(%d) ", wch->pcdata->wizinvis );
act_info.c:                wch->pcdata->customclass,
act_info.c:                char_name, wch->pcdata->title, extra_title, clan_name, council_name );
act_info.c:       && IS_SET( victim->pcdata->flags, PCFLAG_DND ) && get_trust( ch ) < get_trust( victim ) )
act_info.c:             && ( get_trust( ch ) >= get_trust( victim ) || !IS_SET( victim->pcdata->flags, PCFLAG_DND ) ) )
act_info.c:            else if( CAN_PKILL( victim ) && victim->pcdata->clan
act_info.c:                     && victim->pcdata->clan->clan_type != CLAN_ORDER && victim->pcdata->clan->clan_type != CLAN_GUILD )
act_info.c:               pager_printf_color( ch, "%-18s\t", victim->pcdata->clan->badge );
act_info.c:             && ( skill->guild != CLASS_NONE && ( !IS_GUILDED( ch ) || ( ch->pcdata->clan->Class != skill->guild ) ) ) )
act_info.c:         if( ch->pcdata->learned[sn] <= 0 && SPELL_FLAG( skill, SF_SECRETSKILL ) )
act_info.c:         if( ch->pcdata->learned[normalSn] > 0 )
act_info.c:         pager_printf( ch, " %3d%% ", ch->pcdata->learned[normalSn] );
act_info.c:	     && ch->pcdata->clan->class != skill_table[sn]->guild )
act_info.c:      if( ch->pcdata->learned[sn] >= adept )
act_info.c:         ch->pcdata->learned[sn] += int_app[get_curr_int( ch )].learn;
act_info.c:         if( ch->pcdata->learned[sn] >= adept )
act_info.c:            ch->pcdata->learned[sn] = adept;
act_info.c:   DISPOSE( ch->pcdata->pwd );
act_info.c:   ch->pcdata->pwd = str_dup( pwdnew );
act_info.c:      if( !IS_NPC( ch ) && ch->pcdata->clan )
act_info.c:         if( ch->pcdata->clan->clan_type == CLAN_ORDER )
act_info.c:         else if( ch->pcdata->clan->clan_type == CLAN_GUILD )
act_info.c:      if( IS_IMMORTAL( ch ) || ( ch->pcdata->council && !str_cmp( ch->pcdata->council->name, "Newbie Council" ) ) )
act_info.c:      if( !IS_NPC( ch ) && ch->pcdata->council )
act_info.c:      if( !IS_NPC( ch ) && IS_SET( ch->pcdata->flags, PCFLAG_RETIRED ) )
act_info.c:      else if( !str_cmp( arg + 1, "clan" ) && !IS_NPC( ch ) && ch->pcdata->clan
act_info.c:               && ch->pcdata->clan->clan_type != CLAN_ORDER && ch->pcdata->clan->clan_type != CLAN_GUILD )
act_info.c:      else if( !str_cmp( arg + 1, "council" ) && !IS_NPC( ch ) && ch->pcdata->council )
act_info.c:      else if( !str_cmp( arg + 1, "guild" ) && !IS_NPC( ch ) && ch->pcdata->clan
act_info.c:               && ch->pcdata->clan->clan_type == CLAN_GUILD )
act_info.c:                                                  || ( ch->pcdata->council
act_info.c:                                                       && !str_cmp( ch->pcdata->council->name, "Newbie Council" ) ) ) )
act_info.c:      else if( !str_cmp( arg + 1, "order" ) && !IS_NPC( ch ) && ch->pcdata->clan
act_info.c:               && ch->pcdata->clan->clan_type == CLAN_ORDER )
act_info.c:          * if (ch->pcdata->clan)
act_info.c:          * if (ch->pcdata->council)
act_info.c:          * if (ch->pcdata->guild)
act_info.c:          * if (ch->pcdata->clan)
act_info.c:          * if (ch->pcdata->council)
act_info.c:                 IS_SET( ch->pcdata->flags, PCFLAG_PAGERON ) ? "[+] PAGER"
act_info.c:                 IS_SET( ch->pcdata->flags, PCFLAG_GAG ) ? "[+] GAG"
act_info.c:                 IS_SET( ch->pcdata->flags, PCFLAG_NORECALL ) ? "[+] NORECALL"
act_info.c:                 : "[-] norecall", IS_SET( ch->pcdata->flags, PCFLAG_NOSUMMON ) ? "[+] NOSUMMON" : "[-] nosummon" );
act_info.c:      if( !IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
act_info.c:                 IS_SET( ch->pcdata->flags, PCFLAG_GROUPWHO ) ? "[+] GROUPWHO" : "[-] groupwho",
act_info.c:                 IS_SET( ch->pcdata->flags, PCFLAG_NOINTRO ) ? "[+] NOINTRO" : "[-] nointro",
act_info.c:                 IS_SET( ch->pcdata->flags, PCFLAG_BECKON ) ? "[+] BECKON" : "[-] beckon" );
act_info.c:      ch_printf_color( ch, "Pager Length (%d)    Wimpy (&W%d&w)", ch->pcdata->pagerlen, ch->wimpy );
act_info.c:                 IS_SET( ch->pcdata->flags, PCFLAG_NODESC ) ? " You are not permitted to set your description.\r\n" : "" );
act_info.c:         if( ( bit == PLR_FLEE || bit == PLR_NICE || bit == PLR_SHOVEDRAG ) && IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
act_info.c:            SET_BIT( ch->pcdata->flags, bit );
act_info.c:            REMOVE_BIT( ch->pcdata->flags, bit );
act_info.c:         if( ch->pcdata->learned[normalSn] <= 0 && SPELL_FLAG( skill, SF_SECRETSKILL ) )
act_info.c:                          skn, skill->name, ch->pcdata->learned[normalSn], skill->skill_adept[ch->Class], buf );
act_info.c:                 victim->pcdata->title,
act_info.c:                 victim->sex == SEX_FEMALE ? "She" : "It", IS_SET( victim->pcdata->flags, PCFLAG_DEADLY ) ? "" : "non-" );
act_info.c:   if( ( pclan = victim->pcdata->clan ) != NULL )
act_info.c:   if( victim->pcdata->council )
act_info.c:      if( !str_cmp( victim->name, victim->pcdata->council->head ) )
act_info.c:            victim->pcdata->council->head2 == NULL ? "Head" : "Co-Head",
act_info.c:            victim->pcdata->council->name );
act_info.c:      else if( victim->pcdata->council->head2 && !str_cmp ( victim->name, victim->pcdata->council->head2 ) )
act_info.c:            victim->pcdata->council->name );
act_info.c:            victim->pcdata->council->name );
act_info.c:   if( victim->pcdata->deity )
act_info.c:                    victim->sex == SEX_MALE ? "He" : victim->sex == SEX_FEMALE ? "She" : "It", victim->pcdata->deity->name );
act_info.c:   if( victim->pcdata->homepage && victim->pcdata->homepage[0] != '\0' )
act_info.c:                    victim->sex == SEX_FEMALE ? "Her" : "Its", show_tilde( victim->pcdata->homepage ) );
act_info.c:   if( victim->pcdata->bio && victim->pcdata->bio[0] != '\0' )
act_info.c:      pager_printf( ch, " %s's personal bio:\r\n%s", victim->name, victim->pcdata->bio );
act_info.c:      if( victim->pcdata->authed_by && victim->pcdata->authed_by[0] != '\0' )
act_info.c:         pager_printf( ch, "%s was authorized by %s.\r\n", victim->name, victim->pcdata->authed_by );
act_info.c:                    victim->name, victim->pcdata->mkills, victim->pcdata->mdeaths );
act_info.c:      if( victim->pcdata->pkills || victim->pcdata->pdeaths )
act_info.c:                       victim->name, victim->pcdata->pkills, victim->pcdata->pdeaths );
act_info.c:      if( victim->pcdata->illegal_pk )
act_info.c:         pager_printf( ch, "%s has committed %d illegal player kills.\r\n", victim->name, victim->pcdata->illegal_pk );
act_info.c:                    victim->name, ( victim->pcdata->release_date == 0 ) ? "not " : "" );
act_info.c:      if( victim->pcdata->nuisance )
act_info.c:                             victim->pcdata->nuisance->flags, MAX_NUISANCE_STAGE, victim->pcdata->nuisance->power,
act_info.c:                             ctime( &victim->pcdata->nuisance->set_time ) );
act_info.c:      if( victim->pcdata->release_date != 0 )
act_info.c:                       victim->pcdata->helled_by, ctime( &victim->pcdata->release_date ) );
act_info.c:         || xIS_SET( victim->act, PLR_NO_TELL ) || IS_SET( victim->pcdata->flags, PCFLAG_NOBECKON ) || IS_SET( victim->pcdata->flags, PCFLAG_NOTITLE )
act_info.c:         || IS_SET( victim->pcdata->flags, PCFLAG_NODESC ) || IS_SET( victim->pcdata->flags, PCFLAG_NOBIO ) || IS_SET( victim->pcdata->flags, PCFLAG_NOCPOSE ) )
act_info.c:         if( IS_SET( victim->pcdata->flags, PCFLAG_NOBECKON ) )
act_info.c:         if( IS_SET( victim->pcdata->flags, PCFLAG_NOTITLE ) )
act_info.c:         if( IS_SET( victim->pcdata->flags, PCFLAG_NOBIO ) )
act_info.c:         if( IS_SET( victim->pcdata->flags, PCFLAG_NODESC ) )
act_info.c:         if( IS_SET( victim->pcdata->flags, PCFLAG_NOCPOSE ) )
act_info.c:      else if( victim->pcdata->recent_site )
act_info.c:         pager_printf( ch, "%s's most recent IP: %s\r\n ", victim->name, victim->pcdata->recent_site );
act_info.c:      if( IS_SET( ch->pcdata->flags, PCFLAG_PAGERON ) )
act_info.c:         ch_printf( ch, "Pager is now enabled at %d lines.\r\n", ch->pcdata->pagerlen );
act_info.c:   ch->pcdata->pagerlen = atoi( arg );
act_info.c:   if( ch->pcdata->pagerlen < 5 )
act_info.c:      ch->pcdata->pagerlen = 5;
act_info.c:   ch_printf( ch, "Page pausing set to %d lines.\r\n", ch->pcdata->pagerlen );
act_info.c:      if( !ch->pcdata->first_ignored )
act_info.c:      for( temp = ch->pcdata->first_ignored; temp; temp = temp->next )
act_info.c:      for( temp = ch->pcdata->first_ignored; temp; temp = next )
act_info.c:         UNLINK( temp, ch->pcdata->first_ignored, ch->pcdata->last_ignored, next, prev );
act_info.c:      for( temp = ch->pcdata->first_ignored, i = 0; temp; temp = temp->next, i++ )
act_info.c:            UNLINK( temp, ch->pcdata->first_ignored, ch->pcdata->last_ignored, next, prev );
act_info.c:         LINK( inew, ch->pcdata->first_ignored, ch->pcdata->last_ignored, next, prev );
act_info.c:   for( temp = ch->pcdata->first_ignored; temp; temp = temp->next )
act_move.c: if( ch->pcdata->cpose )
act_move.c:      ch->pcdata->cpose = str_dup( " is here." );
act_move.c:      if( ch->pcdata->nuisance && ch->pcdata->nuisance->flags > 8 &&
act_move.c:          number_percent(  ) > ( ch->pcdata->nuisance->flags * ch->pcdata->nuisance->power ) )
act_move.c:        if ( IS_IMMORTAL( ch ) && IS_SET( ch->pcdata->flags, PCFLAG_BUILDWALK ) )
act_move.c:        if ( !IS_SET( ch->pcdata->flags, PCFLAG_BUILDWALK ) )
act_move.c:        if ( IS_IMMORTAL( ch ) && IS_SET( ch->pcdata->flags, PCFLAG_BUILDWALK ) )
act_move.c:        if ( !IS_SET( ch->pcdata->flags, PCFLAG_BUILDWALK ) )
act_move.c:        if ( IS_IMMORTAL( ch ) && IS_SET( ch->pcdata->flags, PCFLAG_BUILDWALK ) )
act_move.c:        if ( !IS_SET( ch->pcdata->flags, PCFLAG_BUILDWALK ) )
act_move.c:        if ( IS_IMMORTAL( ch ) && IS_SET( ch->pcdata->flags, PCFLAG_BUILDWALK ) )
act_move.c:        if ( !IS_SET( ch->pcdata->flags, PCFLAG_BUILDWALK ) )
act_move.c:        if ( IS_IMMORTAL( ch ) && IS_SET( ch->pcdata->flags, PCFLAG_BUILDWALK ) )
act_move.c:        if ( !IS_SET( ch->pcdata->flags, PCFLAG_BUILDWALK ) )
act_move.c:        if ( IS_IMMORTAL( ch ) && IS_SET( ch->pcdata->flags, PCFLAG_BUILDWALK ) )
act_move.c:        if ( !IS_SET( ch->pcdata->flags, PCFLAG_BUILDWALK ) )
act_move.c:        if ( IS_IMMORTAL( ch ) && IS_SET( ch->pcdata->flags, PCFLAG_BUILDWALK ) )
act_move.c:        if ( !IS_SET( ch->pcdata->flags, PCFLAG_BUILDWALK ) )
act_move.c:        if ( IS_IMMORTAL( ch ) && IS_SET( ch->pcdata->flags, PCFLAG_BUILDWALK ) )
act_move.c:        if ( !IS_SET( ch->pcdata->flags, PCFLAG_BUILDWALK ) )
act_move.c:        if ( IS_IMMORTAL( ch ) && IS_SET( ch->pcdata->flags, PCFLAG_BUILDWALK ) )
act_move.c:        if ( !IS_SET( ch->pcdata->flags, PCFLAG_BUILDWALK ) )
act_move.c:        if ( IS_IMMORTAL( ch ) && IS_SET( ch->pcdata->flags, PCFLAG_BUILDWALK ) )
act_move.c:        if ( !IS_SET( ch->pcdata->flags, PCFLAG_BUILDWALK ) )
act_move.c:    if ( IS_IMMORTAL( ch ) && IS_SET( ch->pcdata->flags, PCFLAG_BUILDWALK ) )
act_move.c:            location = make_room( vnum, ch->pcdata->area );
act_obj.c:                && !IS_NPC( ch ) && IS_SET( ch->pcdata->flags, PCFLAG_DEADLY )
act_obj.c:   if( !IS_NPC( ch ) && ( !IS_PKILL( ch ) || ( IS_PKILL( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_GAG ) ) ) )
act_obj.c:   if( IS_NPC( ch ) || ch->pcdata->learned[gsn_dual_wield] )
act_obj.c:   if( ch->pcdata->tier < obj->tier )
act_obj.c:   if( !IS_NPC( ch ) && ch->pcdata->deity && ch->pcdata->deity->name[0] != '\0' )
act_obj.c:      mudstrlcpy( name, ch->pcdata->deity->name, 50 );
act_obj.c:   else if( !IS_NPC( ch ) && ch->pcdata->clan && ch->pcdata->clan->deity[0] != '\0' )
act_obj.c:      mudstrlcpy( name, ch->pcdata->clan->deity, 50 );
act_obj.c:         if( !IS_NPC( vch ) && xIS_SET( vch->act, PLR_WIZINVIS ) && vch->pcdata->wizinvis >= LEVEL_IMMORTAL )
act_wiz.c:      if( IS_SET( ch->pcdata->flags, PCFLAG_DND ) )
act_wiz.c:         REMOVE_BIT( ch->pcdata->flags, PCFLAG_DND );
act_wiz.c:         SET_BIT( ch->pcdata->flags, PCFLAG_DND );
act_wiz.c:            SET_BIT( vic->pcdata->flags, PCFLAG_WATCH );
act_wiz.c:            SET_BIT( vic->pcdata->flags, PCFLAG_WATCH );
act_wiz.c:      victim->pcdata->auth_state = 3;
act_wiz.c:      if( victim->pcdata->authed_by )
act_wiz.c:         STRFREE( victim->pcdata->authed_by );
act_wiz.c:      victim->pcdata->authed_by = QUICKLINK( ch->name );
act_wiz.c:      victim->pcdata->auth_state = 2;
act_wiz.c:      victim->pcdata->auth_state = 2;
act_wiz.c:      victim->pcdata->auth_state = 2;
act_wiz.c:      victim->pcdata->auth_state = 2;
act_wiz.c:      victim->pcdata->auth_state = 2;
act_wiz.c:      victim->pcdata->auth_state = 2;
act_wiz.c:      DISPOSE( ch->pcdata->bamfin );
act_wiz.c:      ch->pcdata->bamfin = newbamf;
act_wiz.c:      DISPOSE( ch->pcdata->bamfout );
act_wiz.c:      ch->pcdata->bamfout = newbamf;
act_wiz.c:   DISPOSE( ch->pcdata->rank );
act_wiz.c:      ch->pcdata->rank = str_dup( "" );
act_wiz.c:      ch->pcdata->rank = newrank;
act_wiz.c:      REMOVE_BIT( victim->pcdata->flags, PCFLAG_RETIRED );
act_wiz.c:      SET_BIT( victim->pcdata->flags, PCFLAG_RETIRED );
act_wiz.c:            || victim->desc->connected == CON_EDITING ) && IS_SET( victim->pcdata->flags, PCFLAG_DND ) )
act_wiz.c:   if( wch && !IS_NPC( wch ) && IS_SET( wch->pcdata->flags, PCFLAG_DND ) && get_trust( ch ) < get_trust( wch ) )
act_wiz.c:   if( !IS_NPC( victim ) && victim->pcdata->clan )
act_wiz.c:                          victim->pcdata->clan->clan_type == CLAN_ORDER ? "Order" :
act_wiz.c:                          victim->pcdata->clan->clan_type == CLAN_GUILD ? "Guild" : "Clan", victim->pcdata->clan->name );
act_wiz.c:                          victim->trust, victim->pcdata->authed_by[0] != '\0' ? victim->pcdata->authed_by : "(unknown)" );
act_wiz.c:      pager_printf_color( ch, "&cRecent IP: &w%-15s", victim->pcdata->recent_site ?
act_wiz.c:         victim->pcdata->recent_site : "Unknown" );
act_wiz.c:      pager_printf_color( ch, "&cPrevious IP: &w%-15s", victim->pcdata->prev_site ?
act_wiz.c:         victim->pcdata->prev_site : "Unknown" );
act_wiz.c:         str_cmp( victim->pcdata->rank, "" ) ? victim->pcdata->rank : "(default)" );
act_wiz.c:   if( !IS_NPC( victim ) && victim->pcdata->release_date != 0 )
act_wiz.c:                          ctime( &victim->pcdata->release_date ), victim->pcdata->helled_by );
act_wiz.c:                       IS_NPC( victim ) ? victim->pIndexData->killed : victim->pcdata->mdeaths + victim->pcdata->pdeaths );
act_wiz.c:                       victim->pcdata->str, victim->pcdata->intel, victim->pcdata->dex, victim->pcdata->lck );
act_wiz.c:   pager_printf_color( ch, "&cLevel   : &P%-2d        &cTier: &W%d&D      \r", victim->level, victim->pcdata->tier );
act_wiz.c:      snprintf( bdbuf, MAX_STRING_LENGTH, "%d/%d", victim->pcdata->condition[COND_BLOODTHIRST], 10 + victim->level );
act_wiz.c:                          victim->pcdata->deity ? victim->pcdata->deity->name : "(none)",
act_wiz.c:                          victim->pcdata->favor, victim->pcdata->quest_curr, victim->pcdata->quest_accum );
act_wiz.c:                          victim->pcdata->condition[COND_THIRST],
act_wiz.c:                          victim->pcdata->condition[COND_FULL], victim->pcdata->condition[COND_DRUNK] );
act_wiz.c:      pager_printf_color( ch, "&cPcflags    : &w%s\r\n", flag_string( victim->pcdata->flags, pc_flags ) );
act_wiz.c:      if( victim->pcdata->nuisance )
act_wiz.c:                             victim->pcdata->nuisance->flags, MAX_NUISANCE_STAGE, victim->pcdata->nuisance->power,
act_wiz.c:                             ctime( &victim->pcdata->nuisance->set_time ) );
act_wiz.c:   if( victim->pcdata && victim->pcdata->bestowments && victim->pcdata->bestowments[0] != '\0' )
act_wiz.c:      pager_printf_color( ch, "&cBestowments: &w%s\r\n", victim->pcdata->bestowments );
act_wiz.c:   if( owner->pcdata->deity )
act_wiz.c:                          owner->level, owner->pcdata->favor, owner->pcdata->deity->name, owner->pcdata->deity->scorpse );
act_wiz.c:   if( get_trust( victim ) >= get_trust( ch ) || ( victim->pcdata && victim->pcdata->min_snoop > get_trust( ch ) ) )
act_wiz.c:      if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
act_wiz.c:      if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
act_wiz.c:      victim->pcdata->learned[sn] = 0;
act_wiz.c:         if( victim->pcdata->bestowments )
act_wiz.c:            DISPOSE( victim->pcdata->bestowments );
act_wiz.c:         victim->pcdata->bestowments = str_dup( "" );
act_wiz.c:         victim->pcdata->learned[sn] = 0;
act_wiz.c:      DISPOSE( victim->pcdata->rank );
act_wiz.c:      victim->pcdata->rank = str_dup( "" );
act_wiz.c:      victim->pcdata->wizinvis = victim->trust;
act_wiz.c:         victim->pcdata->wizinvis = 0;
act_wiz.c:   if( victim->pcdata->clan )
act_wiz.c:      if( victim->pcdata->clan->clan_type == CLAN_GUILD )
act_wiz.c:            if( skill_table[sn]->guild == victim->pcdata->clan->Class && skill_table[sn]->name != NULL )
act_wiz.c:               victim->pcdata->learned[sn] = 0;
act_wiz.c:      --victim->pcdata->clan->members;
act_wiz.c:      if( !str_cmp( victim->name, victim->pcdata->clan->leader ) )
act_wiz.c:         STRFREE( victim->pcdata->clan->leader );
act_wiz.c:         victim->pcdata->clan->leader = STRALLOC( "" );
act_wiz.c:      if( !str_cmp( victim->name, victim->pcdata->clan->number1 ) )
act_wiz.c:         STRFREE( victim->pcdata->clan->number1 );
act_wiz.c:         victim->pcdata->clan->number1 = STRALLOC( "" );
act_wiz.c:      if( !str_cmp( victim->name, victim->pcdata->clan->number2 ) )
act_wiz.c:         STRFREE( victim->pcdata->clan->number2 );
act_wiz.c:         victim->pcdata->clan->number2 = STRALLOC( "" );
act_wiz.c:      victim->pcdata->clan = NULL;
act_wiz.c:      STRFREE( victim->pcdata->clan_name );
act_wiz.c:   CREATE( victim->pcdata->tell_history, const char *, 26 );
act_wiz.c:      victim->pcdata->tell_history[i] = NULL;
act_wiz.c:      ch->pcdata->restore_time = current_time;
act_wiz.c:            if( deity && vch->pcdata->deity != deity )
act_wiz.c:            vch->pcdata->condition[COND_BLOODTHIRST] = ( 10 + vch->level );
act_wiz.c:         victim->pcdata->condition[COND_BLOODTHIRST] = ( 10 + victim->level );
act_wiz.c:   if( !ch->pcdata->restore_time )
act_wiz.c:   time_passed = current_time - ch->pcdata->restore_time;
act_wiz.c:   if( IS_SET( victim->pcdata->flags, PCFLAG_NOCPOSE ) )
act_wiz.c:      REMOVE_BIT( victim->pcdata->flags, PCFLAG_NOCPOSE );
act_wiz.c:      SET_BIT( victim->pcdata->flags, PCFLAG_NOCPOSE );
act_wiz.c:      STRFREE( victim->pcdata->cpose );
act_wiz.c:      victim->pcdata->cpose = STRALLOC( "" );
act_wiz.c:   if( IS_SET( victim->pcdata->flags, PCFLAG_NODESC ) )
act_wiz.c:      REMOVE_BIT( victim->pcdata->flags, PCFLAG_NODESC );
act_wiz.c:      SET_BIT( victim->pcdata->flags, PCFLAG_NODESC );
act_wiz.c:   if( IS_SET( victim->pcdata->flags, PCFLAG_NOBIO ) )
act_wiz.c:      REMOVE_BIT( victim->pcdata->flags, PCFLAG_NOBIO );
act_wiz.c:      SET_BIT( victim->pcdata->flags, PCFLAG_NOBIO );
act_wiz.c:      STRFREE( victim->pcdata->bio );
act_wiz.c:      victim->pcdata->bio = STRALLOC( "" );
act_wiz.c:   if( IS_SET( victim->pcdata->flags, PCFLAG_NOBECKON ) )
act_wiz.c:      REMOVE_BIT( victim->pcdata->flags, PCFLAG_NOBECKON );
act_wiz.c:      SET_BIT( victim->pcdata->flags, PCFLAG_NOBECKON );
act_wiz.c:   if( IS_SET( victim->pcdata->flags, PCFLAG_NOTITLE ) )
act_wiz.c:      REMOVE_BIT( victim->pcdata->flags, PCFLAG_NOTITLE );
act_wiz.c:      SET_BIT( victim->pcdata->flags, PCFLAG_NOTITLE );
act_wiz.c:         ch->pcdata->wizinvis = level;
act_wiz.c:   if( ch->pcdata->wizinvis < 2 )
act_wiz.c:      ch->pcdata->wizinvis = ch->level;
act_wiz.c:         victim->pcdata->learned[sn] = 0;
act_wiz.c:      DISPOSE( victim->pcdata->rank );
act_wiz.c:      victim->pcdata->rank = str_dup( "" );
act_wiz.c:         victim->pcdata->wizinvis = victim->trust;
act_wiz.c:         victim->pcdata->wizinvis = victim->trust;
act_wiz.c:   if( !victim->pcdata->bestowments )
act_wiz.c:      victim->pcdata->bestowments = str_dup( "" );
act_wiz.c:      extract_area_names( victim->pcdata->bestowments, buf );
act_wiz.c:      remove_area_names( victim->pcdata->bestowments, buf );
act_wiz.c:      DISPOSE( victim->pcdata->bestowments );
act_wiz.c:      victim->pcdata->bestowments = str_dup( buf );
act_wiz.c:   snprintf( buf, MAX_STRING_LENGTH, "%s %s", victim->pcdata->bestowments, argument );
act_wiz.c:   DISPOSE( victim->pcdata->bestowments );
act_wiz.c:   victim->pcdata->bestowments = str_dup( buf );
act_wiz.c:   if( !victim->pcdata->bestowments )
act_wiz.c:      victim->pcdata->bestowments = str_dup( "" );
act_wiz.c:      ch_printf( ch, "Current bestowed commands on %s: %s.\r\n", victim->name, victim->pcdata->bestowments );
act_wiz.c:      DISPOSE( victim->pcdata->bestowments );
act_wiz.c:      victim->pcdata->bestowments = str_dup( "" );
act_wiz.c:      cmd_buf = victim->pcdata->bestowments;
act_wiz.c:   snprintf( buf, MAX_STRING_LENGTH, "%s %s", victim->pcdata->bestowments, arg_buf );
act_wiz.c:   DISPOSE( victim->pcdata->bestowments );
act_wiz.c:   victim->pcdata->bestowments = str_dup( buf );
act_wiz.c:   if( victim->pcdata->release_date != 0 )
act_wiz.c:                 ctime( &victim->pcdata->release_date ), victim->pcdata->helled_by );
act_wiz.c:   victim->pcdata->release_date = mktime( tms );
act_wiz.c:   victim->pcdata->helled_by = STRALLOC( ch->name );
act_wiz.c:   ch_printf( ch, "%s will be released from hell at %24.24s.\r\n", victim->name, ctime( &victim->pcdata->release_date ) );
act_wiz.c:   if( victim->pcdata->clan )
act_wiz.c:      location = get_room_index( victim->pcdata->clan->recall );
act_wiz.c:   if( victim->pcdata->helled_by )
act_wiz.c:      if( str_cmp( ch->name, victim->pcdata->helled_by ) )
act_wiz.c:                    victim->pcdata->helled_by );
act_wiz.c:      STRFREE( victim->pcdata->helled_by );
act_wiz.c:      victim->pcdata->helled_by = NULL;
act_wiz.c:   victim->pcdata->release_date = 0;
act_wiz.c:      victim->pcdata->condition[COND_DRUNK] = 0;
act_wiz.c:      if( str_cmp( ch->pcdata->council_name, "Quest Council" ) && ( get_trust( ch ) < LEVEL_DEMI ) )
act_wiz.c:      victim->pcdata->quest_curr += amount;
act_wiz.c:      victim->pcdata->quest_accum += amount;
act_wiz.c:      if( victim->pcdata->quest_curr - amount < 0 )
act_wiz.c:         victim->pcdata->quest_curr -= amount;
act_wiz.c:              victim->name, victim->pcdata->quest_curr, victim->pcdata->quest_accum );
act_wiz.c:   for( track = 0; track < MAX_KILLTRACK && vch->pcdata->killed[track].vnum; track++ )
act_wiz.c:      tmob = get_mob_index( vch->pcdata->killed[track].vnum );
act_wiz.c:      ch_printf( ch, "    - killed %d times.\r\n", vch->pcdata->killed[track].count );
act_wiz.c:      if( str_cmp( ch->pcdata->council_name, "Code Council" )
act_wiz.c:      if( get_trust( ch ) < LEVEL_GOD && str_cmp( ch->pcdata->council_name, "Code Council" ) )
act_wiz.c:      if( get_trust( ch ) < LEVEL_GOD && str_cmp( ch->pcdata->council_name, "Code Council" ) )
act_wiz.c:      if( str_cmp( ch->pcdata->council_name, "Code Council" ) && get_trust( ch ) < LEVEL_ASCENDANT )
act_wiz.c:          && pproject->coder && str_cmp( pproject->coder, ch->name ) && str_cmp( ch->pcdata->council_name, "Code Council" ) )
act_wiz.c:             get_trust( ch ) < LEVEL_GREATER && str_cmp( ch->pcdata->council_name, "Code Council" ) )
act_wiz.c:             && str_cmp( ch->name, pproject->coder ) && str_cmp( ch->pcdata->council_name, "Code Council" ) )
act_wiz.c:             pproject->coder && str_cmp( ch->name, pproject->coder ) && str_cmp( ch->pcdata->council_name, "Code Council" ) )
act_wiz.c:             && str_cmp( ch->name, pproject->coder ) && str_cmp( ch->pcdata->council_name, "Code Council" ) )
act_wiz.c:   if( victim->pcdata->nuisance )
act_wiz.c:   CREATE( victim->pcdata->nuisance, NUISANCE_DATA, 1 );
act_wiz.c:   victim->pcdata->nuisance->set_time = current_time;
act_wiz.c:   victim->pcdata->nuisance->flags = 1;
act_wiz.c:   victim->pcdata->nuisance->power = power;
act_wiz.c:   victim->pcdata->nuisance->max_time = mktime( now_time );
act_wiz.c:   if( !victim->pcdata->nuisance )
act_wiz.c:   DISPOSE( victim->pcdata->nuisance );
act_wiz.c:   snprintf( oldname, MAX_STRING_LENGTH, "%s%c/%s", PLAYER_DIR, tolower( victim->pcdata->filename[0] ),
act_wiz.c:             capitalize( victim->pcdata->filename ) );
act_wiz.c:   snprintf( backname, MAX_STRING_LENGTH, "%s%c/%s", BACKUP_DIR, tolower( victim->pcdata->filename[0] ),
act_wiz.c:             capitalize( victim->pcdata->filename ) );
act_wiz.c:      snprintf( godname, MAX_STRING_LENGTH, "%s%s", GOD_DIR, capitalize( victim->pcdata->filename ) );
act_wiz.c:   if( victim->pcdata->area )
act_wiz.c:   STRFREE( victim->pcdata->filename );
act_wiz.c:   victim->pcdata->filename = STRALLOC( capitalize( arg2 ) );
act_wiz.c:      if( victim->pcdata->area )
act_wiz.c:         close_area( victim->pcdata->area );
act_wiz.c:      victim->pcdata->area = NULL;
act_wiz.c:      victim->pcdata->r_range_lo = 0;
act_wiz.c:      victim->pcdata->r_range_hi = 0;
act_wiz.c:      victim->pcdata->o_range_lo = 0;
act_wiz.c:      victim->pcdata->o_range_hi = 0;
act_wiz.c:      victim->pcdata->m_range_lo = 0;
act_wiz.c:      victim->pcdata->m_range_hi = 0;
act_wiz.c:   if( victim->pcdata->area && lo != 0 )
act_wiz.c:   victim->pcdata->r_range_lo = lo;
act_wiz.c:   victim->pcdata->r_range_hi = hi;
act_wiz.c:   victim->pcdata->o_range_lo = lo;
act_wiz.c:   victim->pcdata->o_range_hi = hi;
act_wiz.c:   victim->pcdata->m_range_lo = lo;
act_wiz.c:   victim->pcdata->m_range_hi = hi;
act_wiz.c:   if( !victim->pcdata->area )
act_wiz.c:   tarea = victim->pcdata->area;
act_wiz.c:    if ( IS_SET( ch->pcdata->flags, PCFLAG_BUILDWALK ) )
act_wiz.c:        REMOVE_BIT( ch->pcdata->flags, PCFLAG_BUILDWALK );
act_wiz.c:        SET_BIT( ch->pcdata->flags, PCFLAG_BUILDWALK );
agecommand.c:             && ( skill->guild != CLASS_NONE && ( !IS_GUILDED( ch ) || ( ch->pcdata->clan->Class != skill->guild ) ) ) )
agecommand.c:         if( ch->pcdata->learned[sn] <= 0 && SPELL_FLAG( skill, SF_SECRETSKILL ) )
agecommand.c:if ( ch->pcdata->learned[normalSn] <= 99 )
agecommand.c://         if( ch->pcdata->learned[normalSn] > 99 )
agecommand.c://         if( ch->pcdata->learned[normalSn] < 99 )
agecommand.c:        if ( ch->pcdata->souls <= 1999)
agecommand.c:        ch->pcdata->souls -= 2000;
agecommand.c:   if( IS_SET( ch->pcdata->flags, PCFLAG_NOCPOSE ) )
agecommand.c:      ch->pcdata->cpose = str_dup( " is here." );
agecommand.c:   ch->pcdata->cpose = STRALLOC( buf );
agecommand.c:      ch->pcdata->customclass = str_dup( "Adventurer" );
agecommand.c:   ch->pcdata->customclass = STRALLOC( buf );
agecommand.c:pager_printf( ch, "&CYou are a level %d %s %s from %s.\r\n", ch->level, capitalize( get_race( ch ) ),  ch->pcdata->customclass, ch->pcdata->hometown  );
agecommand.c:pager_printf( ch, "Your TIER rank is %d.\r\n\r\n", ch->pcdata->tier);
agecommand.c:                    (ch->pcdata->str + ch->mod_str) , (ch->mod_str + ch->pcdata->str + ch->damroll) );
agecommand.c:                    (ch->pcdata->dex + ch->mod_dex), ((ch->pcdata->def )  + GET_AC(ch) *-1) );
agecommand.c:                    (ch->pcdata->intel + ch->mod_int) , (ch->saving_poison_death + ch->saving_wand + ch->saving_para_petri + ch->saving_breath + ch->saving_spell_staff));
agecommand.c:                    (ch->pcdata->lck + ch->mod_lck ) );
agecommand.c:                    ch->gold, ch->pcdata->ap, ch->practice );
agecommand.c:pager_printf( ch, "Your Cpose is set at '%s'\r\n", ch->pcdata->cpose );
agecommand.c:                    ch->pcdata->pkills, ch->pcdata->illegal_pk, ch->pcdata->pdeaths );
agecommand.c:   if( ch->pcdata->clan && ch->pcdata->clan->clan_type != CLAN_ORDER && ch->pcdata->clan->clan_type != CLAN_GUILD )
agecommand.c:                    ch->pcdata->clan->name, ch->pcdata->clan->pkills[6],
agecommand.c:                    ( ch->pcdata->clan->pkills[1] + ch->pcdata->clan->pkills[2] +
agecommand.c:                      ch->pcdata->clan->pkills[3] + ch->pcdata->clan->pkills[4] + ch->pcdata->clan->pkills[5] ) );
agecommand.c:                    ch->pcdata->clan->pdeaths[6],
agecommand.c:                    ( ch->pcdata->clan->pdeaths[1] + ch->pcdata->clan->pdeaths[2] +
agecommand.c:                      ch->pcdata->clan->pdeaths[3] + ch->pcdata->clan->pdeaths[4] + ch->pcdata->clan->pdeaths[5] ) );
agecommand.c:                    xIS_SET( ch->act, PLR_WIZINVIS ) ? "X" : " ", ch->pcdata->wizinvis );
agecommand.c:      pager_printf( ch, "Bamfin:  %s\r\n", ( ch->pcdata->bamfin[0] != '\0' )
agecommand.c:                    ? ch->pcdata->bamfin : "An immortal appears." );
agecommand.c:      pager_printf( ch, "Bamfout: %s\r\n", ( ch->pcdata->bamfout[0] != '\0' )
agecommand.c:                    ? ch->pcdata->bamfout : "The immortal disappears." );
agecommand.c:      if( ch->pcdata->area )
agecommand.c:                       ch->pcdata->area->low_r_vnum, ch->pcdata->area->hi_r_vnum,
agecommand.c:                       ch->pcdata->area->low_o_vnum, ch->pcdata->area->hi_o_vnum,
agecommand.c:                       ch->pcdata->area->low_m_vnum, ch->pcdata->area->hi_m_vnum );
agecommand.c:         pager_printf( ch, "Area Loaded [%s]\r\n", ( IS_SET( ch->pcdata->area->status, AREA_LOADED ) ) ? "yes" : "no" );
agecommand.c:	ch->name, ch->level, ch->pcdata->customclass );
agecommand.c:                    ch->gold, ch->pcdata->ap, ch->practice );
agecommand.c:  int AP = ch->pcdata->ap;
agecommand.c:			ch->pcdata->str++;
agecommand.c:			ch->pcdata->ap = AP-30;
agecommand.c:			ch->pcdata->dex++;
agecommand.c:			ch->pcdata->ap = AP-30;
agecommand.c:			ch->pcdata->intel++;
agecommand.c:			ch->pcdata->ap = AP-20;
agecommand.c:			ch->pcdata->lck++;
agecommand.c:			ch->pcdata->ap = AP-30;
agecommand.c:			ch->pcdata->ap = AP-50;
agecommand.c:			ch->pcdata->ap = AP-50;
agecommand.c:			ch->pcdata->ap = AP-30;
agemobcomm.c:   victim->pcdata->learned[sn] = 100;
agemobcomm.c:   victim->pcdata->learned[sn] = 0;
att:act_comm.c:   drunk = ch->pcdata->condition[COND_DRUNK];
att:act_comm.c:            ch_printf( ch, "(%d) ", ( !IS_NPC( ch ) ) ? ch->pcdata->wizinvis : ch->mobinvis );
att:act_comm.c:            ch_printf( ch, "(%d) ", ( !IS_NPC( ch ) ) ? ch->pcdata->wizinvis : ch->mobinvis );
att:act_comm.c:            ch_printf( ch, "(%d) ", ( !IS_NPC( ch ) ) ? ch->pcdata->wizinvis : ch->mobinvis );
att:act_comm.c:            ch_printf( ch, "(%d) ", ( !IS_NPC( ch ) ) ? ch->pcdata->wizinvis : ch->mobinvis );
att:act_comm.c:            ch_printf( ch, "(%d) ", ( !IS_NPC( ch ) ) ? ch->pcdata->wizinvis : ch->mobinvis );
att:act_comm.c:            ch_printf( ch, "(%d) ", ( !IS_NPC( ch ) ) ? ch->pcdata->wizinvis : ch->mobinvis );
att:act_comm.c:             ( !IS_NPC( och ) && !IS_SET( och->pcdata->flags, PCFLAG_RETIRED ) ) )
att:act_comm.c:               && !( och->pcdata->council && !str_cmp( och->pcdata->council->name, "Newbie Council" ) ) ) )
att:act_comm.c:            if( vch->pcdata->clan != ch->pcdata->clan )
att:act_comm.c:            if( vch->pcdata->council != ch->pcdata->council )
att:act_comm.c:            snprintf( lbuf, MAX_INPUT_LENGTH + 4, "(%d) ", ( !IS_NPC( ch ) ) ? ch->pcdata->wizinvis : ch->mobinvis );
att:act_comm.c:         if( !IS_NPC( ch ) && ch->pcdata->nuisance
att:act_comm.c:             && ch->pcdata->nuisance->flags > 7
att:act_comm.c:             && ( number_percent(  ) < ( ( ch->pcdata->nuisance->flags - 7 ) * 10 * ch->pcdata->nuisance->power ) ) )
att:act_comm.c:         if( !IS_NPC( vch ) && vch->pcdata->nuisance &&
att:act_comm.c:             vch->pcdata->nuisance->flags > 7
att:act_comm.c:             && ( number_percent(  ) < ( ( vch->pcdata->nuisance->flags - 7 ) * 10 * vch->pcdata->nuisance->power ) ) )
att:act_comm.c:   if( IS_NPC( ch ) || !ch->pcdata->clan
att:act_comm.c:       || ch->pcdata->clan->clan_type == CLAN_ORDER || ch->pcdata->clan->clan_type == CLAN_GUILD )
att:act_comm.c:            && !( ch->pcdata->council && !str_cmp( ch->pcdata->council->name, "Newbie Council" ) ) ) )
att:act_comm.c:   if( IS_NPC( ch ) || !ch->pcdata->clan || ch->pcdata->clan->clan_type != CLAN_ORDER )
att:act_comm.c:   if( IS_NPC( ch ) || !ch->pcdata->council )
att:act_comm.c:   if( IS_NPC( ch ) || !ch->pcdata->clan || ch->pcdata->clan->clan_type != CLAN_GUILD )
att:act_comm.c:   if( !IS_IMMORTAL( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_RETIRED ) )
att:act_comm.c:   if( IS_SET( ch->pcdata->flags, PCFLAG_NOBECKON ) )
att:act_comm.c:      victim->pcdata->lt_index = tolower( IS_NPC( ch ) ? ch->short_descr[0] : ch->name[0] ) - 'a';
att:act_comm.c:      victim->pcdata->lt_index = tolower( IS_NPC( ch ) ? ch->short_descr[0] : ch->name[0] ) - 'a';
att:act_comm.c:      victim->pcdata->lt_index = tolower( IS_NPC( ch ) ? ch->short_descr[0] : ch->name[0] ) - 'a';
att:act_comm.c:   if( IS_NPC( ch ) || !IS_IMMORTAL( ch ) || !ch->pcdata->tell_history )
att:act_comm.c:      tindex = ch->pcdata->lt_index;
att:act_comm.c:   if( ch->pcdata->tell_history[tindex] )
att:act_comm.c:      send_to_char( ch->pcdata->tell_history[tindex], ch );
att:act_comm.c:   if( get_trust( ch ) >= LEVEL_ASCENDANT || is_name( "bug", ch->pcdata->bestowments ) )
att:act_comm.c:   if( ch->level >= LEVEL_HERO && !ch->pcdata->pet ) /* Pet crash fix */
att:act_comm.c:   if( sysdata.save_pets && ch->pcdata->pet )
att:act_comm.c:      act( AT_BYE, "$N follows $S master into the Void.", ch, NULL, ch->pcdata->pet, TO_ROOM );
att:act_comm.c:      extract_char( ch->pcdata->pet, TRUE );
att:act_comm.c:   if( ch->pcdata->clan )
att:act_comm.c:      save_clan( ch->pcdata->clan );
att:act_comm.c:   if( !ch->pcdata->council )
att:act_comm.c:   if( str_cmp( ch->pcdata->council->name, "Newbie Council" ) )
att:act_comm.c:   if( IS_NPC( ch ) && !IS_NPC( ch->master ) && ch->master->pcdata->pet == ch )
att:act_comm.c:      ch->master->pcdata->pet = NULL;
att:act_comm.c:         ch->master->pcdata->charmies--;
att:act_comm.c:                          IS_VAMPIRE( gch ) ? gch->pcdata->condition[COND_BLOODTHIRST] : gch->mana,
att:act_comm.c:      if( ch->pcdata->clan == cch->pcdata->clan && ch->pcdata->clan != NULL )
att:act_comm.c:               return ch->pcdata->learned[sn];
att:act_comm.c:            if( ch->pcdata->learned[sn] >= 99 )
att:act_comm.c:            if( lang_array[langs] == LANG_CLAN && ( IS_NPC( ch ) || !ch->pcdata->clan ) )
att:act_comm.c:          lang_array[lang] == LANG_COMMON || ch->pcdata->learned[sn] >= 99 )
att:act_comm.c:      if( countlangs( ch->speaks ) >= ( ch->level / 10 ) && ch->pcdata->learned[sn] <= 0 )
att:act_comm.c:      ch->pcdata->learned[sn] += prct;
att:act_comm.c:      ch->pcdata->learned[sn] = UMIN( ch->pcdata->learned[sn], 99 );
att:act_comm.c:      if( ch->pcdata->learned[sn] == prct )
att:act_comm.c:      else if( ch->pcdata->learned[sn] < 60 )
att:act_comm.c:      else if( ch->pcdata->learned[sn] < 60 + prct )
att:act_comm.c:      else if( ch->pcdata->learned[sn] < 99 )
att:act_info.c:      * ( IS_NPC( ch ) ? 1 : ( ch->pcdata->condition[COND_DRUNK] ? ( ch->pcdata->condition[COND_DRUNK] / 12 ) : 1 ) );
att:act_info.c:   else if( ch->pcdata->learned[gsn_peek] > 0 )
att:act_info.c:      SET_BIT( ch->pcdata->flags, PCFLAG_HELPSTART );
att:act_info.c:      if( wch->level < iLevelLower || wch->level > iLevelUpper || ( fPkill && !CAN_PKILL( wch ) ) || ( fImmortalOnly && wch->level < LEVEL_IMMORTAL ) || ( fClassRestrict && !rgfClass[wch->Class] ) || ( fRaceRestrict && !rgfRace[wch->race] ) || ( fClanMatch && ( pClan != wch->pcdata->clan ) )  /* SB */
att:act_info.c:          || ( fCouncilMatch && ( pCouncil != wch->pcdata->council ) )  /* SB */
att:act_info.c:          || ( fDeityMatch && ( pDeity != wch->pcdata->deity ) ) )
att:act_info.c:      if( fLeader && !( wch->pcdata->council &&
att:act_info.c:                        ( ( wch->pcdata->council->head2 &&
att:act_info.c:                            !str_cmp( wch->pcdata->council->head2, wch->name ) ) ||
att:act_info.c:                          ( wch->pcdata->council->head &&
att:act_info.c:                            !str_cmp( wch->pcdata->council->head, wch->name ) ) ) ) &&
att:act_info.c:          !( wch->pcdata->clan && ( ( wch->pcdata->clan->deity &&
att:act_info.c:                                      !str_cmp( wch->pcdata->clan->deity, wch->name ) )
att:act_info.c:                                    || ( wch->pcdata->clan->leader
att:act_info.c:                                         && !str_cmp( wch->pcdata->clan->leader, wch->name ) )
att:act_info.c:                                    || ( wch->pcdata->clan->number1
att:act_info.c:                                         && !str_cmp( wch->pcdata->clan->number1, wch->name ) )
att:act_info.c:                                    || ( wch->pcdata->clan->number2
att:act_info.c:                                         && !str_cmp( wch->pcdata->clan->number2, wch->name ) ) ) ) )
att:act_info.c:      if( fGroup && !wch->leader && !IS_SET( wch->pcdata->flags, PCFLAG_GROUPWHO ) && ( !whogr_p || !whogr_p->indent ) )
att:act_info.c:      if( fShowHomepage && wch->pcdata->homepage && wch->pcdata->homepage[0] != '\0' )
att:act_info.c:         snprintf( char_name, MAX_INPUT_LENGTH, "<A HREF=\"%s\">%s</A>", show_tilde( wch->pcdata->homepage ), wch->name );
att:act_info.c:      else if( wch->pcdata->clan
att:act_info.c:               && !str_cmp( wch->name, wch->pcdata->clan->leader ) && wch->pcdata->clan->leadrank[0] != '\0' )
att:act_info.c:         Class = wch->pcdata->clan->leadrank;
att:act_info.c:      else if( wch->pcdata->clan
att:act_info.c:               && !str_cmp( wch->name, wch->pcdata->clan->number1 ) && wch->pcdata->clan->onerank[0] != '\0' )
att:act_info.c:         Class = wch->pcdata->clan->onerank;
att:act_info.c:      else if( wch->pcdata->clan
att:act_info.c:               && !str_cmp( wch->name, wch->pcdata->clan->number2 ) && wch->pcdata->clan->tworank[0] != '\0' )
att:act_info.c:         Class = wch->pcdata->clan->tworank;
att:act_info.c:      else if( wch->pcdata->rank && wch->pcdata->rank[0] != '\0' )
att:act_info.c:         Class = wch->pcdata->rank;
att:act_info.c:      if( wch->pcdata->clan )
att:act_info.c:         CLAN_DATA *pclan = wch->pcdata->clan;
att:act_info.c:      if( wch->pcdata->council )
att:act_info.c:         if( wch->pcdata->council->head2 == NULL )
att:act_info.c:            if( !str_cmp( wch->name, wch->pcdata->council->head ) )
att:act_info.c:            if( !str_cmp( wch->name, wch->pcdata->council->head ) || !str_cmp( wch->name, wch->pcdata->council->head2 ) )
att:act_info.c:         mudstrlcat( council_name, wch->pcdata->council_name, MAX_INPUT_LENGTH );
att:act_info.c:         snprintf( invis_str, MAX_INPUT_LENGTH, "(%d) ", wch->pcdata->wizinvis );
att:act_info.c:                wch->pcdata->customclass,
att:act_info.c:                char_name, wch->pcdata->title, extra_title, clan_name, council_name );
att:act_info.c:             && ( skill->guild != CLASS_NONE && ( !IS_GUILDED( ch ) || ( ch->pcdata->clan->Class != skill->guild ) ) ) )
att:act_info.c:         if( ch->pcdata->learned[sn] <= 0 && SPELL_FLAG( skill, SF_SECRETSKILL ) )
att:act_info.c:         if( ch->pcdata->learned[normalSn] > 0 )
att:act_info.c:         pager_printf( ch, " %3d%% ", ch->pcdata->learned[normalSn] );
att:act_info.c:	     && ch->pcdata->clan->class != skill_table[sn]->guild )
att:act_info.c:      if( ch->pcdata->learned[sn] >= adept )
att:act_info.c:         ch->pcdata->learned[sn] += int_app[get_curr_int( ch )].learn;
att:act_info.c:         if( ch->pcdata->learned[sn] >= adept )
att:act_info.c:            ch->pcdata->learned[sn] = adept;
att:act_info.c:   DISPOSE( ch->pcdata->pwd );
att:act_info.c:   ch->pcdata->pwd = str_dup( pwdnew );
att:act_info.c:      if( !IS_NPC( ch ) && ch->pcdata->clan )
att:act_info.c:         if( ch->pcdata->clan->clan_type == CLAN_ORDER )
att:act_info.c:         else if( ch->pcdata->clan->clan_type == CLAN_GUILD )
att:act_info.c:      if( IS_IMMORTAL( ch ) || ( ch->pcdata->council && !str_cmp( ch->pcdata->council->name, "Newbie Council" ) ) )
att:act_info.c:      if( !IS_NPC( ch ) && ch->pcdata->council )
att:act_info.c:      if( !IS_NPC( ch ) && IS_SET( ch->pcdata->flags, PCFLAG_RETIRED ) )
att:act_info.c:      else if( !str_cmp( arg + 1, "clan" ) && !IS_NPC( ch ) && ch->pcdata->clan
att:act_info.c:               && ch->pcdata->clan->clan_type != CLAN_ORDER && ch->pcdata->clan->clan_type != CLAN_GUILD )
att:act_info.c:      else if( !str_cmp( arg + 1, "council" ) && !IS_NPC( ch ) && ch->pcdata->council )
att:act_info.c:      else if( !str_cmp( arg + 1, "guild" ) && !IS_NPC( ch ) && ch->pcdata->clan
att:act_info.c:               && ch->pcdata->clan->clan_type == CLAN_GUILD )
att:act_info.c:                                                  || ( ch->pcdata->council
att:act_info.c:                                                       && !str_cmp( ch->pcdata->council->name, "Newbie Council" ) ) ) )
att:act_info.c:      else if( !str_cmp( arg + 1, "order" ) && !IS_NPC( ch ) && ch->pcdata->clan
att:act_info.c:               && ch->pcdata->clan->clan_type == CLAN_ORDER )
att:act_info.c:          * if (ch->pcdata->clan)
att:act_info.c:          * if (ch->pcdata->council)
att:act_info.c:          * if (ch->pcdata->guild)
att:act_info.c:          * if (ch->pcdata->clan)
att:act_info.c:          * if (ch->pcdata->council)
att:act_info.c:                 IS_SET( ch->pcdata->flags, PCFLAG_PAGERON ) ? "[+] PAGER"
att:act_info.c:                 IS_SET( ch->pcdata->flags, PCFLAG_GAG ) ? "[+] GAG"
att:act_info.c:                 IS_SET( ch->pcdata->flags, PCFLAG_NORECALL ) ? "[+] NORECALL"
att:act_info.c:                 : "[-] norecall", IS_SET( ch->pcdata->flags, PCFLAG_NOSUMMON ) ? "[+] NOSUMMON" : "[-] nosummon" );
att:act_info.c:      if( !IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
att:act_info.c:                 IS_SET( ch->pcdata->flags, PCFLAG_GROUPWHO ) ? "[+] GROUPWHO" : "[-] groupwho",
att:act_info.c:                 IS_SET( ch->pcdata->flags, PCFLAG_NOINTRO ) ? "[+] NOINTRO" : "[-] nointro",
att:act_info.c:                 IS_SET( ch->pcdata->flags, PCFLAG_BECKON ) ? "[+] BECKON" : "[-] beckon" );
att:act_info.c:      ch_printf_color( ch, "Pager Length (%d)    Wimpy (&W%d&w)", ch->pcdata->pagerlen, ch->wimpy );
att:act_info.c:                 IS_SET( ch->pcdata->flags, PCFLAG_NODESC ) ? " You are not permitted to set your description.\r\n" : "" );
att:act_info.c:         if( ( bit == PLR_FLEE || bit == PLR_NICE || bit == PLR_SHOVEDRAG ) && IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
att:act_info.c:            SET_BIT( ch->pcdata->flags, bit );
att:act_info.c:            REMOVE_BIT( ch->pcdata->flags, bit );
att:act_info.c:         if( ch->pcdata->learned[normalSn] <= 0 && SPELL_FLAG( skill, SF_SECRETSKILL ) )
att:act_info.c:                          skn, skill->name, ch->pcdata->learned[normalSn], skill->skill_adept[ch->Class], buf );
att:act_info.c:      if( IS_SET( ch->pcdata->flags, PCFLAG_PAGERON ) )
att:act_info.c:         ch_printf( ch, "Pager is now enabled at %d lines.\r\n", ch->pcdata->pagerlen );
att:act_info.c:   ch->pcdata->pagerlen = atoi( arg );
att:act_info.c:   if( ch->pcdata->pagerlen < 5 )
att:act_info.c:      ch->pcdata->pagerlen = 5;
att:act_info.c:   ch_printf( ch, "Page pausing set to %d lines.\r\n", ch->pcdata->pagerlen );
att:act_info.c:      if( !ch->pcdata->first_ignored )
att:act_info.c:      for( temp = ch->pcdata->first_ignored; temp; temp = temp->next )
att:act_info.c:      for( temp = ch->pcdata->first_ignored; temp; temp = next )
att:act_info.c:         UNLINK( temp, ch->pcdata->first_ignored, ch->pcdata->last_ignored, next, prev );
att:act_info.c:      for( temp = ch->pcdata->first_ignored, i = 0; temp; temp = temp->next, i++ )
att:act_info.c:            UNLINK( temp, ch->pcdata->first_ignored, ch->pcdata->last_ignored, next, prev );
att:act_info.c:         LINK( inew, ch->pcdata->first_ignored, ch->pcdata->last_ignored, next, prev );
att:act_info.c:   for( temp = ch->pcdata->first_ignored; temp; temp = temp->next )
att:act_move.c: if( ch->pcdata->cpose )
att:act_move.c:      ch->pcdata->cpose = str_dup( " is here." );
att:act_move.c:      if( ch->pcdata->nuisance && ch->pcdata->nuisance->flags > 8 &&
att:act_move.c:          number_percent(  ) > ( ch->pcdata->nuisance->flags * ch->pcdata->nuisance->power ) )
att:act_obj.c:                && !IS_NPC( ch ) && IS_SET( ch->pcdata->flags, PCFLAG_DEADLY )
att:act_obj.c:   if( !IS_NPC( ch ) && ( !IS_PKILL( ch ) || ( IS_PKILL( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_GAG ) ) ) )
att:act_obj.c:   if( IS_NPC( ch ) || ch->pcdata->learned[gsn_dual_wield] )
att:act_obj.c:   if( !IS_NPC( ch ) && ch->pcdata->deity && ch->pcdata->deity->name[0] != '\0' )
att:act_obj.c:      mudstrlcpy( name, ch->pcdata->deity->name, 50 );
att:act_obj.c:   else if( !IS_NPC( ch ) && ch->pcdata->clan && ch->pcdata->clan->deity[0] != '\0' )
att:act_obj.c:      mudstrlcpy( name, ch->pcdata->clan->deity, 50 );
att:act_obj.c:         if( !IS_NPC( vch ) && xIS_SET( vch->act, PLR_WIZINVIS ) && vch->pcdata->wizinvis >= LEVEL_IMMORTAL )
att:act_wiz.c:      if( IS_SET( ch->pcdata->flags, PCFLAG_DND ) )
att:act_wiz.c:         REMOVE_BIT( ch->pcdata->flags, PCFLAG_DND );
att:act_wiz.c:         SET_BIT( ch->pcdata->flags, PCFLAG_DND );
att:act_wiz.c:      victim->pcdata->authed_by = QUICKLINK( ch->name );
att:act_wiz.c:      DISPOSE( ch->pcdata->bamfin );
att:act_wiz.c:      ch->pcdata->bamfin = newbamf;
att:act_wiz.c:      DISPOSE( ch->pcdata->bamfout );
att:act_wiz.c:      ch->pcdata->bamfout = newbamf;
att:act_wiz.c:   DISPOSE( ch->pcdata->rank );
att:act_wiz.c:      ch->pcdata->rank = str_dup( "" );
att:act_wiz.c:      ch->pcdata->rank = newrank;
att:act_wiz.c:   if( wch && !IS_NPC( wch ) && IS_SET( wch->pcdata->flags, PCFLAG_DND ) && get_trust( ch ) < get_trust( wch ) )
att:act_wiz.c:      if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
att:act_wiz.c:      if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
att:act_wiz.c:      ch->pcdata->restore_time = current_time;
att:act_wiz.c:            if( deity && vch->pcdata->deity != deity )
att:act_wiz.c:            vch->pcdata->condition[COND_BLOODTHIRST] = ( 10 + vch->level );
att:act_wiz.c:   if( !ch->pcdata->restore_time )
att:act_wiz.c:   time_passed = current_time - ch->pcdata->restore_time;
att:act_wiz.c:         ch->pcdata->wizinvis = level;
att:act_wiz.c:   if( ch->pcdata->wizinvis < 2 )
att:act_wiz.c:      ch->pcdata->wizinvis = ch->level;
att:act_wiz.c:   victim->pcdata->helled_by = STRALLOC( ch->name );
att:act_wiz.c:      if( str_cmp( ch->name, victim->pcdata->helled_by ) )
att:act_wiz.c:      if( str_cmp( ch->pcdata->council_name, "Quest Council" ) && ( get_trust( ch ) < LEVEL_DEMI ) )
att:act_wiz.c:   for( track = 0; track < MAX_KILLTRACK && vch->pcdata->killed[track].vnum; track++ )
att:act_wiz.c:      tmob = get_mob_index( vch->pcdata->killed[track].vnum );
att:act_wiz.c:      ch_printf( ch, "    - killed %d times.\r\n", vch->pcdata->killed[track].count );
att:act_wiz.c:      if( str_cmp( ch->pcdata->council_name, "Code Council" )
att:act_wiz.c:      if( get_trust( ch ) < LEVEL_GOD && str_cmp( ch->pcdata->council_name, "Code Council" ) )
att:act_wiz.c:      if( get_trust( ch ) < LEVEL_GOD && str_cmp( ch->pcdata->council_name, "Code Council" ) )
att:act_wiz.c:      if( str_cmp( ch->pcdata->council_name, "Code Council" ) && get_trust( ch ) < LEVEL_ASCENDANT )
att:act_wiz.c:          && pproject->coder && str_cmp( pproject->coder, ch->name ) && str_cmp( ch->pcdata->council_name, "Code Council" ) )
att:act_wiz.c:             get_trust( ch ) < LEVEL_GREATER && str_cmp( ch->pcdata->council_name, "Code Council" ) )
att:act_wiz.c:             && str_cmp( ch->name, pproject->coder ) && str_cmp( ch->pcdata->council_name, "Code Council" ) )
att:act_wiz.c:             pproject->coder && str_cmp( ch->name, pproject->coder ) && str_cmp( ch->pcdata->council_name, "Code Council" ) )
att:act_wiz.c:             && str_cmp( ch->name, pproject->coder ) && str_cmp( ch->pcdata->council_name, "Code Council" ) )
att:agecommand.c:             && ( skill->guild != CLASS_NONE && ( !IS_GUILDED( ch ) || ( ch->pcdata->clan->Class != skill->guild ) ) ) )
att:agecommand.c:         if( ch->pcdata->learned[sn] <= 0 && SPELL_FLAG( skill, SF_SECRETSKILL ) )
att:agecommand.c:if ( ch->pcdata->learned[normalSn] <= 99 )
att:agecommand.c:         if( ch->pcdata->learned[normalSn] > 99 )
att:agecommand.c:         if( ch->pcdata->learned[normalSn] < 99 )
att:agecommand.c:pager_printf( ch, "You have a balance of %d\r\n", ch->pcdata->balance);
att:agecommand.c:      amount = ch->pcdata->balance;
att:agecommand.c:   if( amount > ch->pcdata->balance )
att:agecommand.c:   ch->pcdata->balance -= amount;
att:agecommand.c:   ch->pcdata->balance += amount;
att:agecommand.c:        if ( ch->pcdata->souls <= 1999)
att:agecommand.c:        ch->pcdata->souls -= 2000;
att:agecommand.c:   if( IS_SET( ch->pcdata->flags, PCFLAG_NOCPOSE ) )
att:agecommand.c:      ch->pcdata->cpose = str_dup( " is here." );
att:agecommand.c:   ch->pcdata->cpose = STRALLOC( buf );
att:agecommand.c:      ch->pcdata->customclass = str_dup( "Adventurer" );
att:agecommand.c:   ch->pcdata->customclass = STRALLOC( buf );
att:agecommand.c:pager_printf( ch, "&CYou are a level %d %s %s from %s.\r\n", ch->level, capitalize( get_race( ch ) ),  ch->pcdata->customclass, ch->pcdata->hometown  );
att:agecommand.c:pager_printf( ch, "Your TIER rank is %d.\r\n\r\n", ch->pcdata->tier);
att:agecommand.c:                    (ch->pcdata->str + ch->pcdata->strplus), (ch->pcdata->str + ch->pcdata->att + ch->damroll),  ch->pcdata->attlevel );
att:agecommand.c:                    (ch->pcdata->dex + ch->pcdata->strplus), (ch->pcdata->def + ch->pcdata->defplus) , ch->pcdata->deflevel );
att:agecommand.c:                    (ch->pcdata->intel + ch->pcdata->intplus) , (ch->pcdata->mdef + ch->pcdata->mdefplus), ch->pcdata->mlevel );
att:agecommand.c:                    (ch->pcdata->lck + ch->pcdata->lckplus ) );
att:agecommand.c:                    ch->gold, ch->pcdata->ap, ch->practice );
att:agecommand.c:pager_printf( ch, "Your Cpose is set at '%s'\r\n", ch->pcdata->cpose );
att:agecommand.c:                    ch->pcdata->pkills, ch->pcdata->illegal_pk, ch->pcdata->pdeaths );
att:agecommand.c:   if( ch->pcdata->clan && ch->pcdata->clan->clan_type != CLAN_ORDER && ch->pcdata->clan->clan_type != CLAN_GUILD )
att:agecommand.c:                    ch->pcdata->clan->name, ch->pcdata->clan->pkills[6],
att:agecommand.c:                    ( ch->pcdata->clan->pkills[1] + ch->pcdata->clan->pkills[2] +
att:agecommand.c:                      ch->pcdata->clan->pkills[3] + ch->pcdata->clan->pkills[4] + ch->pcdata->clan->pkills[5] ) );
att:agecommand.c:                    ch->pcdata->clan->pdeaths[6],
att:agecommand.c:                    ( ch->pcdata->clan->pdeaths[1] + ch->pcdata->clan->pdeaths[2] +
att:agecommand.c:                      ch->pcdata->clan->pdeaths[3] + ch->pcdata->clan->pdeaths[4] + ch->pcdata->clan->pdeaths[5] ) );
att:agecommand.c:                    xIS_SET( ch->act, PLR_WIZINVIS ) ? "X" : " ", ch->pcdata->wizinvis );
att:agecommand.c:      pager_printf( ch, "Bamfin:  %s\r\n", ( ch->pcdata->bamfin[0] != '\0' )
att:agecommand.c:                    ? ch->pcdata->bamfin : "An immortal appears." );
att:agecommand.c:      pager_printf( ch, "Bamfout: %s\r\n", ( ch->pcdata->bamfout[0] != '\0' )
att:agecommand.c:                    ? ch->pcdata->bamfout : "The immortal disappears." );
att:agecommand.c:      if( ch->pcdata->area )
att:agecommand.c:                       ch->pcdata->area->low_r_vnum, ch->pcdata->area->hi_r_vnum,
att:agecommand.c:                       ch->pcdata->area->low_o_vnum, ch->pcdata->area->hi_o_vnum,
att:agecommand.c:                       ch->pcdata->area->low_m_vnum, ch->pcdata->area->hi_m_vnum );
att:agecommand.c:         pager_printf( ch, "Area Loaded [%s]\r\n", ( IS_SET( ch->pcdata->area->status, AREA_LOADED ) ) ? "yes" : "no" );
att:bank.c:   ch->pcdata->balance += amount;
att:bank.c:      amount = ch->pcdata->balance;
att:bank.c:   if( amount > ch->pcdata->balance )
att:bank.c:   ch->pcdata->balance -= amount;
att:bank.c:   ch_printf( ch, "You have %d gold in the bank.\r\n", ch->pcdata->balance );
att:boards.c:      if( ch->pcdata->clan && !str_cmp( ch->pcdata->clan->name, board->read_group ) )
att:boards.c:      if( ch->pcdata->council && !str_cmp( ch->pcdata->council->name, board->read_group ) )
att:boards.c:      if( ch->pcdata->clan && !str_cmp( ch->pcdata->clan->name, board->post_group ) )
att:boards.c:      if( ch->pcdata->council && !str_cmp( ch->pcdata->council->name, board->post_group ) )
att:build.c:   if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
att:build.c:   if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
att:build.c:   if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
att:build.c:   if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
att:build.c:   if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
att:build.c:      if( !IS_NPC( fch ) && get_trust( ch ) < get_trust( fch ) && IS_SET( fch->pcdata->flags, PCFLAG_DND ) )
att:build.c:      if( get_trust( ch ) < LEVEL_CREATOR || vnum < 1 || IS_NPC( ch ) || !ch->pcdata->area )
att:build.c:         if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
att:build.c:      location = make_room( vnum, ch->pcdata->area );
att:build.c:             && ch->pcdata->bamfout[0] != '\0' ) ? ch->pcdata->bamfout : ( char * )"The immortal disappears.", TO_ROOM );
att:build.c:             && ch->pcdata->bamfin[0] != '\0' ) ? ch->pcdata->bamfin : ( char * )"An immortal appears.", TO_ROOM );
att:build.c:         if( ch->pcdata && ch->pcdata->subprompt )
att:build.c:            STRFREE( ch->pcdata->subprompt );
att:build.c:            ch->pcdata->subprompt = NULL;
att:build.c:         if( ch->pcdata->subprompt )
att:build.c:            STRFREE( ch->pcdata->subprompt );
att:build.c:         ch->pcdata->subprompt = STRALLOC( buf );
att:build.c:         if( ch->pcdata && ch->pcdata->subprompt )
att:build.c:            STRFREE( ch->pcdata->subprompt );
att:build.c:            ch->pcdata->subprompt = NULL;
att:build.c:         if( ch->pcdata->subprompt )
att:build.c:            STRFREE( ch->pcdata->subprompt );
att:build.c:         ch->pcdata->subprompt = STRALLOC( buf );
att:build.c:                && get_trust( ch ) < LEVEL_GREATER && !is_name( "protoflag", ch->pcdata->bestowments ) )
att:build.c:   if( !ch->pcdata->area )
att:build.c:      pArea = ch->pcdata->area;
att:build.c:      location->area = ch->pcdata->area;
att:build.c:   pArea = ch->pcdata->area;
att:build.c:         location->area = ch->pcdata->area;
att:build.c:   if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
att:build.c:         if( ch->pcdata && ch->pcdata->subprompt )
att:build.c:            STRFREE( ch->pcdata->subprompt );
att:build.c:            ch->pcdata->subprompt = NULL;
att:build.c:         if( ch->pcdata->subprompt )
att:build.c:            STRFREE( ch->pcdata->subprompt );
att:build.c:         ch->pcdata->subprompt = STRALLOC( "<&CRedit &W#%r&w> %i" );
att:build.c:      if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
att:build.c:      if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
att:build.c:   if( get_trust( ch ) > LEVEL_IMMORTAL && ch->pcdata->r_range_lo && ch->pcdata->r_range_hi )
att:build.c:      tarea = ch->pcdata->area;
att:build.c:      tarea->low_r_vnum = ch->pcdata->r_range_lo;
att:build.c:      tarea->low_o_vnum = ch->pcdata->o_range_lo;
att:build.c:      tarea->low_m_vnum = ch->pcdata->m_range_lo;
att:build.c:      tarea->hi_r_vnum = ch->pcdata->r_range_hi;
att:build.c:      tarea->hi_o_vnum = ch->pcdata->o_range_hi;
att:build.c:      tarea->hi_m_vnum = ch->pcdata->m_range_hi;
att:build.c:      ch->pcdata->area = tarea;
att:build.c:      ch->pcdata->area = NULL;
att:build.c:      if( !ch->pcdata->area )
att:build.c:       || ( is_name( buf, ch->pcdata->bestowments )
att:build.c:       || ( ch->pcdata->council && is_name( buf, ch->pcdata->council->powers ) ) )
att:build.c:                || is_name( tmp->filename, ch->pcdata->bestowments )
att:build.c:                || ( ch->pcdata->council
att:build.c:                     && ( is_name( buf, ch->pcdata->council->powers )
att:build.c:                          || is_name( "aassign", ch->pcdata->council->powers ) ) ) )
att:build.c:   ch->pcdata->area = tarea;
att:build.c:   if( IS_NPC( ch ) || get_trust( ch ) < LEVEL_CREATOR || !ch->pcdata || ( argument[0] == '\0' && !ch->pcdata->area ) )
att:build.c:      tarea = ch->pcdata->area;
att:build.c:   if( IS_NPC( ch ) || get_trust( ch ) < LEVEL_CREATOR || !ch->pcdata || ( argument[0] == '\0' && !ch->pcdata->area ) )
att:build.c:      tarea = ch->pcdata->area;
att:build.c:       || ( !ch->pcdata->area && get_trust( ch ) < LEVEL_GREATER ) )
att:build.c:   tarea = ch->pcdata->area;
att:build.c:       || ( !ch->pcdata->area && get_trust( ch ) < LEVEL_GREATER ) )
att:build.c:   tarea = ch->pcdata->area;
att:build.c:       || ( !ch->pcdata->area && get_trust( ch ) < LEVEL_GREATER ) )
att:build.c:   tarea = ch->pcdata->area;
att:build.c:       && ( obj->vnum < ch->pcdata->area->low_o_vnum || obj->vnum > ch->pcdata->area->hi_o_vnum ) )
att:build.c:       && ( mob->vnum < ch->pcdata->area->low_m_vnum || mob->vnum > ch->pcdata->area->hi_m_vnum ) )
att:build.c:       || ( !ch->pcdata->area && get_trust( ch ) < LEVEL_GREATER ) )
att:build.c:   tarea = ch->pcdata->area;
att:calendar.c:   ch->pcdata->timezone = i;
att:calendar.c:   ch_printf( ch, "&wYour local time        :  &W %s&D\r\n", c_time( current_time, ch->pcdata->timezone ) );
att:calendar.c:      if( day == ch->pcdata->day + 1 && time_info.month == ch->pcdata->month )
att:chess.c:         ch->pcdata->game_board = NULL;
att:chess.c:         ch->pcdata->game_board = NULL;
att:chess.c:      if( ch->pcdata->game_board )
att:chess.c:      ch->pcdata->game_board = board;
att:chess.c:      ch->pcdata->game_board->player1 = QUICKLINK( ch->name );
att:chess.c:      if( ch->pcdata->game_board )
att:chess.c:         ch->pcdata->game_board = board;
att:chess.c:      board = vch->pcdata->game_board;
att:chess.c:      ch->pcdata->game_board = board;
att:chess.c:   if( !ch->pcdata->game_board )
att:chess.c:      free_game( ch->pcdata->game_board );
att:chess.c:      GAME_BOARD_DATA *board = ch->pcdata->game_board;
att:chess.c:      send_to_char( print_big_board( ch, ch->pcdata->game_board ), ch );
att:chess.c:      if( !ch->pcdata->game_board->player1 || !ch->pcdata->game_board->player2 )
att:chess.c:      if( ch->pcdata->game_board->turn < 0 )
att:chess.c:      if( king_in_checkmate( ch->pcdata->game_board, BLACK_KING ) )
att:chess.c:      if( king_in_checkmate( ch->pcdata->game_board, WHITE_KING ) )
att:chess.c:      if( ch->pcdata->game_board->turn % 2 == 1 && !str_cmp( ch->pcdata->game_board->player1, ch->name ) )
att:chess.c:      if( ch->pcdata->game_board->turn % 2 == 0 && !str_cmp( ch->pcdata->game_board->player2, ch->name ) )
att:chess.c:      ret = is_valid_move( ch, ch->pcdata->game_board, x, y, dx, dy );
att:chess.c:         board = ch->pcdata->game_board;
att:chess.c:            if( ch->pcdata->game_board->type == TYPE_IMC )
att:chess.c:               imc_send_chess( ch->pcdata->game_board->player1, ch->pcdata->game_board->player2, arg );
att:chess.c:      if( !str_cmp( ch->name, ch->pcdata->game_board->player1 ) )
att:chess.c:         opp = get_char_world( ch, ch->pcdata->game_board->player2 );
att:chess.c:            mudstrlcpy( opp_name, ch->pcdata->game_board->player2, MAX_INPUT_LENGTH );
att:chess.c:         opp = get_char_world( ch, ch->pcdata->game_board->player1 );
att:chess.c:            mudstrlcpy( opp_name, ch->pcdata->game_board->player1, MAX_INPUT_LENGTH );
att:chess.c:         if( ch->pcdata->game_board->type == TYPE_LOCAL ) \
att:chess.c:         if( ch->pcdata->game_board->type == TYPE_IMC ) \
att:chess.c:         if( ch->pcdata->game_board->type == TYPE_LOCAL ) \
att:clans.c:   if( IS_NPC( ch ) || !ch->pcdata->clan )
att:clans.c:   for( roster = ch->pcdata->clan->first_member; roster; roster = roster->next )
att:clans.c:         roster->kills = ch->pcdata->mkills;
att:clans.c:         roster->deaths = ch->pcdata->mdeaths;
att:clans.c:         save_clan( ch->pcdata->clan );
att:clans.c:   add_roster( ch->pcdata->clan, ch->name, ch->Class, ch->level, ch->pcdata->mkills, ch->pcdata->mdeaths );
att:clans.c:   save_clan( ch->pcdata->clan );
att:clans.c:   if( IS_NPC( ch ) || !ch->pcdata->clan )
att:clans.c:   clan = ch->pcdata->clan;
att:clans.c:   if( IS_NPC( ch ) || !ch->pcdata->clan )
att:clans.c:   clan = ch->pcdata->clan;
att:clans.c:   if( ( ch->pcdata && ch->pcdata->bestowments
att:clans.c:         && is_name( "caninduct", ch->pcdata->bestowments ) )
att:clans.c:   if( IS_NPC( ch ) || !ch->pcdata->council )
att:clans.c:   council = ch->pcdata->council;
att:clans.c:   if( IS_NPC( ch ) || !ch->pcdata->clan )
att:clans.c:   clan = ch->pcdata->clan;
att:clans.c:   if( ( ch->pcdata && ch->pcdata->bestowments
att:clans.c:         && is_name( "canoutcast", ch->pcdata->bestowments ) )
att:clans.c:      if( ch->pcdata->clan->clan_type == CLAN_ORDER )
att:clans.c:      else if( ch->pcdata->clan->clan_type == CLAN_GUILD )
att:clans.c:   if( victim->pcdata->clan != ch->pcdata->clan )
att:clans.c:      if( ch->pcdata->clan->clan_type == CLAN_ORDER )
att:clans.c:      else if( ch->pcdata->clan->clan_type == CLAN_GUILD )
att:clans.c:   if( !str_cmp( victim->name, ch->pcdata->clan->number1 ) )
att:clans.c:      STRFREE( ch->pcdata->clan->number1 );
att:clans.c:      ch->pcdata->clan->number1 = STRALLOC( "" );
att:clans.c:   if( !str_cmp( victim->name, ch->pcdata->clan->number2 ) )
att:clans.c:      STRFREE( ch->pcdata->clan->number2 );
att:clans.c:      ch->pcdata->clan->number2 = STRALLOC( "" );
att:clans.c:   if( !str_cmp( victim->name, ch->pcdata->clan->deity ) )
att:clans.c:      STRFREE( ch->pcdata->clan->deity );
att:clans.c:      ch->pcdata->clan->deity = STRALLOC( "" );
att:clans.c:   if( IS_NPC( ch ) || !ch->pcdata->council )
att:clans.c:   council = ch->pcdata->council;
att:clans.c:   if( victim->pcdata->council != ch->pcdata->council )
att:clans.c:   if( council->head2 && !str_cmp( victim->name, ch->pcdata->council->head2 ) )
att:clans.c:      STRFREE( ch->pcdata->council->head2 );
att:clans.c:      ch->pcdata->council->head2 = NULL;
att:clans.c:   if( IS_NPC( ch ) || !ch->pcdata->clan )
att:clans.c:   if( ch->pcdata->clan->clan_type != CLAN_ORDER && ch->pcdata->clan->clan_type != CLAN_GUILD )
att:clans.c:      snprintf( filename, 256, "%s%s.defeats", CLAN_DIR, ch->pcdata->clan->name );
att:clans.c:      if( !str_cmp( ch->name, ch->pcdata->clan->leader ) && !str_cmp( argument, "clean" ) )
att:clans.c:   if( IS_NPC( ch ) || !ch->pcdata->clan )
att:clans.c:   if( ch->pcdata->clan->clan_type != CLAN_ORDER && ch->pcdata->clan->clan_type != CLAN_GUILD )
att:clans.c:      snprintf( filename, 256, "%s%s.record", CLAN_DIR, ch->pcdata->clan->name );
att:clans.c:      if( !str_cmp( ch->name, ch->pcdata->clan->leader ) && !str_cmp( argument, "clean" ) )
att:clans.c:   if( IS_NPC( ch ) || !IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
att:clans.c:   if( !IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) && IS_SET( victim->pcdata->flags, PCFLAG_DEADLY ) )
att:clans.c:      if( IS_SET( victim->pcdata->flags, PCFLAG_DEADLY ) && IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
att:color.c:      if( IS_NPC( ch ) || !IS_SET( ch->pcdata->flags, PCFLAG_PAGERON ) )
att:comm.c:      log_printf_plus( LOG_COMM, UMAX( sysdata.log_level, ch->level ), "Closing link to %s. (INRoom %d)", ch->pcdata->filename, ( ch->in_room ? ch->in_room->vnum : -1 ) );
att:comm.c:   if( !IS_SET( ch->pcdata->flags, PCFLAG_NOINTRO ) )
att:comm.c:   if( str_cmp( sha256_crypt( argument ), ch->pcdata->pwd ) )
att:comm.c:   if( check_playing( d, ch->pcdata->filename, TRUE ) )
att:comm.c:chk = check_reconnect( d, ch->pcdata->filename, TRUE );
att:comm.c:   mudstrlcpy( buf, ch->pcdata->filename, MAX_STRING_LENGTH );
att:comm.c:   DISPOSE( ch->pcdata->pwd );
att:comm.c:   ch->pcdata->pwd = str_dup( pwdnew );
att:comm.c:   if( str_cmp( sha256_crypt( argument ), ch->pcdata->pwd ) )
att:comm.c:   ch->pcdata->cpose = str_dup( " is here." );
att:comm.c:   ch->pcdata->customclass = str_dup( "Adventurer" );
att:comm.c:   ch->pcdata->str = 4;
att:comm.c:   ch->pcdata->intel = 3;
att:comm.c:   ch->pcdata->dex = 4;
att:comm.c:   ch->pcdata->lck = 2;
att:comm.c:   ch->pcdata->att = 10;
att:comm.c:   ch->pcdata->def = 15;
att:comm.c:   ch->pcdata->mdef = 5;
att:comm.c:   ch->pcdata->matt = 5;
att:comm.c:   ch->pcdata->strplus = 0;
att:comm.c:   ch->pcdata->intplus = 0;
att:comm.c:   ch->pcdata->dexplus = 0;
att:comm.c:   ch->pcdata->lckplus = 0;
att:comm.c:   ch->pcdata->attplus = 0;
att:comm.c:   ch->pcdata->defplus = 0;
att:comm.c:   ch->pcdata->mattplus = 0;
att:comm.c:   ch->pcdata->mdefplus = 0;
att:comm.c:   ch->pcdata->mlevel = 1;
att:comm.c:   ch->pcdata->deflevel = 1;
att:comm.c:   ch->pcdata->attlevel = 1;
att:comm.c:   ch->pcdata->hometown = str_dup( "Kroridge" );
att:comm.c:   ch->pcdata->hometown = str_dup( "O'ran Thalore" );
att:comm.c:   ch->pcdata->hometown = str_dup( "Kimlodar" );
att:comm.c:   ch->pcdata->hometown = str_dup( "Shireton" );
att:comm.c:   ch->pcdata->hometown = str_dup( "BeachCastle" );
att:comm.c:   ch->pcdata->hometown = str_dup( "Calmarnock" );
att:comm.c:   ch->pcdata->hometown = str_dup( "Tarnstead" );
att:comm.c:   ch->pcdata->hometown = str_dup( "Dhubrokh" );
att:comm.c:      SET_BIT( ch->pcdata->flags, PCFLAG_WATCH );
att:comm.c:      REMOVE_BIT( ch->pcdata->flags, PCFLAG_WATCH );
att:comm.c:      ch->pcdata->clan = NULL;
att:comm.c:         ch->pcdata->learned[iLang] = 100;
att:comm.c:                  ch->pcdata->learned[uLang] = 100;
att:comm.c:      ch->pcdata->day = time_info.day;
att:comm.c:      ch->pcdata->month = time_info.month;
att:comm.c:      ch->pcdata->year = time_info.year - 17;
att:comm.c:      ch->pcdata->age = 17;
att:comm.c:      ch->pcdata->age_bonus = 0;
att:comm.c:         ch->pcdata->auth_state = 0;
att:comm.c:         SET_BIT( ch->pcdata->flags, PCFLAG_UNAUTHED );
att:comm.c:   else if( !IS_IMMORTAL( ch ) && ch->pcdata->release_date > 0 && ch->pcdata->release_date > current_time )
att:comm.c:   if( ch->pcdata->pet )
att:comm.c:      act( AT_ACTION, "$n returns to $s master from the Void.", ch->pcdata->pet, NULL, ch, TO_NOTVICT );
att:comm.c:      act( AT_ACTION, "$N returns with you to the realms.", ch, NULL, ch->pcdata->pet, TO_CHAR );
att:comm.c:   if( str_cmp( sha256_crypt( argument ), ch->pcdata->pwd ) )
att:comm.c:      if( !IS_NPC( ch ) && ( !fConn || !ch->desc ) && ch->pcdata->filename && !str_cmp( name, ch->pcdata->filename ) )
att:comm.c:            d->character->pcdata->pwd = str_dup( ch->pcdata->pwd );
att:comm.c:               ch->pcdata->recent_site = STRALLOC( d->host );
att:comm.c:            log_printf_plus( LOG_COMM, sysdata.log_level, "%s already connected.", ch->pcdata->filename );
att:comm.c:            ch->pcdata->recent_site = STRALLOC( d->host );
att:comm.c:                          ch->pcdata->filename, d->host );
att:comm.c:   REMOVE_BIT( ch->pcdata->flags, PCFLAG_IDLE );
att:comm.c:         && ( get_trust(to) < ( ch->pcdata ? ch->pcdata->wizinvis : 0 ) ) ) ) ) )
att:comm.c:   if( !NOT_AUTHED( ch ) || ch->pcdata->auth_state != 2 )
att:comm.c:   STRFREE( ch->pcdata->filename );
att:comm.c:   ch->pcdata->filename = STRALLOC( ucase_argument );
att:comm.c:   ch->pcdata->auth_state = 0;
att:comm.c:   if( !IS_NPC( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_HELPSTART ) )
att:comm.c:   else if( !IS_NPC( ch ) && ch->substate != SUB_NONE && ch->pcdata->subprompt && ch->pcdata->subprompt[0] != '\0' )
att:comm.c:      prompt = ch->pcdata->subprompt;
att:comm.c:   else if( IS_NPC( ch ) || ( !ch->fighting && ( !ch->pcdata->prompt || !*ch->pcdata->prompt ) ) )
att:comm.c:      if( !ch->pcdata->fprompt || !*ch->pcdata->fprompt )
att:comm.c:         prompt = ch->pcdata->fprompt;
att:comm.c:      prompt = ch->pcdata->prompt;
att:comm.c:                     pstat = ch->pcdata->condition[COND_BLOODTHIRST];
att:comm.c:                     if( IS_SET( ch->pcdata->flags, PCFLAG_DND ) )
att:comm.c:                               ( IS_NPC( ch ) ? ch->mobinvis : ch->pcdata->wizinvis ) );
att:comm.c:                            : ( xIS_SET( ch->act, PLR_WIZINVIS ) ? ch->pcdata->wizinvis : 0 ) );
att:comm.c:   pclines = UMAX( ch->pcdata->pagerlen, 5 ) - 1;
att:comm.c.backup:      log_printf_plus( LOG_COMM, UMAX( sysdata.log_level, ch->level ), "Closing link to %s. (INRoom %d)", ch->pcdata->filename, ( ch->in_room ? ch->in_room->vnum : -1 ) );
att:comm.c.backup:   if( !IS_SET( ch->pcdata->flags, PCFLAG_NOINTRO ) )
att:comm.c.backup:   if( str_cmp( sha256_crypt( argument ), ch->pcdata->pwd ) )
att:comm.c.backup:   if( check_playing( d, ch->pcdata->filename, TRUE ) )
att:comm.c.backup:chk = check_reconnect( d, ch->pcdata->filename, TRUE );
att:comm.c.backup:   mudstrlcpy( buf, ch->pcdata->filename, MAX_STRING_LENGTH );
att:comm.c.backup:   DISPOSE( ch->pcdata->pwd );
att:comm.c.backup:   ch->pcdata->pwd = str_dup( pwdnew );
att:comm.c.backup:   if( str_cmp( sha256_crypt( argument ), ch->pcdata->pwd ) )
att:comm.c.backup:   ch->pcdata->customclass = str_dup( "Adventurer" );
att:comm.c.backup:      SET_BIT( ch->pcdata->flags, PCFLAG_WATCH );
att:comm.c.backup:      REMOVE_BIT( ch->pcdata->flags, PCFLAG_WATCH );
att:comm.c.backup:      ch->pcdata->clan = NULL;
att:comm.c.backup:         ch->pcdata->learned[iLang] = 100;
att:comm.c.backup:                  ch->pcdata->learned[uLang] = 100;
att:comm.c.backup:      ch->pcdata->day = time_info.day;
att:comm.c.backup:      ch->pcdata->month = time_info.month;
att:comm.c.backup:      ch->pcdata->year = time_info.year - 17;
att:comm.c.backup:      ch->pcdata->age = 17;
att:comm.c.backup:      ch->pcdata->age_bonus = 0;
att:comm.c.backup:         ch->pcdata->auth_state = 0;
att:comm.c.backup:         SET_BIT( ch->pcdata->flags, PCFLAG_UNAUTHED );
att:comm.c.backup:   else if( !IS_IMMORTAL( ch ) && ch->pcdata->release_date > 0 && ch->pcdata->release_date > current_time )
att:comm.c.backup:   if( ch->pcdata->pet )
att:comm.c.backup:      act( AT_ACTION, "$n returns to $s master from the Void.", ch->pcdata->pet, NULL, ch, TO_NOTVICT );
att:comm.c.backup:      act( AT_ACTION, "$N returns with you to the realms.", ch, NULL, ch->pcdata->pet, TO_CHAR );
att:comm.c.backup:   if( str_cmp( sha256_crypt( argument ), ch->pcdata->pwd ) )
att:comm.c.backup:      if( !IS_NPC( ch ) && ( !fConn || !ch->desc ) && ch->pcdata->filename && !str_cmp( name, ch->pcdata->filename ) )
att:comm.c.backup:            d->character->pcdata->pwd = str_dup( ch->pcdata->pwd );
att:comm.c.backup:               ch->pcdata->recent_site = STRALLOC( d->host );
att:comm.c.backup:            log_printf_plus( LOG_COMM, sysdata.log_level, "%s already connected.", ch->pcdata->filename );
att:comm.c.backup:            ch->pcdata->recent_site = STRALLOC( d->host );
att:comm.c.backup:                          ch->pcdata->filename, d->host );
att:comm.c.backup:   REMOVE_BIT( ch->pcdata->flags, PCFLAG_IDLE );
att:comm.c.backup:         && ( get_trust(to) < ( ch->pcdata ? ch->pcdata->wizinvis : 0 ) ) ) ) ) )
att:comm.c.backup:   if( !NOT_AUTHED( ch ) || ch->pcdata->auth_state != 2 )
att:comm.c.backup:   STRFREE( ch->pcdata->filename );
att:comm.c.backup:   ch->pcdata->filename = STRALLOC( ucase_argument );
att:comm.c.backup:   ch->pcdata->auth_state = 0;
att:comm.c.backup:   if( !IS_NPC( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_HELPSTART ) )
att:comm.c.backup:   else if( !IS_NPC( ch ) && ch->substate != SUB_NONE && ch->pcdata->subprompt && ch->pcdata->subprompt[0] != '\0' )
att:comm.c.backup:      prompt = ch->pcdata->subprompt;
att:comm.c.backup:   else if( IS_NPC( ch ) || ( !ch->fighting && ( !ch->pcdata->prompt || !*ch->pcdata->prompt ) ) )
att:comm.c.backup:      if( !ch->pcdata->fprompt || !*ch->pcdata->fprompt )
att:comm.c.backup:         prompt = ch->pcdata->fprompt;
att:comm.c.backup:      prompt = ch->pcdata->prompt;
att:comm.c.backup:                     pstat = ch->pcdata->condition[COND_BLOODTHIRST];
att:comm.c.backup:                     if( IS_SET( ch->pcdata->flags, PCFLAG_DND ) )
att:comm.c.backup:                               ( IS_NPC( ch ) ? ch->mobinvis : ch->pcdata->wizinvis ) );
att:comm.c.backup:                            : ( xIS_SET( ch->act, PLR_WIZINVIS ) ? ch->pcdata->wizinvis : 0 ) );
att:comm.c.backup:   pclines = UMAX( ch->pcdata->pagerlen, 5 ) - 1;
att:comm.c.bak:      log_printf_plus( LOG_COMM, UMAX( sysdata.log_level, ch->level ), "Closing link to %s. (INRoom %d)", ch->pcdata->filename, ( ch->in_room ? ch->in_room->vnum : -1 ) );
att:comm.c.bak:   if( !IS_SET( ch->pcdata->flags, PCFLAG_NOINTRO ) )
att:comm.c.bak:   if( str_cmp( sha256_crypt( argument ), ch->pcdata->pwd ) )
att:comm.c.bak:   if( check_playing( d, ch->pcdata->filename, TRUE ) )
att:comm.c.bak:chk = check_reconnect( d, ch->pcdata->filename, TRUE );
att:comm.c.bak:   mudstrlcpy( buf, ch->pcdata->filename, MAX_STRING_LENGTH );
att:comm.c.bak:   DISPOSE( ch->pcdata->pwd );
att:comm.c.bak:   ch->pcdata->pwd = str_dup( pwdnew );
att:comm.c.bak:   if( str_cmp( sha256_crypt( argument ), ch->pcdata->pwd ) )
att:comm.c.bak:   ch->pcdata->customclass = str_dup( "Adventurer" );
att:comm.c.bak:      SET_BIT( ch->pcdata->flags, PCFLAG_WATCH );
att:comm.c.bak:      REMOVE_BIT( ch->pcdata->flags, PCFLAG_WATCH );
att:comm.c.bak:      ch->pcdata->clan = NULL;
att:comm.c.bak:         ch->pcdata->learned[iLang] = 100;
att:comm.c.bak:                  ch->pcdata->learned[uLang] = 100;
att:comm.c.bak:      ch->pcdata->day = time_info.day;
att:comm.c.bak:      ch->pcdata->month = time_info.month;
att:comm.c.bak:      ch->pcdata->year = time_info.year - 17;
att:comm.c.bak:      ch->pcdata->age = 17;
att:comm.c.bak:      ch->pcdata->age_bonus = 0;
att:comm.c.bak:         ch->pcdata->auth_state = 0;
att:comm.c.bak:         SET_BIT( ch->pcdata->flags, PCFLAG_UNAUTHED );
att:comm.c.bak:   else if( !IS_IMMORTAL( ch ) && ch->pcdata->release_date > 0 && ch->pcdata->release_date > current_time )
att:comm.c.bak:   if( ch->pcdata->pet )
att:comm.c.bak:      act( AT_ACTION, "$n returns to $s master from the Void.", ch->pcdata->pet, NULL, ch, TO_NOTVICT );
att:comm.c.bak:      act( AT_ACTION, "$N returns with you to the realms.", ch, NULL, ch->pcdata->pet, TO_CHAR );
att:comm.c.bak:   if( str_cmp( sha256_crypt( argument ), ch->pcdata->pwd ) )
att:comm.c.bak:      if( !IS_NPC( ch ) && ( !fConn || !ch->desc ) && ch->pcdata->filename && !str_cmp( name, ch->pcdata->filename ) )
att:comm.c.bak:            d->character->pcdata->pwd = str_dup( ch->pcdata->pwd );
att:comm.c.bak:               ch->pcdata->recent_site = STRALLOC( d->host );
att:comm.c.bak:            log_printf_plus( LOG_COMM, sysdata.log_level, "%s already connected.", ch->pcdata->filename );
att:comm.c.bak:            ch->pcdata->recent_site = STRALLOC( d->host );
att:comm.c.bak:                          ch->pcdata->filename, d->host );
att:comm.c.bak:   REMOVE_BIT( ch->pcdata->flags, PCFLAG_IDLE );
att:comm.c.bak:         && ( get_trust(to) < ( ch->pcdata ? ch->pcdata->wizinvis : 0 ) ) ) ) ) )
att:comm.c.bak:   if( !NOT_AUTHED( ch ) || ch->pcdata->auth_state != 2 )
att:comm.c.bak:   STRFREE( ch->pcdata->filename );
att:comm.c.bak:   ch->pcdata->filename = STRALLOC( ucase_argument );
att:comm.c.bak:   ch->pcdata->auth_state = 0;
att:comm.c.bak:   if( !IS_NPC( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_HELPSTART ) )
att:comm.c.bak:   else if( !IS_NPC( ch ) && ch->substate != SUB_NONE && ch->pcdata->subprompt && ch->pcdata->subprompt[0] != '\0' )
att:comm.c.bak:      prompt = ch->pcdata->subprompt;
att:comm.c.bak:   else if( IS_NPC( ch ) || ( !ch->fighting && ( !ch->pcdata->prompt || !*ch->pcdata->prompt ) ) )
att:comm.c.bak:      if( !ch->pcdata->fprompt || !*ch->pcdata->fprompt )
att:comm.c.bak:         prompt = ch->pcdata->fprompt;
att:comm.c.bak:      prompt = ch->pcdata->prompt;
att:comm.c.bak:                     pstat = ch->pcdata->condition[COND_BLOODTHIRST];
att:comm.c.bak:                     if( IS_SET( ch->pcdata->flags, PCFLAG_DND ) )
att:comm.c.bak:                               ( IS_NPC( ch ) ? ch->mobinvis : ch->pcdata->wizinvis ) );
att:comm.c.bak:                            : ( xIS_SET( ch->act, PLR_WIZINVIS ) ? ch->pcdata->wizinvis : 0 ) );
att:comm.c.bak:   pclines = UMAX( ch->pcdata->pagerlen, 5 ) - 1;
att:db.c:      if( ch->pcdata->pet )
att:db.c:         extract_char( ch->pcdata->pet, TRUE );
att:db.c:         ch->pcdata->pet = NULL;
att:db.c:      for( temp = ch->pcdata->first_ignored; temp; temp = next )
att:db.c:         UNLINK( temp, ch->pcdata->first_ignored, ch->pcdata->last_ignored, next, prev );
att:db.c:      STRFREE( ch->pcdata->filename );
att:db.c:      STRFREE( ch->pcdata->deity_name );
att:db.c:      STRFREE( ch->pcdata->clan_name );
att:db.c:      STRFREE( ch->pcdata->council_name );
att:db.c:      if( ch->pcdata->recent_site )
att:db.c:         STRFREE( ch->pcdata->recent_site );
att:db.c:      if( ch->pcdata->prev_site )
att:db.c:         STRFREE( ch->pcdata->prev_site );
att:db.c:      DISPOSE( ch->pcdata->pwd );   /* no hash */
att:db.c:      DISPOSE( ch->pcdata->bamfin );   /* no hash */
att:db.c:      DISPOSE( ch->pcdata->bamfout );  /* no hash */
att:db.c:      DISPOSE( ch->pcdata->rank );
att:db.c:      STRFREE( ch->pcdata->title );
att:db.c:      STRFREE( ch->pcdata->bio );
att:db.c:      DISPOSE( ch->pcdata->bestowments ); /* no hash */
att:db.c:      DISPOSE( ch->pcdata->homepage ); /* no hash */
att:db.c:      STRFREE( ch->pcdata->authed_by );
att:db.c:      STRFREE( ch->pcdata->prompt );
att:db.c:      STRFREE( ch->pcdata->fprompt );
att:db.c:      if( ch->pcdata->helled_by )
att:db.c:         STRFREE( ch->pcdata->helled_by );
att:db.c:      if( ch->pcdata->subprompt )
att:db.c:         STRFREE( ch->pcdata->subprompt );
att:db.c:      if( ch->pcdata->tell_history )
att:db.c:            if( ch->pcdata->tell_history[i] )
att:db.c:               STRFREE( ch->pcdata->tell_history[i] );
att:db.c:         DISPOSE( ch->pcdata->tell_history );
att:deity.c:            if( vch->pcdata->deity == deity )
att:deity.c:               snprintf( buf, MAX_STRING_LENGTH, "&R\r\nYour deity, %s, has met its demise!\r\n", vch->pcdata->deity_name );
att:deity.c:               xREMOVE_BITS( vch->affected_by, vch->pcdata->deity->affected );
att:deity.c:               REMOVE_BIT( vch->resistant, vch->pcdata->deity->element );
att:deity.c:               REMOVE_BIT( vch->susceptible, vch->pcdata->deity->suscept );
att:deity.c:               vch->pcdata->deity = NULL;
att:deity.c:               STRFREE( vch->pcdata->deity_name );
att:deity.c:               vch->pcdata->deity_name = STRALLOC( "" );
att:deity.c:      if( !ch->pcdata->deity )
att:deity.c:      --ch->pcdata->deity->worshippers;
att:deity.c:      if( ch->pcdata->deity->worshippers < 0 )
att:deity.c:         ch->pcdata->deity->worshippers = 0;
att:deity.c:      ch->pcdata->favor = -2500;
att:deity.c:      xREMOVE_BITS( ch->affected_by, ch->pcdata->deity->affected );
att:deity.c:      REMOVE_BIT( ch->resistant, ch->pcdata->deity->element );
att:deity.c:      REMOVE_BIT( ch->susceptible, ch->pcdata->deity->suscept );
att:deity.c:      save_deity( ch->pcdata->deity );
att:deity.c:      ch->pcdata->deity = NULL;
att:deity.c:      STRFREE( ch->pcdata->deity_name );
att:deity.c:      ch->pcdata->deity_name = STRALLOC( "" );
att:deity.c:   if( ch->pcdata->deity )
att:deity.c:   STRFREE( ch->pcdata->deity_name );
att:deity.c:   ch->pcdata->deity_name = QUICKLINK( deity->name );
att:deity.c:   ch->pcdata->deity = deity;
att:deity.c:   if( ch->pcdata->favor > deity->affectednum )
att:deity.c:      xSET_BITS( ch->affected_by, ch->pcdata->deity->affected );
att:deity.c:   if( ch->pcdata->favor > deity->elementnum )
att:deity.c:      SET_BIT( ch->resistant, ch->pcdata->deity->element );
att:deity.c:   if( ch->pcdata->favor < deity->susceptnum )
att:deity.c:      SET_BIT( ch->susceptible, ch->pcdata->deity->suscept );
att:deity.c:   act( AT_MAGIC, "Body and soul, you devote yourself to $t!", ch, ch->pcdata->deity_name, NULL, TO_CHAR );
att:deity.c:   ++ch->pcdata->deity->worshippers;
att:deity.c:   save_deity( ch->pcdata->deity );
att:deity.c:   if( IS_NPC( ch ) || !ch->pcdata->deity )
att:deity.c:   oldfavor = ch->pcdata->favor;
att:deity.c:      if( ch->pcdata->favor < ch->pcdata->deity->scorpse )
att:deity.c:                  ch->pcdata->favor -= ch->pcdata->deity->scorpse;
att:deity.c:      ch->pcdata->favor -= ch->pcdata->deity->scorpse;
att:deity.c:      if( ch->pcdata->favor < ch->pcdata->deity->susceptnum )
att:deity.c:         SET_BIT( ch->susceptible, ch->pcdata->deity->suscept );
att:deity.c:      if( ( oldfavor > ch->pcdata->deity->affectednum &&
att:deity.c:            ch->pcdata->favor <= ch->pcdata->deity->affectednum ) ||
att:deity.c:          ( oldfavor > ch->pcdata->deity->elementnum &&
att:deity.c:            ch->pcdata->favor <= ch->pcdata->deity->elementnum ) ||
att:deity.c:          ( oldfavor < ch->pcdata->deity->susceptnum && ch->pcdata->favor >= ch->pcdata->deity->susceptnum ) )
att:deity.c:      if( ch->pcdata->favor < ch->pcdata->deity->savatar )
att:deity.c:      snprintf( buf, MAX_STRING_LENGTH, victim->short_descr, ch->pcdata->deity->name );
att:deity.c:      snprintf( buf, MAX_STRING_LENGTH, victim->long_descr, ch->pcdata->deity->name );
att:deity.c:      snprintf( buf, MAX_STRING_LENGTH, victim->description, ch->pcdata->deity->name );
att:deity.c:      victim->hit = ch->hit * 6 + ch->pcdata->favor;
att:deity.c:      victim->alignment = ch->pcdata->deity->alignment;
att:deity.c:      victim->max_hit = ch->hit * 6 + ch->pcdata->favor;
att:deity.c:      ch->pcdata->favor -= ch->pcdata->deity->savatar;
att:deity.c:      if( ch->pcdata->favor < ch->pcdata->deity->susceptnum )
att:deity.c:         SET_BIT( ch->susceptible, ch->pcdata->deity->suscept );
att:deity.c:      if( ( oldfavor > ch->pcdata->deity->affectednum &&
att:deity.c:            ch->pcdata->favor <= ch->pcdata->deity->affectednum ) ||
att:deity.c:          ( oldfavor > ch->pcdata->deity->elementnum &&
att:deity.c:            ch->pcdata->favor <= ch->pcdata->deity->elementnum ) ||
att:deity.c:          ( oldfavor < ch->pcdata->deity->susceptnum && ch->pcdata->favor >= ch->pcdata->deity->susceptnum ) )
att:deity.c:      if( ch->pcdata->favor < ch->pcdata->deity->sdeityobj )
att:deity.c:      snprintf( buf, MAX_STRING_LENGTH, "sigil %s", ch->pcdata->deity->name );
att:deity.c:      snprintf( buf, MAX_STRING_LENGTH, obj->short_descr, ch->pcdata->deity->name );
att:deity.c:      snprintf( buf, MAX_STRING_LENGTH, obj->description, ch->pcdata->deity->name );
att:deity.c:      ch->pcdata->favor -= ch->pcdata->deity->sdeityobj;
att:deity.c:      if( ch->pcdata->favor < ch->pcdata->deity->susceptnum )
att:deity.c:         SET_BIT( ch->susceptible, ch->pcdata->deity->suscept );
att:deity.c:      if( ( oldfavor > ch->pcdata->deity->affectednum &&
att:deity.c:            ch->pcdata->favor <= ch->pcdata->deity->affectednum ) ||
att:deity.c:          ( oldfavor > ch->pcdata->deity->elementnum &&
att:deity.c:            ch->pcdata->favor <= ch->pcdata->deity->elementnum ) ||
att:deity.c:          ( oldfavor < ch->pcdata->deity->susceptnum && ch->pcdata->favor >= ch->pcdata->deity->susceptnum ) )
att:deity.c:      switch ( ch->pcdata->deity->objstat )
att:deity.c:      if( ch->pcdata->favor < ch->pcdata->deity->srecall )
att:deity.c:      if( !IS_NPC( ch ) && ch->pcdata->clan )
att:deity.c:         location = get_room_index( ch->pcdata->clan->recall );
att:deity.c:      if( !IS_NPC( ch ) && !location && ch->level >= 5 && IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
att:deity.c:      ch->pcdata->favor -= ch->pcdata->deity->srecall;
att:deity.c:      if( ch->pcdata->favor < ch->pcdata->deity->susceptnum )
att:deity.c:         SET_BIT( ch->susceptible, ch->pcdata->deity->suscept );
att:deity.c:      if( ( oldfavor > ch->pcdata->deity->affectednum &&
att:deity.c:            ch->pcdata->favor <= ch->pcdata->deity->affectednum ) ||
att:deity.c:          ( oldfavor > ch->pcdata->deity->elementnum &&
att:deity.c:            ch->pcdata->favor <= ch->pcdata->deity->elementnum ) ||
att:deity.c:          ( oldfavor < ch->pcdata->deity->susceptnum && ch->pcdata->favor >= ch->pcdata->deity->susceptnum ) )
att:deity.c:   if( IS_NPC( ch ) || !ch->pcdata->deity )
att:deity.c:   oldfavor = ch->pcdata->favor;
att:deity.c:   if( ( ch->alignment - ch->pcdata->deity->alignment > 650
att:deity.c:         || ch->alignment - ch->pcdata->deity->alignment < -650 ) && ch->pcdata->deity->alignment != 0 )
att:deity.c:      ch->pcdata->favor -= 2;
att:deity.c:      ch->pcdata->favor = URANGE( -2500, ch->pcdata->favor, 2500 );
att:deity.c:      if( ch->pcdata->favor > ch->pcdata->deity->affectednum )
att:deity.c:         xSET_BITS( ch->affected_by, ch->pcdata->deity->affected );
att:deity.c:      if( ch->pcdata->favor > ch->pcdata->deity->elementnum )
att:deity.c:         SET_BIT( ch->resistant, ch->pcdata->deity->element );
att:deity.c:      if( ch->pcdata->favor < ch->pcdata->deity->susceptnum )
att:deity.c:         SET_BIT( ch->susceptible, ch->pcdata->deity->suscept );
att:deity.c:      if( ( oldfavor > ch->pcdata->deity->affectednum &&
att:deity.c:            ch->pcdata->favor <= ch->pcdata->deity->affectednum ) ||
att:deity.c:          ( oldfavor > ch->pcdata->deity->elementnum &&
att:deity.c:            ch->pcdata->favor <= ch->pcdata->deity->elementnum ) ||
att:deity.c:          ( oldfavor < ch->pcdata->deity->susceptnum && ch->pcdata->favor >= ch->pcdata->deity->susceptnum ) )
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->flee / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->flee_npcrace / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->kill / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->kill_npcrace / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->kill_magic / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->sac / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->bury_corpse / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->aid_spell / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->aid / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->steal / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->backstab / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->die / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->die_npcrace / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->spell_aid / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->dig_corpse / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->die_npcfoe / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->flee_npcfoe / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->kill_npcfoe / mod );
att:deity.c:   ch->pcdata->favor = URANGE( -2500, ch->pcdata->favor, 2500 );
att:deity.c:   if( ch->pcdata->favor > ch->pcdata->deity->affectednum )
att:deity.c:      xSET_BITS( ch->affected_by, ch->pcdata->deity->affected );
att:deity.c:   if( ch->pcdata->favor > ch->pcdata->deity->elementnum )
att:deity.c:      SET_BIT( ch->resistant, ch->pcdata->deity->element );
att:deity.c:   if( ch->pcdata->favor < ch->pcdata->deity->susceptnum )
att:deity.c:      SET_BIT( ch->susceptible, ch->pcdata->deity->suscept );
att:deity.c:   if( ( oldfavor > ch->pcdata->deity->affectednum &&
att:deity.c:         ch->pcdata->favor <= ch->pcdata->deity->affectednum ) ||
att:deity.c:       ( oldfavor > ch->pcdata->deity->elementnum &&
att:deity.c:         ch->pcdata->favor <= ch->pcdata->deity->elementnum ) ||
att:deity.c:       ( oldfavor < ch->pcdata->deity->susceptnum && ch->pcdata->favor >= ch->pcdata->deity->susceptnum ) )
att:fight.c:               DISPOSE( ch->pcdata->nuisance );
att:fight.c:       * ( 1 + abs( ch->alignment - ch->pcdata->clan->alignment ) );
att:fight.c:         bonus -= ch->pcdata->favor / -400;
att:fight.c:   if( !IS_NPC( ch ) && ch->pcdata->learned[gsn_enhanced_damage] > 0 )
att:fight.c:   victim_ac = ((((ch->pcdata->def + ch->pcdata->defplus) * ch->pcdata->deflevel) /15 ) * -1);
att:fight.c:   if( !IS_NPC( ch ) && ch->pcdata->learned[gsn_enhanced_damage] > 0 )
att:fight.c:	dam = ((dam + ch->pcdata->str + ch->pcdata->att) * ch->pcdata->attlevel) * ((ch->pcdata->dex/100) +1);
att:fight.c:         if( !IS_NPC( ch ) && !IS_IMMORTAL( ch ) && ch->pcdata->clan
att:fight.c:             && ch->pcdata->clan->clan_type != CLAN_ORDER && ch->pcdata->clan->clan_type != CLAN_GUILD && victim != ch )
att:fight.c:            snprintf( filename, 256, "%s%s.record", CLAN_DIR, ch->pcdata->clan->name );
att:fight.c:            if( victim->pcdata && victim->pcdata->clan && victim->pcdata->clan->name == ch->pcdata->clan->name )
att:fight.c:                     ch->pcdata->clan ? ch->pcdata->clan->badge :
att:fight.c:            if( ch->pcdata && ch->pcdata->clan && ch->pcdata->clan->name == victim->pcdata->clan->name )
att:fight.c:      if( !IS_NPC( ch ) && ch->pcdata->clan )
att:fight.c:       && IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) && IS_SET( victim->pcdata->flags, PCFLAG_DEADLY ) )
att:fight.c:         if( ch->pcdata->clan )
att:fight.c:            ch->pcdata->clan->mkills++;
att:fight.c:         ch->pcdata->mkills++;
att:fight.c:         if( ch->pcdata->deity )
att:fight.c:            if( victim->race == ch->pcdata->deity->npcrace )
att:fight.c:            else if( victim->race == ch->pcdata->deity->npcfoe )
att:fight.c:         ch->pcdata->pkills++;
att:fight.c:         if( ch->pcdata->clan )
att:fight.c:               ch->pcdata->clan->pkills[0]++;
att:fight.c:               ch->pcdata->clan->pkills[1]++;
att:fight.c:               ch->pcdata->clan->pkills[2]++;
att:fight.c:               ch->pcdata->clan->pkills[3]++;
att:fight.c:               ch->pcdata->clan->pkills[4]++;
att:fight.c:               ch->pcdata->clan->pkills[5]++;
att:fight.c:               ch->pcdata->clan->pkills[6]++;
att:fight.c:         ch->pcdata->pkills++;
att:fight.c:       && IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) && IS_SET( victim->pcdata->flags, PCFLAG_DEADLY ) )
att:fight.c:      if( !ch->pcdata->clan
att:fight.c:          || ( ch->pcdata->clan->clan_type != CLAN_NOKILL
att:fight.c:               && victim->pcdata->clan->clan_type != CLAN_NOKILL && ch->pcdata->clan != victim->pcdata->clan ) )
att:fight.c:         if( ch->pcdata->clan )
att:fight.c:               ch->pcdata->clan->pkills[0]++;
att:fight.c:               ch->pcdata->clan->pkills[1]++;
att:fight.c:               ch->pcdata->clan->pkills[2]++;
att:fight.c:               ch->pcdata->clan->pkills[3]++;
att:fight.c:               ch->pcdata->clan->pkills[4]++;
att:fight.c:               ch->pcdata->clan->pkills[5]++;
att:fight.c:               ch->pcdata->clan->pkills[6]++;
att:fight.c:         ch->pcdata->pkills++;
att:fight.c:            ch->pcdata->condition[COND_BLOODTHIRST] = ( 10 + ch->level );
att:fight.c:            if( ch->race == victim->pcdata->deity->npcrace )
att:fight.c:            else if( ch->race == victim->pcdata->deity->npcfoe )
att:fight.c:      if( ch->pcdata->clan )
att:fight.c:         ch->pcdata->clan->illegal_pk++;
att:fight.c:      ch->pcdata->illegal_pk++;
att:fight.c:    { if ( !(ch->pcdata->clan && victim->pcdata->clan
att:fight.c:      && ch->pcdata->clan == victim->pcdata->clan ) )  return; }
att:fight.c:        ch->pcdata->ap += (victim->level * get_curr_lck(ch));
att:fight.c:   if( dam == 0 && ( !IS_NPC( ch ) && ( IS_SET( ch->pcdata->flags, PCFLAG_GAG ) ) ) )
att:fight.c:            || !IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
att:fight.c:         if( wf && ch->pcdata->deity )
att:fight.c:            if( wf && wf->race == ch->pcdata->deity->npcrace )
att:fight.c:            else if( wf && wf->race == ch->pcdata->deity->npcfoe )
att:fight.c.backup:               DISPOSE( ch->pcdata->nuisance );
att:fight.c.backup:       * ( 1 + abs( ch->alignment - ch->pcdata->clan->alignment ) );
att:fight.c.backup:         bonus -= ch->pcdata->favor / -400;
att:fight.c.backup:   if( !IS_NPC( ch ) && ch->pcdata->learned[gsn_enhanced_damage] > 0 )
att:fight.c.backup:   victim_ac = ((((ch->pcdata->def + ch->pcdata->defplus) * ch->pcdata->deflevel) /15 ) * -1);
att:fight.c.backup:   if( !IS_NPC( ch ) && ch->pcdata->learned[gsn_enhanced_damage] > 0 )
att:fight.c.backup:	dam = (dam + ch->pcdata->str + ch->pcdata->att + ch->pcdata->attplus) * ch->pcdata->attlevel;
att:fight.c.backup:         if( !IS_NPC( ch ) && !IS_IMMORTAL( ch ) && ch->pcdata->clan
att:fight.c.backup:             && ch->pcdata->clan->clan_type != CLAN_ORDER && ch->pcdata->clan->clan_type != CLAN_GUILD && victim != ch )
att:fight.c.backup:            snprintf( filename, 256, "%s%s.record", CLAN_DIR, ch->pcdata->clan->name );
att:fight.c.backup:            if( victim->pcdata && victim->pcdata->clan && victim->pcdata->clan->name == ch->pcdata->clan->name )
att:fight.c.backup:                     ch->pcdata->clan ? ch->pcdata->clan->badge :
att:fight.c.backup:            if( ch->pcdata && ch->pcdata->clan && ch->pcdata->clan->name == victim->pcdata->clan->name )
att:fight.c.backup:      if( !IS_NPC( ch ) && ch->pcdata->clan )
att:fight.c.backup:       && IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) && IS_SET( victim->pcdata->flags, PCFLAG_DEADLY ) )
att:fight.c.backup:         if( ch->pcdata->clan )
att:fight.c.backup:            ch->pcdata->clan->mkills++;
att:fight.c.backup:         ch->pcdata->mkills++;
att:fight.c.backup:         if( ch->pcdata->deity )
att:fight.c.backup:            if( victim->race == ch->pcdata->deity->npcrace )
att:fight.c.backup:            else if( victim->race == ch->pcdata->deity->npcfoe )
att:fight.c.backup:         ch->pcdata->pkills++;
att:fight.c.backup:         if( ch->pcdata->clan )
att:fight.c.backup:               ch->pcdata->clan->pkills[0]++;
att:fight.c.backup:               ch->pcdata->clan->pkills[1]++;
att:fight.c.backup:               ch->pcdata->clan->pkills[2]++;
att:fight.c.backup:               ch->pcdata->clan->pkills[3]++;
att:fight.c.backup:               ch->pcdata->clan->pkills[4]++;
att:fight.c.backup:               ch->pcdata->clan->pkills[5]++;
att:fight.c.backup:               ch->pcdata->clan->pkills[6]++;
att:fight.c.backup:         ch->pcdata->pkills++;
att:fight.c.backup:       && IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) && IS_SET( victim->pcdata->flags, PCFLAG_DEADLY ) )
att:fight.c.backup:      if( !ch->pcdata->clan
att:fight.c.backup:          || ( ch->pcdata->clan->clan_type != CLAN_NOKILL
att:fight.c.backup:               && victim->pcdata->clan->clan_type != CLAN_NOKILL && ch->pcdata->clan != victim->pcdata->clan ) )
att:fight.c.backup:         if( ch->pcdata->clan )
att:fight.c.backup:               ch->pcdata->clan->pkills[0]++;
att:fight.c.backup:               ch->pcdata->clan->pkills[1]++;
att:fight.c.backup:               ch->pcdata->clan->pkills[2]++;
att:fight.c.backup:               ch->pcdata->clan->pkills[3]++;
att:fight.c.backup:               ch->pcdata->clan->pkills[4]++;
att:fight.c.backup:               ch->pcdata->clan->pkills[5]++;
att:fight.c.backup:               ch->pcdata->clan->pkills[6]++;
att:fight.c.backup:         ch->pcdata->pkills++;
att:fight.c.backup:            ch->pcdata->condition[COND_BLOODTHIRST] = ( 10 + ch->level );
att:fight.c.backup:            if( ch->race == victim->pcdata->deity->npcrace )
att:fight.c.backup:            else if( ch->race == victim->pcdata->deity->npcfoe )
att:fight.c.backup:      if( ch->pcdata->clan )
att:fight.c.backup:         ch->pcdata->clan->illegal_pk++;
att:fight.c.backup:      ch->pcdata->illegal_pk++;
att:fight.c.backup:    { if ( !(ch->pcdata->clan && victim->pcdata->clan
att:fight.c.backup:      && ch->pcdata->clan == victim->pcdata->clan ) )  return; }
att:fight.c.backup:        ch->pcdata->ap += (victim->level * get_curr_lck(ch));
att:fight.c.backup:   if( dam == 0 && ( !IS_NPC( ch ) && ( IS_SET( ch->pcdata->flags, PCFLAG_GAG ) ) ) )
att:fight.c.backup:            || !IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
att:fight.c.backup:         if( wf && ch->pcdata->deity )
att:fight.c.backup:            if( wf && wf->race == ch->pcdata->deity->npcrace )
att:fight.c.backup:            else if( wf && wf->race == ch->pcdata->deity->npcfoe )
att:handler.c:   ch_days = ( ch->pcdata->month + 1 ) * sysdata.dayspermonth;
att:handler.c:   ch_days += ch->pcdata->day;
att:handler.c:   age = time_info.year - ch->pcdata->year;
att:handler.c:         ch->pcdata->learned[sn] += mod;
att:handler.c:         ch->pcdata->learned[sn] = URANGE( 0, ch->pcdata->learned[sn] + mod, GET_ADEPT( ch, sn ) );
att:handler.c:            ch->pcdata->condition[COND_FULL] = URANGE( 0, ch->pcdata->condition[COND_FULL] + mod, 48 );
att:handler.c:            ch->pcdata->condition[COND_THIRST] = URANGE( 0, ch->pcdata->condition[COND_THIRST] + mod, 48 );
att:handler.c:            ch->pcdata->condition[COND_DRUNK] = URANGE( 0, ch->pcdata->condition[COND_DRUNK] + mod, 48 );
att:handler.c:            ch->pcdata->condition[COND_BLOODTHIRST] =
att:handler.c:               URANGE( 0, ch->pcdata->condition[COND_BLOODTHIRST] + mod, ch->level + 10 );
att:handler.c:   if( ch->pcdata->deity )
att:handler.c:      if( ch->pcdata->favor > ch->pcdata->deity->affectednum )
att:handler.c:         xSET_BITS( ch->affected_by, ch->pcdata->deity->affected );
att:handler.c:      if( ch->pcdata->favor > ch->pcdata->deity->elementnum )
att:handler.c:         SET_BIT( ch->resistant, ch->pcdata->deity->element );
att:handler.c:      if( ch->pcdata->favor < ch->pcdata->deity->susceptnum )
att:handler.c:         SET_BIT( ch->susceptible, ch->pcdata->deity->suscept );
att:handler.c:         if( wch->pcdata && wch->pcdata->pet == ch )
att:handler.c:            wch->pcdata->pet = NULL;
att:handler.c:      if( !IS_NPC( ch ) && ch->pcdata->clan )
att:handler.c:         location = get_room_index( ch->pcdata->clan->recall );
att:handler.c:   int drunk = IS_NPC( ch ) ? 0 : ch->pcdata->condition[COND_DRUNK];
att:handler.c:          && IS_SET( rch->pcdata->flags, PCFLAG_DND ) && get_trust( ch ) < get_trust( rch ) && can_see( ch, rch ) )
att:handler.c:      if( ch->pcdata->council && !str_cmp( ch->pcdata->council->name, "Newbie Council" ) )
att:handler.c:    clan_factor = 1 + abs( ch->alignment - ch->pcdata->clan->alignment ) / 1000; 
att:handler.c:      deity_factor = ch->pcdata->favor / -500;
att:handler.c:      deity_factor = ch->pcdata->favor / -500;
att:handler.c:   if( !IS_NPC( ch ) && ch->pcdata->nuisance && ch->pcdata->nuisance->flags > 2 )
att:handler.c:      c += ( int )( .4 * ( ( ch->pcdata->nuisance->flags - 2 ) * ch->pcdata->nuisance->power ) );
att:handler.c:      if( ch->pcdata->killed[x].vnum == vnum )
att:handler.c:         if( ch->pcdata->killed[x].count < 50 )
att:handler.c:            ++ch->pcdata->killed[x].count;
att:handler.c:      else if( ch->pcdata->killed[x].vnum == 0 )
att:handler.c:   memmove( ( char * )ch->pcdata->killed + sizeof( KILLED_DATA ),
att:handler.c:            ch->pcdata->killed, ( track - 1 ) * sizeof( KILLED_DATA ) );
att:handler.c:   ch->pcdata->killed[0].vnum = vnum;
att:handler.c:   ch->pcdata->killed[0].count = 1;
att:handler.c:      ch->pcdata->killed[track].vnum = 0;
att:handler.c:      if( ch->pcdata->killed[x].vnum == vnum )
att:handler.c:         return ch->pcdata->killed[x].count;
att:handler.c:      else if( ch->pcdata->killed[x].vnum == 0 )
att:handler.c:         if( !IS_NPC( ch ) && ch->pcdata->bestowments && is_name( cmd->name, ch->pcdata->bestowments )
att:handler.c.backup:   ch_days = ( ch->pcdata->month + 1 ) * sysdata.dayspermonth;
att:handler.c.backup:   ch_days += ch->pcdata->day;
att:handler.c.backup:   age = time_info.year - ch->pcdata->year;
att:handler.c.backup:         ch->pcdata->learned[sn] += mod;
att:handler.c.backup:         ch->pcdata->learned[sn] = URANGE( 0, ch->pcdata->learned[sn] + mod, GET_ADEPT( ch, sn ) );
att:handler.c.backup:            ch->pcdata->condition[COND_FULL] = URANGE( 0, ch->pcdata->condition[COND_FULL] + mod, 48 );
att:handler.c.backup:            ch->pcdata->condition[COND_THIRST] = URANGE( 0, ch->pcdata->condition[COND_THIRST] + mod, 48 );
att:handler.c.backup:            ch->pcdata->condition[COND_DRUNK] = URANGE( 0, ch->pcdata->condition[COND_DRUNK] + mod, 48 );
att:handler.c.backup:            ch->pcdata->condition[COND_BLOODTHIRST] =
att:handler.c.backup:               URANGE( 0, ch->pcdata->condition[COND_BLOODTHIRST] + mod, ch->level + 10 );
att:handler.c.backup:   if( ch->pcdata->deity )
att:handler.c.backup:      if( ch->pcdata->favor > ch->pcdata->deity->affectednum )
att:handler.c.backup:         xSET_BITS( ch->affected_by, ch->pcdata->deity->affected );
att:handler.c.backup:      if( ch->pcdata->favor > ch->pcdata->deity->elementnum )
att:handler.c.backup:         SET_BIT( ch->resistant, ch->pcdata->deity->element );
att:handler.c.backup:      if( ch->pcdata->favor < ch->pcdata->deity->susceptnum )
att:handler.c.backup:         SET_BIT( ch->susceptible, ch->pcdata->deity->suscept );
att:handler.c.backup:         if( wch->pcdata && wch->pcdata->pet == ch )
att:handler.c.backup:            wch->pcdata->pet = NULL;
att:handler.c.backup:      if( !IS_NPC( ch ) && ch->pcdata->clan )
att:handler.c.backup:         location = get_room_index( ch->pcdata->clan->recall );
att:handler.c.backup:   int drunk = IS_NPC( ch ) ? 0 : ch->pcdata->condition[COND_DRUNK];
att:handler.c.backup:          && IS_SET( rch->pcdata->flags, PCFLAG_DND ) && get_trust( ch ) < get_trust( rch ) && can_see( ch, rch ) )
att:handler.c.backup:      if( ch->pcdata->council && !str_cmp( ch->pcdata->council->name, "Newbie Council" ) )
att:handler.c.backup:    clan_factor = 1 + abs( ch->alignment - ch->pcdata->clan->alignment ) / 1000; 
att:handler.c.backup:      deity_factor = ch->pcdata->favor / -500;
att:handler.c.backup:      deity_factor = ch->pcdata->favor / -500;
att:handler.c.backup:   if( !IS_NPC( ch ) && ch->pcdata->nuisance && ch->pcdata->nuisance->flags > 2 )
att:handler.c.backup:      c += ( int )( .4 * ( ( ch->pcdata->nuisance->flags - 2 ) * ch->pcdata->nuisance->power ) );
att:handler.c.backup:      if( ch->pcdata->killed[x].vnum == vnum )
att:handler.c.backup:         if( ch->pcdata->killed[x].count < 50 )
att:handler.c.backup:            ++ch->pcdata->killed[x].count;
att:handler.c.backup:      else if( ch->pcdata->killed[x].vnum == 0 )
att:handler.c.backup:   memmove( ( char * )ch->pcdata->killed + sizeof( KILLED_DATA ),
att:handler.c.backup:            ch->pcdata->killed, ( track - 1 ) * sizeof( KILLED_DATA ) );
att:handler.c.backup:   ch->pcdata->killed[0].vnum = vnum;
att:handler.c.backup:   ch->pcdata->killed[0].count = 1;
att:handler.c.backup:      ch->pcdata->killed[track].vnum = 0;
att:handler.c.backup:      if( ch->pcdata->killed[x].vnum == vnum )
att:handler.c.backup:         return ch->pcdata->killed[x].count;
att:handler.c.backup:      else if( ch->pcdata->killed[x].vnum == 0 )
att:handler.c.backup:         if( !IS_NPC( ch ) && ch->pcdata->bestowments && is_name( cmd->name, ch->pcdata->bestowments )
att:hotboot.c:         och->pcdata->hotboot = TRUE;
att:house.c:   if( sysdata.save_pets && ch->pcdata && ch->pcdata->pet )
att:house.c:      extract_char( ch->pcdata->pet, TRUE );
att:house.c:   if( ch->pcdata && ch->pcdata->clan )
att:house.c:      save_clan( ch->pcdata->clan );
att:interp.c:                  || ( !IS_NPC( ch ) && ch->pcdata->council
att:interp.c:                       && is_name( cmd->name, ch->pcdata->council->powers )
att:interp.c:                  || ( !IS_NPC( ch ) && IS_SET( ch->pcdata->flags, PCFLAG_RETIRED )
att:interp.c:                  || ( !IS_NPC( ch ) && ch->pcdata->bestowments && ch->pcdata->bestowments[0] != '\0'
att:interp.c:                       && is_name( cmd->name, ch->pcdata->bestowments ) && cmd->level <= ( trust + sysdata.bestow_dif ) ) ) )
att:interp.c:      else if( IS_SET( ch->pcdata->flags, PCFLAG_WATCH ) )
att:interp.c:   if( !IS_NPC( ch ) && ch->pcdata->nuisance && ch->pcdata->nuisance->flags > 9
att:interp.c:       && number_percent(  ) < ( ( ch->pcdata->nuisance->flags - 9 ) * 10 * ch->pcdata->nuisance->power ) )
att:liquids.c:   if( !IS_NPC( ch ) && ch->pcdata->condition[COND_DRUNK] > MAX_COND_VALUE - 8 )
att:liquids.c:                && ch->level > 5 && ch->pcdata->condition[COND_BLOODTHIRST] > ( 5 + ch->level / 10 ) )
att:liquids.c:            if( ch->pcdata->condition[COND_BLOODTHIRST] < ( 10 + ch->level ) )
att:liquids.c:               if( ch->pcdata->condition[COND_FULL] >= MAX_COND_VALUE
att:liquids.c:                   || ch->pcdata->condition[COND_THIRST] >= MAX_COND_VALUE )
att:liquids.c:            ch->pcdata->condition[COND_THIRST] = MAX_COND_VALUE;
att:liquids.c:         if( !IS_NPC( ch ) && ( ch->pcdata->condition[COND_THIRST] == MAX_COND_VALUE
att:liquids.c:                                || ch->pcdata->condition[COND_FULL] == MAX_COND_VALUE ) )
att:liquids.c:            if( ch->pcdata->condition[COND_DRUNK] > ( MAX_COND_VALUE / 2 )
att:liquids.c:                && ch->pcdata->condition[COND_DRUNK] < ( MAX_COND_VALUE * .4 ) )
att:liquids.c:            else if( ch->pcdata->condition[COND_DRUNK] >= ( MAX_COND_VALUE * .4 )
att:liquids.c:                     && ch->pcdata->condition[COND_DRUNK] < ( MAX_COND_VALUE * .6 ) )
att:liquids.c:            else if( ch->pcdata->condition[COND_DRUNK] >= ( MAX_COND_VALUE * .6 )
att:liquids.c:                     && ch->pcdata->condition[COND_DRUNK] < ( MAX_COND_VALUE * .9 ) )
att:liquids.c:            else if( ch->pcdata->condition[COND_DRUNK] >= ( MAX_COND_VALUE * .9 )
att:liquids.c:                     && ch->pcdata->condition[COND_DRUNK] < MAX_COND_VALUE )
att:liquids.c:            else if( ch->pcdata->condition[COND_DRUNK] == MAX_COND_VALUE )
att:liquids.c:            if( ch->pcdata->condition[COND_THIRST] > ( MAX_COND_VALUE / 2 )
att:liquids.c:                && ch->pcdata->condition[COND_THIRST] < ( MAX_COND_VALUE * .4 ) )
att:liquids.c:            else if( ch->pcdata->condition[COND_THIRST] >= ( MAX_COND_VALUE * .4 )
att:liquids.c:                     && ch->pcdata->condition[COND_THIRST] < ( MAX_COND_VALUE * .6 ) )
att:liquids.c:            else if( ch->pcdata->condition[COND_THIRST] >= ( MAX_COND_VALUE * .6 )
att:liquids.c:                     && ch->pcdata->condition[COND_THIRST] < ( MAX_COND_VALUE * .9 ) )
att:liquids.c:            else if( ch->pcdata->condition[COND_THIRST] >= ( MAX_COND_VALUE * .9 )
att:liquids.c:                     && ch->pcdata->condition[COND_THIRST] < MAX_COND_VALUE )
att:liquids.c:            else if( ch->pcdata->condition[COND_THIRST] == MAX_COND_VALUE )
att:liquids.c:               if( ch->pcdata->condition[COND_BLOODTHIRST] > ( MAX_COND_VALUE / 2 )
att:liquids.c:                   && ch->pcdata->condition[COND_BLOODTHIRST] < ( MAX_COND_VALUE * .4 ) )
att:liquids.c:               else if( ch->pcdata->condition[COND_BLOODTHIRST] >= ( MAX_COND_VALUE * .4 )
att:liquids.c:                        && ch->pcdata->condition[COND_BLOODTHIRST] < ( MAX_COND_VALUE * .6 ) )
att:liquids.c:               else if( ch->pcdata->condition[COND_BLOODTHIRST] >= ( MAX_COND_VALUE * .6 )
att:liquids.c:                        && ch->pcdata->condition[COND_BLOODTHIRST] < ( MAX_COND_VALUE * .9 ) )
att:liquids.c:               else if( ch->pcdata->condition[COND_BLOODTHIRST] >= ( MAX_COND_VALUE * .9 )
att:liquids.c:                        && ch->pcdata->condition[COND_BLOODTHIRST] < MAX_COND_VALUE )
att:liquids.c:            else if( !IS_VAMPIRE( ch ) && ch->pcdata->condition[COND_BLOODTHIRST] >= MAX_COND_VALUE )
att:liquids.c:               ch->pcdata->condition[COND_BLOODTHIRST] = MAX_COND_VALUE;
att:liquids.c:            if( ch->pcdata->condition[COND_DRUNK] > ( MAX_COND_VALUE / 2 )
att:liquids.c:                && ch->pcdata->condition[COND_DRUNK] < ( MAX_COND_VALUE * .4 ) )
att:liquids.c:            else if( ch->pcdata->condition[COND_DRUNK] >= ( MAX_COND_VALUE * .4 )
att:liquids.c:                     && ch->pcdata->condition[COND_DRUNK] < ( MAX_COND_VALUE * .6 ) )
att:liquids.c:            else if( ch->pcdata->condition[COND_DRUNK] >= ( MAX_COND_VALUE * .6 )
att:liquids.c:                     && ch->pcdata->condition[COND_DRUNK] < ( MAX_COND_VALUE * .9 ) )
att:liquids.c:            else if( ch->pcdata->condition[COND_DRUNK] >= ( MAX_COND_VALUE * .9 )
att:liquids.c:                     && ch->pcdata->condition[COND_DRUNK] < MAX_COND_VALUE )
att:liquids.c:            else if( ch->pcdata->condition[COND_DRUNK] == MAX_COND_VALUE )
att:liquids.c:            if( ch->pcdata->condition[COND_THIRST] > ( MAX_COND_VALUE / 2 )
att:liquids.c:                && ch->pcdata->condition[COND_THIRST] < ( MAX_COND_VALUE * .4 ) )
att:liquids.c:            else if( ch->pcdata->condition[COND_THIRST] >= ( MAX_COND_VALUE * .4 )
att:liquids.c:                     && ch->pcdata->condition[COND_THIRST] < ( MAX_COND_VALUE * .6 ) )
att:liquids.c:            else if( ch->pcdata->condition[COND_THIRST] >= ( MAX_COND_VALUE * .6 )
att:liquids.c:                     && ch->pcdata->condition[COND_THIRST] < ( MAX_COND_VALUE * .9 ) )
att:liquids.c:            else if( ch->pcdata->condition[COND_THIRST] >= ( MAX_COND_VALUE * .9 )
att:liquids.c:                     && ch->pcdata->condition[COND_THIRST] < MAX_COND_VALUE )
att:liquids.c:            else if( ch->pcdata->condition[COND_THIRST] == MAX_COND_VALUE )
att:liquids.c:               if( ch->pcdata->condition[COND_BLOODTHIRST] > ( MAX_COND_VALUE / 2 )
att:liquids.c:                   && ch->pcdata->condition[COND_BLOODTHIRST] < ( MAX_COND_VALUE * .4 ) )
att:liquids.c:               else if( ch->pcdata->condition[COND_BLOODTHIRST] >= ( MAX_COND_VALUE * .4 )
att:liquids.c:                        && ch->pcdata->condition[COND_BLOODTHIRST] < ( MAX_COND_VALUE * .6 ) )
att:liquids.c:               else if( ch->pcdata->condition[COND_BLOODTHIRST] >= ( MAX_COND_VALUE * .6 )
att:liquids.c:                        && ch->pcdata->condition[COND_BLOODTHIRST] < ( MAX_COND_VALUE * .9 ) )
att:liquids.c:               else if( ch->pcdata->condition[COND_BLOODTHIRST] >= ( MAX_COND_VALUE * .9 )
att:liquids.c:                        && ch->pcdata->condition[COND_BLOODTHIRST] < MAX_COND_VALUE )
att:liquids.c:            else if( !IS_VAMPIRE( ch ) && ch->pcdata->condition[COND_BLOODTHIRST] >= MAX_COND_VALUE )
att:liquids.c:               ch->pcdata->condition[COND_BLOODTHIRST] = MAX_COND_VALUE;
att:liquids.c:            if( !IS_OBJ_STAT( source, ITEM_CLANCORPSE ) || !IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
att:magic.c:   if( ch->pcdata->learned[sn] > 0
att:magic.c:      if( ch->pcdata->learned[sn] > 0
att:magic.c:      if( !ch->pcdata->special_skills[sn] || !ch->pcdata->special_skills[sn]->name )
att:magic.c:      if( LOWER( name[0] ) == LOWER( ch->pcdata->special_skills[sn]->name[0] )
att:magic.c:          && !str_prefix( name, ch->pcdata->special_skills[sn]->name ) )
att:magic.c:         if( !IS_NPC( ch ) && ch->pcdata->nuisance &&
att:magic.c:             ch->pcdata->nuisance->flags > 5
att:magic.c:             && number_percent(  ) < ( ( ( ch->pcdata->nuisance->flags - 5 ) * 8 ) + ch->pcdata->nuisance->power * 6 ) )
att:magic.c:         if( !IS_NPC( ch ) && ch->fighting && ch->pcdata->nuisance &&
att:magic.c:             ch->pcdata->nuisance->flags > 5
att:magic.c:             && number_percent(  ) < ( ( ( ch->pcdata->nuisance->flags - 5 ) * 8 ) + 6 * ch->pcdata->nuisance->power ) )
att:magic.c:             && skill->guild != CLASS_NONE && ( !ch->pcdata->clan || skill->guild != ch->pcdata->clan->Class ) )
att:magic.c:            if( ch->pcdata->condition[COND_BLOODTHIRST] < blood )
att:magic.c:   if( !IS_NPC( ch ) && ( number_percent(  ) + skill->difficulty * 5 ) > ch->pcdata->learned[sn] )
att:magic.c:         if( !IS_NPC( vch ) && xIS_SET( vch->act, PLR_WIZINVIS ) && vch->pcdata->wizinvis >= LEVEL_IMMORTAL )
att:magic.c:   if( ( ( get_curr_cha( ch ) / 3 ) + 1 ) > ch->pcdata->charmies )
att:magic.c:      ch->pcdata->charmies++;
att:magic.c:         if( !IS_NPC( vch ) && xIS_SET( vch->act, PLR_WIZINVIS ) && vch->pcdata->wizinvis >= LEVEL_IMMORTAL )
att:magic.c:      if( !IS_NPC( vch ) && xIS_SET( vch->act, PLR_WIZINVIS ) && vch->pcdata->wizinvis >= LEVEL_IMMORTAL )
att:magic.c:   if( IS_PKILL( ch ) && ch->pcdata->condition[COND_BLOODTHIRST] > 22 )
att:magic.c:         if( !IS_IMMORTAL( ch ) && ch->pcdata->condition[COND_BLOODTHIRST] - ( pMobIndex->level / 3 ) < 0 )
att:magic.c:      if( !IS_NPC( vch ) && xIS_SET( vch->act, PLR_WIZINVIS ) && vch->pcdata->wizinvis >= LEVEL_IMMORTAL )
att:magic.c:      if( !IS_NPC( vch ) && xIS_SET( vch->act, PLR_WIZINVIS ) && vch->pcdata->wizinvis >= LEVEL_IMMORTAL )
att:mapout.c:   for( i = ch->pcdata->area->low_r_vnum; i <= ch->pcdata->area->hi_r_vnum; i++ )
att:mapout.c:         if( !( location = make_room( i, ch->pcdata->area ) ) )
att:mapout.c:         location->area = ch->pcdata->area;
att:mapout.c:   for( i = ch->pcdata->area->low_r_vnum; i <= ch->pcdata->area->hi_r_vnum; i++ )
att:mapout.c:      for( i = ch->pcdata->area->low_r_vnum; i <= ch->pcdata->area->hi_r_vnum; i++ )
att:misc.c:   if( IS_NPC( ch ) || ch->pcdata->condition[COND_FULL] > 5 )
att:misc.c:      if( !IS_NPC( ch ) && ch->pcdata->condition[COND_FULL] > 40 )
att:misc.c:   if( !IS_NPC( ch ) && ( !IS_PKILL( ch ) || ( IS_PKILL( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_HIGHGAG ) ) ) )
att:misc.c:               condition = ch->pcdata->condition[COND_FULL];
att:misc.c:               if( condition <= 1 && ch->pcdata->condition[COND_FULL] > 1 )
att:misc.c:               else if( ch->pcdata->condition[COND_FULL] > 40 )
att:misc.c:               condition = ch->pcdata->condition[COND_FULL];
att:misc.c:               if( condition <= 1 && ch->pcdata->condition[COND_FULL] > 1 )
att:misc.c:               else if( ch->pcdata->condition[COND_FULL] > 40 )
att:misc.c:   if( !IS_NPC( ch ) && ( ch->pcdata->condition[COND_FULL] >= 48 || ch->pcdata->condition[COND_THIRST] >= 48 ) )
att:misc.c:   if( !IS_NPC( ch ) && ch->pcdata->nuisance &&
att:misc.c:       ch->pcdata->nuisance->flags > 3
att:misc.c:       && ( ch->pcdata->condition[COND_FULL] >= ( 48 - ( 3 * ch->pcdata->nuisance->flags ) + ch->pcdata->nuisance->power )
att:misc.c:            || ch->pcdata->condition[COND_THIRST] >= ( 48 - ( ch->pcdata->nuisance->flags ) + ch->pcdata->nuisance->power ) ) )
att:misc.c:   if( !IS_NPC( ch ) && ( !IS_PKILL( ch ) || ( IS_PKILL( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_HIGHGAG ) ) ) )
att:misc.c:      if( !IS_NPC( ch ) && ch->pcdata->condition[COND_THIRST] > 43 )
att:mud.h:#define WAIT_STATE(ch, npulse) ((ch)->wait=(!IS_NPC(ch)&&ch->pcdata->nuisance&&\
att:mud.h:			      (ch->pcdata->nuisance->flags>4))?UMAX((ch)->wait,\
att:mud.h:               		      ch->pcdata->nuisance->power)): \
att:mud.h:#define IS_RETIRED(ch) (ch->pcdata && IS_SET(ch->pcdata->flags,PCFLAG_RETIRED))
att:mud.h:#define IS_GUEST(ch) (ch->pcdata && IS_SET(ch->pcdata->flags,PCFLAG_GUEST))
att:mud.h:#define NOT_AUTHED(ch)		(!IS_NPC(ch) && ch->pcdata->auth_state <= 3  \
att:mud.h:			      && IS_SET(ch->pcdata->flags, PCFLAG_UNAUTHED) )
att:mud.h:			      && ch->pcdata->auth_state == 1		     \
att:mud.h:			      && IS_SET(ch->pcdata->flags, PCFLAG_UNAUTHED) )
att:mud.h.backup:#define WAIT_STATE(ch, npulse) ((ch)->wait=(!IS_NPC(ch)&&ch->pcdata->nuisance&&\
att:mud.h.backup:			      (ch->pcdata->nuisance->flags>4))?UMAX((ch)->wait,\
att:mud.h.backup:               		      ch->pcdata->nuisance->power)): \
att:mud.h.backup:#define IS_RETIRED(ch) (ch->pcdata && IS_SET(ch->pcdata->flags,PCFLAG_RETIRED))
att:mud.h.backup:#define IS_GUEST(ch) (ch->pcdata && IS_SET(ch->pcdata->flags,PCFLAG_GUEST))
att:mud.h.backup:#define NOT_AUTHED(ch)		(!IS_NPC(ch) && ch->pcdata->auth_state <= 3  \
att:mud.h.backup:			      && IS_SET(ch->pcdata->flags, PCFLAG_UNAUTHED) )
att:mud.h.backup:			      && ch->pcdata->auth_state == 1		     \
att:mud.h.backup:			      && IS_SET(ch->pcdata->flags, PCFLAG_UNAUTHED) )
att:mud_comm.c:               drunk = vch->pcdata->condition[COND_DRUNK];
att:mud_comm.c:               vch->pcdata->condition[COND_DRUNK] = 0;
att:mud_comm.c:               vch->pcdata->condition[COND_DRUNK] = drunk;
att:mud_comm.c:   if( !ch->pcdata->nuisance )
att:mud_comm.c.backup:               drunk = vch->pcdata->condition[COND_DRUNK];
att:mud_comm.c.backup:               vch->pcdata->condition[COND_DRUNK] = 0;
att:mud_comm.c.backup:               vch->pcdata->condition[COND_DRUNK] = drunk;
att:mud_comm.c.backup:   if( !ch->pcdata->nuisance )
att:player.c:   pager_printf( ch, "\r\nWorth for %s%s.\r\n", ch->name, ch->pcdata->title );
att:player.c:   if( !ch->pcdata->deity )
att:player.c:   else if( ch->pcdata->favor > 2250 )
att:player.c:   else if( ch->pcdata->favor > 2000 )
att:player.c:   else if( ch->pcdata->favor > 1750 )
att:player.c:   else if( ch->pcdata->favor > 1500 )
att:player.c:   else if( ch->pcdata->favor > 1250 )
att:player.c:   else if( ch->pcdata->favor > 1000 )
att:player.c:   else if( ch->pcdata->favor > 750 )
att:player.c:   else if( ch->pcdata->favor > 250 )
att:player.c:   else if( ch->pcdata->favor > -250 )
att:player.c:   else if( ch->pcdata->favor > -750 )
att:player.c:   else if( ch->pcdata->favor > -1000 )
att:player.c:   else if( ch->pcdata->favor > -1250 )
att:player.c:   else if( ch->pcdata->favor > -1500 )
att:player.c:   else if( ch->pcdata->favor > -1750 )
att:player.c:   else if( ch->pcdata->favor > -2000 )
att:player.c:   else if( ch->pcdata->favor > -2250 )
att:player.c:                 ch->pcdata->quest_curr, ch->carry_weight, buf, num_punct( ch->gold ) );
att:player.c:   if( !ch->pcdata->deity )
att:player.c:   if( ch->pcdata->favor < ch->level * 2 )
att:player.c:   pager_printf( ch, "%s appears in a vision, revealing that your remains... ", ch->pcdata->deity->name );
att:player.c:      ch->pcdata->favor -= ch->level * 2;
att:player.c:   STRFREE( ch->pcdata->title );
att:player.c:   ch->pcdata->title = STRALLOC( buf );
att:player.c:   if( IS_SET( ch->pcdata->flags, PCFLAG_NOTITLE ) )
att:player.c:   if( IS_SET( ch->pcdata->flags, PCFLAG_NOCPOSE ) )
att:player.c:      if( !ch->pcdata->cpose )
att:player.c:         ch->pcdata->cpose = str_dup( "" );
att:player.c:      ch_printf( ch, "Your cpose is: %s\r\n", show_tilde( ch->pcdata->cpose ) );
att:player.c:      if( ch->pcdata->cpose )
att:player.c:         DISPOSE( ch->pcdata->cpose );
att:player.c:      ch->pcdata->cpose = str_dup( "" );
att:player.c:   if( ch->pcdata->cpose )
att:player.c:      DISPOSE( ch->pcdata->cpose );
att:player.c:   ch->pcdata->cpose = str_dup( buf );
att:player.c:   if( IS_SET( ch->pcdata->flags, PCFLAG_NODESC ) )
att:player.c:   if( IS_SET( ch->pcdata->flags, PCFLAG_NOBIO ) )
att:player.c:         start_editing( ch, ch->pcdata->bio );
att:player.c:         STRFREE( ch->pcdata->bio );
att:player.c:         ch->pcdata->bio = copy_buffer( ch );
att:player.c:                 ch->hit, ch->max_hit, ch->pcdata->condition[COND_BLOODTHIRST],
att:player.c:                ch->hit, ch->max_hit, ch->pcdata->condition[COND_BLOODTHIRST],
att:player.c:                 ch->hit, ch->max_hit, ch->pcdata->condition[COND_BLOODTHIRST],
att:player.c:                 ch->pcdata->condition[COND_BLOODTHIRST], 10 + ch->level, ch->move, ch->max_move, ch->exp );
att:player.c:                ch->pcdata->condition[COND_BLOODTHIRST], 10 + ch->level, ch->move, ch->max_move, ch->exp );
att:player.c:      ch_printf( ch, "%s\r\n", !str_cmp( ch->pcdata->fprompt, "" ) ? "(default prompt)" : ch->pcdata->fprompt );
att:player.c:   ch_printf( ch, "%s\r\n", !str_cmp( ch->pcdata->fprompt, "" ) ? "(default prompt)" : ch->pcdata->fprompt );
att:player.c:   if( ch->pcdata->fprompt )
att:player.c:      STRFREE( ch->pcdata->fprompt );
att:player.c:      ch->pcdata->fprompt = STRALLOC( "" );
att:player.c:      ch->pcdata->fprompt = STRALLOC( ch->pcdata->prompt );
att:player.c:      ch->pcdata->fprompt = STRALLOC( argument );
att:player.c:      ch_printf( ch, "%s\r\n", !str_cmp( ch->pcdata->prompt, "" ) ? "(default prompt)" : ch->pcdata->prompt );
att:player.c:   ch_printf( ch, "%s\r\n", !str_cmp( ch->pcdata->prompt, "" ) ? "(default prompt)" : ch->pcdata->prompt );
att:player.c:   if( ch->pcdata->prompt )
att:player.c:      STRFREE( ch->pcdata->prompt );
att:player.c:      ch->pcdata->prompt = STRALLOC( "" );
att:player.c:      ch->pcdata->prompt = STRALLOC( ch->pcdata->fprompt );
att:player.c:      ch->pcdata->prompt = STRALLOC( argument );
att:player.c:   if( !ch->pcdata->deity )
att:player.c:   else if( ch->pcdata->favor > 2250 )
att:player.c:   else if( ch->pcdata->favor > 2000 )
att:player.c:   else if( ch->pcdata->favor > 1750 )
att:player.c:   else if( ch->pcdata->favor > 1500 )
att:player.c:   else if( ch->pcdata->favor > 1250 )
att:player.c:   else if( ch->pcdata->favor > 1000 )
att:player.c:   else if( ch->pcdata->favor > 750 )
att:player.c:   else if( ch->pcdata->favor > 250 )
att:player.c:   else if( ch->pcdata->favor > -250 )
att:player.c:   else if( ch->pcdata->favor > -750 )
att:player.c:   else if( ch->pcdata->favor > -1000 )
att:player.c:   else if( ch->pcdata->favor > -1250 )
att:player.c:   else if( ch->pcdata->favor > -1500 )
att:player.c:   else if( ch->pcdata->favor > -1750 )
att:player.c:   else if( ch->pcdata->favor > -2000 )
att:player.c:   else if( ch->pcdata->favor > -2250 )
att:player.c:   ch_printf( ch, "%s considers you to be %s.\n\r", ch->pcdata->deity->name, buf );
att:polymorph.c:   if( morph->deity && ( !ch->pcdata->deity || !get_deity( morph->deity ) ) )
att:polymorph.c:         STRFREE( ch->pcdata->subprompt );
att:polymorph.c:      STRFREE( ch->pcdata->subprompt );
att:polymorph.c:      ch->pcdata->subprompt = STRALLOC( buf );
att:polymorph.c:      if( IS_NPC( ch ) || !ch->pcdata->deity || ch->pcdata->favor < morph->favourused )
att:polymorph.c:         ch->pcdata->favor -= morph->favourused;
att:renumber.c:      if( area->low_r_vnum < ch->pcdata->r_range_lo || area->hi_r_vnum > ch->pcdata->r_range_hi ||
att:renumber.c:          area->low_m_vnum < ch->pcdata->m_range_lo || area->hi_m_vnum > ch->pcdata->m_range_hi ||
att:renumber.c:          area->low_o_vnum < ch->pcdata->o_range_lo || area->hi_o_vnum > ch->pcdata->o_range_hi )
att:renumber.c:      if( r_area->low_room < ch->pcdata->r_range_lo || r_area->hi_room > ch->pcdata->r_range_hi ||
att:renumber.c:          r_area->low_obj < ch->pcdata->o_range_lo || r_area->hi_obj > ch->pcdata->o_range_hi ||
att:renumber.c:          r_area->low_mob < ch->pcdata->m_range_lo || r_area->hi_mob > ch->pcdata->m_range_hi )
att:reset.c:   if( IS_NPC( ch ) || get_trust( ch ) < LEVEL_SAVIOR || !ch->pcdata->area )
att:reset.c:   if( ch->in_room->area != ch->pcdata->area && get_trust( ch ) < LEVEL_GREATER )
att:reset.c:   if( IS_NPC( ch ) || get_trust( ch ) < LEVEL_SAVIOR || !ch->pcdata->area )
att:reset.c:   pArea = ch->pcdata->area;
att:save.c:   ch->pcdata->day = ( number_range( 1, sysdata.dayspermonth ) - 1 );   /* Assign random day of birth */
att:save.c:   ch->pcdata->month = ( number_range( 1, sysdata.monthsperyear ) - 1 );   /* Assign random month of birth */
att:save.c:   ch->pcdata->year = time_info.year - age;  /* Assign birth year based on calculations above */
att:save.c:   snprintf( strsave, MAX_INPUT_LENGTH, "%s%c/%s", PLAYER_DIR, tolower( ch->pcdata->filename[0] ),
att:save.c:             capitalize( ch->pcdata->filename ) );
att:save.c:      snprintf( strback, MAX_INPUT_LENGTH, "%s%c/%s", BACKUP_DIR, tolower( ch->pcdata->filename[0] ),
att:save.c:                capitalize( ch->pcdata->filename ) );
att:save.c:   if( ch->level >= LEVEL_IMMORTAL || IS_SET( ch->pcdata->flags, PCFLAG_RETIRED ) )
att:save.c:      snprintf( strback, MAX_INPUT_LENGTH, "%s%s", GOD_DIR, capitalize( ch->pcdata->filename ) );
att:save.c:         fprintf( fp, "Pcflags      %d\n", ch->pcdata->flags );
att:save.c:         if( ch->pcdata->r_range_lo && ch->pcdata->r_range_hi )
att:save.c:            fprintf( fp, "RoomRange    %d %d\n", ch->pcdata->r_range_lo, ch->pcdata->r_range_hi );
att:save.c:         if( ch->pcdata->o_range_lo && ch->pcdata->o_range_hi )
att:save.c:            fprintf( fp, "ObjRange     %d %d\n", ch->pcdata->o_range_lo, ch->pcdata->o_range_hi );
att:save.c:         if( ch->pcdata->m_range_lo && ch->pcdata->m_range_hi )
att:save.c:            fprintf( fp, "MobRange     %d %d\n", ch->pcdata->m_range_lo, ch->pcdata->m_range_hi );
att:save.c:         fwrite_obj( ch, ch->last_carrying, fp, 0, OS_CARRY, ch->pcdata->hotboot );
att:save.c:      if( sysdata.save_pets && ch->pcdata->pet )
att:save.c:         fwrite_mobile( fp, ch->pcdata->pet );
att:save.c:            ch->pcdata->age_bonus, ch->pcdata->day, ch->pcdata->month, ch->pcdata->year );
att:save.c:   fprintf( fp, "Str          %d\n", ch->pcdata->str );
att:save.c:   fprintf( fp, "Intel          %d\n", ch->pcdata->intel );
att:save.c:   fprintf( fp, "Dex         %d\n", ch->pcdata->dex );
att:save.c:   fprintf( fp, "Lck          %d\n", ch->pcdata->lck );
att:save.c:   fprintf( fp, "Att          %d\n", ch->pcdata->att );
att:save.c:   fprintf( fp, "Def          %d\n", ch->pcdata->def );
att:save.c:   fprintf( fp, "Matt          %d\n", ch->pcdata->matt );
att:save.c:   fprintf( fp, "Mdef          %d\n", ch->pcdata->mdef );
att:save.c:   fprintf( fp, "strplus          %d\n", ch->pcdata->strplus );
att:save.c:   fprintf( fp, "intplus          %d\n", ch->pcdata->intplus );
att:save.c:   fprintf( fp, "dexplus          %d\n", ch->pcdata->dexplus );
att:save.c:   fprintf( fp, "lckplus          %d\n", ch->pcdata->lckplus );
att:save.c:   fprintf( fp, "attplus          %d\n", ch->pcdata->attplus );
att:save.c:   fprintf( fp, "defplus          %d\n", ch->pcdata->defplus );
att:save.c:   fprintf( fp, "mattplus          %d\n", ch->pcdata->mattplus );
att:save.c:   fprintf( fp, "mdefplus          %d\n", ch->pcdata->mdefplus );
att:save.c:   fprintf( fp, "mlevel          %d\n", ch->pcdata->mlevel );
att:save.c:   fprintf( fp, "deflevel          %d\n", ch->pcdata->deflevel );
att:save.c:   fprintf( fp, "attlevel          %d\n", ch->pcdata->attlevel );
att:save.c:   fprintf( fp, "Favor        %d\n", ch->pcdata->favor );
att:save.c:   fprintf( fp, "Balance      %d\n", ch->pcdata->balance );
att:save.c:   fprintf( fp, "Glory        %d\n", ch->pcdata->quest_curr );
att:save.c:   fprintf( fp, "MGlory       %d\n", ch->pcdata->quest_accum );
att:save.c:   fprintf( fp, "Ap        %d\n", ch->pcdata->ap );   
att:save.c:   fprintf( fp, "Tier        %d\n", ch->pcdata->tier );   
att:save.c:   if( ch->pcdata && ch->pcdata->outcast_time )
att:save.c:      fprintf( fp, "Outcast_time %ld\n", ch->pcdata->outcast_time );
att:save.c:   if( ch->pcdata && ch->pcdata->nuisance )
att:save.c:      fprintf( fp, "NuisanceNew %ld %ld %d %d\n", ch->pcdata->nuisance->set_time,
att:save.c:               ch->pcdata->nuisance->max_time, ch->pcdata->nuisance->flags, ch->pcdata->nuisance->power );
att:save.c:   fprintf( fp, "Password     %s~\n", ch->pcdata->pwd );
att:save.c:   if( ch->pcdata->rank && ch->pcdata->rank[0] != '\0' )
att:save.c:      fprintf( fp, "Rank         %s~\n", ch->pcdata->rank );
att:save.c:   if( ch->pcdata->bestowments && ch->pcdata->bestowments[0] != '\0' )
att:save.c:      fprintf( fp, "Bestowments  %s~\n", ch->pcdata->bestowments );
att:save.c:   fprintf( fp, "Title        %s~\n", ch->pcdata->title );
att:save.c:   fprintf( fp, "Cpose        %s~\n", ch->pcdata->cpose );
att:save.c:   fprintf( fp, "Hometown        %s~\n", ch->pcdata->hometown );
att:save.c:   fprintf( fp, "Customclass        %s~\n", ch->pcdata->customclass );
att:save.c:   if( ch->pcdata->homepage && ch->pcdata->homepage[0] != '\0' )
att:save.c:      fprintf( fp, "Homepage     %s~\n", ch->pcdata->homepage );
att:save.c:   if( ch->pcdata->bio && ch->pcdata->bio[0] != '\0' )
att:save.c:      fprintf( fp, "Bio          %s~\n", ch->pcdata->bio );
att:save.c:   if( ch->pcdata->authed_by && ch->pcdata->authed_by[0] != '\0' )
att:save.c:      fprintf( fp, "AuthedBy     %s~\n", ch->pcdata->authed_by );
att:save.c:   if( ch->pcdata->min_snoop )
att:save.c:      fprintf( fp, "Minsnoop     %d\n", ch->pcdata->min_snoop );
att:save.c:   if( ch->pcdata->prompt && *ch->pcdata->prompt )
att:save.c:      fprintf( fp, "Prompt       %s~\n", ch->pcdata->prompt );
att:save.c:   if( ch->pcdata->fprompt && *ch->pcdata->fprompt )
att:save.c:      fprintf( fp, "FPrompt	     %s~\n", ch->pcdata->fprompt );
att:save.c:   if( ch->pcdata->pagerlen != 24 )
att:save.c:      fprintf( fp, "Pagerlen     %d\n", ch->pcdata->pagerlen );
att:save.c:      for( temp = ch->pcdata->first_ignored; temp; temp = temp->next )
att:save.c:      if( ch->pcdata->bamfin && ch->pcdata->bamfin[0] != '\0' )
att:save.c:         fprintf( fp, "Bamfin       %s~\n", ch->pcdata->bamfin );
att:save.c:      if( ch->pcdata->bamfout && ch->pcdata->bamfout[0] != '\0' )
att:save.c:         fprintf( fp, "Bamfout      %s~\n", ch->pcdata->bamfout );
att:save.c:      if( ch->pcdata && ch->pcdata->restore_time )
att:save.c:         fprintf( fp, "Restore_time %ld\n", ch->pcdata->restore_time );
att:save.c:      fprintf( fp, "WizInvis     %d\n", ch->pcdata->wizinvis );
att:save.c:      if( ch->pcdata->r_range_lo && ch->pcdata->r_range_hi )
att:save.c:         fprintf( fp, "RoomRange    %d %d\n", ch->pcdata->r_range_lo, ch->pcdata->r_range_hi );
att:save.c:      if( ch->pcdata->o_range_lo && ch->pcdata->o_range_hi )
att:save.c:         fprintf( fp, "ObjRange     %d %d\n", ch->pcdata->o_range_lo, ch->pcdata->o_range_hi );
att:save.c:      if( ch->pcdata->m_range_lo && ch->pcdata->m_range_hi )
att:save.c:         fprintf( fp, "MobRange     %d %d\n", ch->pcdata->m_range_lo, ch->pcdata->m_range_hi );
att:save.c:   if( ch->pcdata->council )
att:save.c:      fprintf( fp, "Council      %s~\n", ch->pcdata->council_name );
att:save.c:   if( ch->pcdata->deity_name && ch->pcdata->deity_name[0] != '\0' )
att:save.c:      fprintf( fp, "Deity	     %s~\n", ch->pcdata->deity_name );
att:save.c:   if( ch->pcdata->clan_name && ch->pcdata->clan_name[0] != '\0' )
att:save.c:      fprintf( fp, "Clan         %s~\n", ch->pcdata->clan_name );
att:save.c:   fprintf( fp, "Flags        %d\n", ch->pcdata->flags );
att:save.c:   if( ch->pcdata->release_date )
att:save.c:      fprintf( fp, "Helled       %d %s~\n", ( int )ch->pcdata->release_date, ch->pcdata->helled_by );
att:save.c:   fprintf( fp, "PKills       %d\n", ch->pcdata->pkills );
att:save.c:   fprintf( fp, "PDeaths      %d\n", ch->pcdata->pdeaths );
att:save.c:   fprintf( fp, "MKills       %d\n", ch->pcdata->mkills );
att:save.c:   fprintf( fp, "MDeaths      %d\n", ch->pcdata->mdeaths );
att:save.c:   fprintf( fp, "IllegalPK    %d\n", ch->pcdata->illegal_pk );
att:save.c:   fprintf( fp, "Timezone     %d\n", ch->pcdata->timezone );
att:save.c:            ch->pcdata->condition[0], ch->pcdata->condition[1], ch->pcdata->condition[2], ch->pcdata->condition[3] );
att:save.c:   if( ch->pcdata->recent_site )
att:save.c:      fprintf( fp, "Site         %s\n", ch->pcdata->recent_site );
att:save.c:      if( skill_table[sn]->name && ch->pcdata->learned[sn] > 0 )
att:save.c:               fprintf( fp, "Skill        %d '%s'\n", ch->pcdata->learned[sn], skill_table[sn]->name );
att:save.c:               fprintf( fp, "Ability      %d '%s'\n", ch->pcdata->learned[sn], skill_table[sn]->name );
att:save.c:               fprintf( fp, "Spell        %d '%s'\n", ch->pcdata->learned[sn], skill_table[sn]->name );
att:save.c:               fprintf( fp, "Weapon       %d '%s'\n", ch->pcdata->learned[sn], skill_table[sn]->name );
att:save.c:               fprintf( fp, "Tongue       %d '%s'\n", ch->pcdata->learned[sn], skill_table[sn]->name );
att:save.c:      if( ch->pcdata->killed[sn].vnum == 0 )
att:save.c:      fprintf( fp, "Killed       %d %d\n", ch->pcdata->killed[sn].vnum, ch->pcdata->killed[sn].count );
att:save.c:   ch->pcdata->filename = STRALLOC( name );
att:save.c:      ch->pcdata->recent_site = STRALLOC( d->host );
att:save.c:   ch->pcdata->condition[COND_THIRST] = 48;
att:save.c:   ch->pcdata->condition[COND_FULL] = 48;
att:save.c:   ch->pcdata->condition[COND_BLOODTHIRST] = 10;
att:save.c:   ch->pcdata->nuisance = NULL;
att:save.c:   ch->pcdata->wizinvis = 0;
att:save.c:   ch->pcdata->balance = 0;
att:save.c:   ch->pcdata->charmies = 0;
att:save.c:      ch->pcdata->learned[i] = 0;
att:save.c:   ch->pcdata->release_date = 0;
att:save.c:   ch->pcdata->helled_by = NULL;
att:save.c:   ch->pcdata->pagerlen = 24;
att:save.c:   ch->pcdata->first_ignored = NULL;   /* Ignore list */
att:save.c:   ch->pcdata->last_ignored = NULL;
att:save.c:   ch->pcdata->tell_history = NULL; /* imm only lasttell cmnd */
att:save.c:   ch->pcdata->lt_index = 0;  /* last tell index */
att:save.c:   ch->pcdata->hotboot = FALSE;  /* Never changed except when PC is saved during hotboot save */
att:save.c:                          preload ? "Preloading" : "Loading", ch->pcdata->filename, ( int )fst.st_size / 1024 );
att:save.c:               ch->pcdata->pet = mob;
att:save.c:      ch->pcdata->clan_name = STRALLOC( "" );
att:save.c:      ch->pcdata->clan = NULL;
att:save.c:      ch->pcdata->council_name = STRALLOC( "" );
att:save.c:      ch->pcdata->council = NULL;
att:save.c:      ch->pcdata->deity_name = STRALLOC( "" );
att:save.c:      ch->pcdata->deity = NULL;
att:save.c:      ch->pcdata->pet = NULL;
att:save.c:      ch->pcdata->pwd = str_dup( "" );
att:save.c:      ch->pcdata->bamfin = str_dup( "" );
att:save.c:      ch->pcdata->bamfout = str_dup( "" );
att:save.c:      ch->pcdata->rank = str_dup( "" );
att:save.c:      ch->pcdata->bestowments = str_dup( "" );
att:save.c:      ch->pcdata->title = STRALLOC( "" );
att:save.c:      ch->pcdata->customclass = STRALLOC( "" );
att:save.c:      ch->pcdata->homepage = str_dup( "" );
att:save.c:      ch->pcdata->bio = STRALLOC( "" );
att:save.c:      ch->pcdata->authed_by = STRALLOC( "" );
att:save.c:      ch->pcdata->prompt = STRALLOC( "" );
att:save.c:      ch->pcdata->fprompt = STRALLOC( "" );
att:save.c:      ch->pcdata->r_range_lo = 0;
att:save.c:      ch->pcdata->r_range_hi = 0;
att:save.c:      ch->pcdata->m_range_lo = 0;
att:save.c:      ch->pcdata->m_range_hi = 0;
att:save.c:      ch->pcdata->o_range_lo = 0;
att:save.c:      ch->pcdata->o_range_hi = 0;
att:save.c:      ch->pcdata->wizinvis = 0;
att:save.c:      ch->pcdata->timezone = -1;
att:save.c:      if( !ch->pcdata->clan_name )
att:save.c:         ch->pcdata->clan_name = STRALLOC( "" );
att:save.c:         ch->pcdata->clan = NULL;
att:save.c:      if( !ch->pcdata->council_name )
att:save.c:         ch->pcdata->council_name = STRALLOC( "" );
att:save.c:         ch->pcdata->council = NULL;
att:save.c:      if( !ch->pcdata->deity_name )
att:save.c:         ch->pcdata->deity_name = STRALLOC( "" );
att:save.c:         ch->pcdata->deity = NULL;
att:save.c:      if( !ch->pcdata->bio )
att:save.c:         ch->pcdata->bio = STRALLOC( "" );
att:save.c:      if( !ch->pcdata->authed_by )
att:save.c:         ch->pcdata->authed_by = STRALLOC( "" );
att:save.c:         if( ch->pcdata->wizinvis < 2 )
att:save.c:            ch->pcdata->wizinvis = ch->level;
att:save.c:                     KEY( "Att", ch->pcdata->att, fread_number( fp ) );
att:save.c:                     KEY( "Attplus", ch->pcdata->attplus, fread_number( fp ) );
att:save.c:                     KEY( "Attlevel", ch->pcdata->attlevel, fread_number( fp ) );
att:save.c:                     ch->pcdata->learned[sn] = value;
att:save.c:                           ch->pcdata->learned[sn] = 0;
att:save.c:                  ch->pcdata->age_bonus = x1;
att:save.c:                  ch->pcdata->day = x2;
att:save.c:                  ch->pcdata->month = x3;
att:save.c:                  ch->pcdata->year = x4;
att:save.c:            KEY( "Ap", ch->pcdata->ap, fread_number( fp ) );
att:save.c:            KEY( "AuthedBy", ch->pcdata->authed_by, fread_string( fp ) );
att:save.c:            KEY( "Balance", ch->pcdata->balance, fread_number( fp ) );
att:save.c:            KEY( "Bamfin", ch->pcdata->bamfin, fread_string_nohash( fp ) );
att:save.c:            KEY( "Bamfout", ch->pcdata->bamfout, fread_string_nohash( fp ) );
att:save.c:            KEY( "Bestowments", ch->pcdata->bestowments, fread_string_nohash( fp ) );
att:save.c:            KEY( "Bio", ch->pcdata->bio, fread_string( fp ) );
att:save.c:               ch->pcdata->clan_name = fread_string( fp );
att:save.c:                   && ch->pcdata->clan_name[0] != '\0' && ( ch->pcdata->clan = get_clan( ch->pcdata->clan_name ) ) == NULL )
att:save.c:                     ch->pcdata->clan_name );
att:save.c:                  STRFREE( ch->pcdata->clan_name );
att:save.c:                  ch->pcdata->clan_name = STRALLOC( "" );
att:save.c:            KEY( "Customclass", ch->pcdata->customclass, fread_string( fp ) );
att:save.c:               ch->pcdata->condition[0] = x1;
att:save.c:               ch->pcdata->condition[1] = x2;
att:save.c:               ch->pcdata->condition[2] = x3;
att:save.c:               ch->pcdata->condition[3] = x4;
att:save.c:               ch->pcdata->council_name = fread_string( fp );
att:save.c:                   && ch->pcdata->council_name[0] != '\0'
att:save.c:                   && ( ch->pcdata->council = get_council( ch->pcdata->council_name ) ) == NULL )
att:save.c:                     ch->pcdata->council_name );
att:save.c:                  STRFREE( ch->pcdata->council_name );
att:save.c:                  ch->pcdata->council_name = STRALLOC( "" );
att:save.c:               ch->pcdata->cpose = fread_string( fp );
att:save.c:               if( isalpha( ch->pcdata->cpose[0] ) || isdigit( ch->pcdata->cpose[0] ) )
att:save.c:                  snprintf( buf, MAX_STRING_LENGTH, " %s", ch->pcdata->cpose );
att:save.c:                  if( ch->pcdata->cpose )
att:save.c:                     STRFREE( ch->pcdata->cpose );
att:save.c:                  ch->pcdata->cpose = STRALLOC( buf );
att:save.c:                     KEY( "Dex", ch->pcdata->dex, fread_number( fp ) );
att:save.c:                     KEY( "Def", ch->pcdata->def, fread_number( fp ) );
att:save.c:                     KEY( "Dexplus", ch->pcdata->dexplus, fread_number( fp ) );
att:save.c:                     KEY( "Defplus", ch->pcdata->defplus, fread_number( fp ) );
att:save.c:                     KEY( "Deflevel", ch->pcdata->deflevel, fread_number( fp ) );
att:save.c:               ch->pcdata->deity_name = fread_string( fp );
att:save.c:                   && ch->pcdata->deity_name[0] != '\0'
att:save.c:                   && ( ch->pcdata->deity = get_deity( ch->pcdata->deity_name ) ) == NULL )
att:save.c:                  snprintf( buf, MAX_STRING_LENGTH, "&R\r\nYour deity, %s, has met its demise!\r\n", ch->pcdata->deity_name );
att:save.c:                  STRFREE( ch->pcdata->deity_name );
att:save.c:                  ch->pcdata->deity_name = STRALLOC( "" );
att:save.c:                  ch->pcdata->favor = 0;
att:save.c:            KEY( "Favor", ch->pcdata->favor, fread_number( fp ) );
att:save.c:            KEY( "Flags", ch->pcdata->flags, fread_number( fp ) );
att:save.c:            KEY( "FPrompt", ch->pcdata->fprompt, fread_string( fp ) );
att:save.c:            KEY( "Glory", ch->pcdata->quest_curr, fread_number( fp ) );
att:save.c:               ch->pcdata->clan_name = fread_string( fp );
att:save.c:                   && ch->pcdata->clan_name[0] != '\0' && ( ch->pcdata->clan = get_clan( ch->pcdata->clan_name ) ) == NULL )
att:save.c:                     ch->pcdata->clan_name );
att:save.c:                  STRFREE( ch->pcdata->clan_name );
att:save.c:                  ch->pcdata->clan_name = STRALLOC( "" );
att:save.c:               ch->pcdata->release_date = fread_number( fp );
att:save.c:               ch->pcdata->helled_by = fread_string( fp );
att:save.c:            KEY( "Homepage", ch->pcdata->homepage, fread_string_nohash( fp ) );
att:save.c:               ch->pcdata->hometown = fread_string( fp );
att:save.c:               if( isalpha( ch->pcdata->hometown[0] ) || isdigit( ch->pcdata->hometown[0] ) )
att:save.c:                  snprintf( buf, MAX_STRING_LENGTH, " %s", ch->pcdata->hometown );
att:save.c:                  if( ch->pcdata->hometown )
att:save.c:                     STRFREE( ch->pcdata->hometown );
att:save.c:                  ch->pcdata->hometown = STRALLOC( buf );
att:save.c:               for( ign = 0, inode = ch->pcdata->first_ignored; inode; inode = inode->next )
att:save.c:                  LINK( inode, ch->pcdata->first_ignored, ch->pcdata->last_ignored, next, prev );
att:save.c:            KEY( "IllegalPK", ch->pcdata->illegal_pk, fread_number( fp ) );
att:save.c:                   KEY( "Intel", ch->pcdata->intel, fread_number( fp ) );
att:save.c:                   KEY( "Intplus", ch->pcdata->intplus, fread_number( fp ) );
att:save.c:                  ch->pcdata->killed[killcnt].vnum = fread_number( fp );
att:save.c:                  ch->pcdata->killed[killcnt++].count = fread_number( fp );
att:save.c:                     KEY( "Lck", ch->pcdata->lck, fread_number( fp ) );
att:save.c:                     KEY( "Lckplus", ch->pcdata->lckplus, fread_number( fp ) );
att:save.c:                   KEY( "Matt", ch->pcdata->matt, fread_number( fp ) );
att:save.c:                   KEY( "Mdef", ch->pcdata->mdef, fread_number( fp ) );
att:save.c:                   KEY( "Mattplus", ch->pcdata->mattplus, fread_number( fp ) );
att:save.c:                   KEY( "Mdefplus", ch->pcdata->mdefplus, fread_number( fp ) );
att:save.c:                   KEY( "Mlevel", ch->pcdata->mlevel, fread_number( fp ) );
att:save.c:            KEY( "MDeaths", ch->pcdata->mdeaths, fread_number( fp ) );
att:save.c:            KEY( "MGlory", ch->pcdata->quest_accum, fread_number( fp ) );
att:save.c:            KEY( "Minsnoop", ch->pcdata->min_snoop, fread_number( fp ) );
att:save.c:            KEY( "MKills", ch->pcdata->mkills, fread_number( fp ) );
att:save.c:               ch->pcdata->m_range_lo = fread_number( fp );
att:save.c:               ch->pcdata->m_range_hi = fread_number( fp );
att:save.c:               CREATE( ch->pcdata->nuisance, NUISANCE_DATA, 1 );
att:save.c:               ch->pcdata->nuisance->set_time = fread_number( fp );
att:save.c:               ch->pcdata->nuisance->max_time = fread_number( fp );
att:save.c:               ch->pcdata->nuisance->flags = fread_number( fp );
att:save.c:               ch->pcdata->nuisance->power = 1;
att:save.c:               CREATE( ch->pcdata->nuisance, NUISANCE_DATA, 1 );
att:save.c:               ch->pcdata->nuisance->set_time = fread_number( fp );
att:save.c:               ch->pcdata->nuisance->max_time = fread_number( fp );
att:save.c:               ch->pcdata->nuisance->flags = fread_number( fp );
att:save.c:               ch->pcdata->nuisance->power = fread_number( fp );
att:save.c:            KEY( "Outcast_time", ch->pcdata->outcast_time, fread_number( fp ) );
att:save.c:               ch->pcdata->o_range_lo = fread_number( fp );
att:save.c:               ch->pcdata->o_range_hi = fread_number( fp );
att:save.c:            KEY( "Pagerlen", ch->pcdata->pagerlen, fread_number( fp ) );
att:save.c:            KEY( "Password", ch->pcdata->pwd, fread_string_nohash( fp ) );
att:save.c:            KEY( "PDeaths", ch->pcdata->pdeaths, fread_number( fp ) );
att:save.c:            KEY( "PKills", ch->pcdata->pkills, fread_number( fp ) );
att:save.c:            KEY( "Prompt", ch->pcdata->prompt, fread_string( fp ) );
att:save.c:            KEY( "Rank", ch->pcdata->rank, fread_string_nohash( fp ) );
att:save.c:            KEY( "Restore_time", ch->pcdata->restore_time, fread_number( fp ) );
att:save.c:               ch->pcdata->r_range_lo = fread_number( fp );
att:save.c:               ch->pcdata->r_range_hi = fread_number( fp );
att:save.c:                   KEY( "Str", ch->pcdata->str, fread_number( fp ) );
att:save.c:                   KEY( "Strplus", ch->pcdata->strplus, fread_number( fp ) );
att:save.c:                  ch->pcdata->prev_site = STRALLOC( fread_word( fp ) );
att:save.c:                  ch_printf( ch, "Last connected from: %s\r\n", ch->pcdata->prev_site );
att:save.c:                     ch->pcdata->learned[sn] = value;
att:save.c:                           ch->pcdata->learned[sn] = 0;
att:save.c:                     ch->pcdata->learned[sn] = value;
att:save.c:                           ch->pcdata->learned[sn] = 0;
att:save.c:               if( !ch->pcdata->pwd )
att:save.c:                  ch->pcdata->pwd = str_dup( "" );
att:save.c:               if( !ch->pcdata->bamfin )
att:save.c:                  ch->pcdata->bamfin = str_dup( "" );
att:save.c:               if( !ch->pcdata->bamfout )
att:save.c:                  ch->pcdata->bamfout = str_dup( "" );
att:save.c:               if( !ch->pcdata->bio )
att:save.c:                  ch->pcdata->bio = STRALLOC( "" );
att:save.c:               if( !ch->pcdata->rank )
att:save.c:                  ch->pcdata->rank = str_dup( "" );
att:save.c:               if( !ch->pcdata->bestowments )
att:save.c:                  ch->pcdata->bestowments = str_dup( "" );
att:save.c:               if( !ch->pcdata->title )
att:save.c:                  ch->pcdata->title = STRALLOC( "" );
att:save.c:               if( !ch->pcdata->customclass )
att:save.c:                  ch->pcdata->customclass = STRALLOC( "" );
att:save.c:               if( !ch->pcdata->cpose )
att:save.c:                  ch->pcdata->cpose = STRALLOC( "" );
att:save.c:               if( !ch->pcdata->hometown )
att:save.c:                  ch->pcdata->hometown = STRALLOC( "" );
att:save.c:               if( !ch->pcdata->homepage )
att:save.c:                  ch->pcdata->homepage = str_dup( "" );
att:save.c:               if( !ch->pcdata->authed_by )
att:save.c:                  ch->pcdata->authed_by = STRALLOC( "" );
att:save.c:               if( !ch->pcdata->prompt )
att:save.c:                  ch->pcdata->prompt = STRALLOC( "" );
att:save.c:               if( !ch->pcdata->fprompt )
att:save.c:                  ch->pcdata->fprompt = STRALLOC( "" );
att:save.c:                  ch->pcdata->killed[killcnt].vnum = 0;
att:save.c:                  CREATE( ch->pcdata->tell_history, const char *, 26 );
att:save.c:                     ch->pcdata->tell_history[i] = NULL;
att:save.c:               if( !ch->pcdata->prompt )
att:save.c:                  ch->pcdata->prompt = STRALLOC( "" );
att:save.c:               if( ch->pcdata->clan )
att:save.c:                     KEY( "Tier", ch->pcdata->tier, fread_number( fp ) );
att:save.c:                     ch->pcdata->learned[sn] = value;
att:save.c:                           ch->pcdata->learned[sn] = 0;
att:save.c:            KEY( "Timezone", ch->pcdata->timezone, fread_number( fp )); 
att:save.c:               ch->pcdata->title = fread_string( fp );
att:save.c:               if( isalpha( ch->pcdata->title[0] ) || isdigit( ch->pcdata->title[0] ) )
att:save.c:                  snprintf( buf, MAX_STRING_LENGTH, " %s", ch->pcdata->title );
att:save.c:                  if( ch->pcdata->title )
att:save.c:                     STRFREE( ch->pcdata->title );
att:save.c:                  ch->pcdata->title = STRALLOC( buf );
att:save.c:                     ch->pcdata->learned[sn] = value;
att:save.c:                           ch->pcdata->learned[sn] = 0;
att:save.c:            KEY( "WizInvis", ch->pcdata->wizinvis, fread_number( fp ) );
att:save.c:   if( IS_NPC( ch ) || !ch->pcdata->pet )
att:save.c:   mob = ch->pcdata->pet;
att:skills.c:   if( ch->pcdata->clan && ch->pcdata->clan == vch->pcdata->clan )
att:skills.c:         if( ch->pcdata->condition[COND_BLOODTHIRST] < blood )
att:skills.c:         if( ch->pcdata->condition[COND_BLOODTHIRST] < blood )
att:skills.c:   if( IS_NPC( ch ) || ch->pcdata->learned[sn] <= 0 )
att:skills.c:   if( ch->pcdata->learned[sn] < adept )
att:skills.c:      schance = ch->pcdata->learned[sn] + ( 5 * skill_table[sn]->difficulty );
att:skills.c:      ch->pcdata->learned[sn] = UMIN( adept, ch->pcdata->learned[sn] + learn );
att:skills.c:      if( ch->pcdata->learned[sn] == adept ) /* fully learned! */
att:skills.c:   if( IS_NPC( ch ) || ch->pcdata->learned[sn] <= 0 )
att:skills.c:   if( ch->pcdata->learned[sn] < adept )
att:skills.c:      schance = ch->pcdata->learned[sn] + ( 5 * skill_table[sn]->difficulty );
att:skills.c:      ch->pcdata->learned[sn] = UMIN( adept, ch->pcdata->learned[sn] + learn );
att:skills.c:      if( ch->pcdata->learned[sn] == adept ) /* fully learned! */
att:skills.c:   if( IS_NPC( ch ) || ch->pcdata->learned[sn] <= 0 )
att:skills.c:   schance = ch->pcdata->learned[sn] + ( 5 * skill_table[sn]->difficulty );
att:skills.c:   if( ch->pcdata->learned[sn] < ( adept - 1 ) )
att:skills.c:      ch->pcdata->learned[sn] = UMIN( adept, ch->pcdata->learned[sn] + 1 );
att:skills.c:	    (IS_NPC(ch) ? 80 : ch->pcdata->learned[gsn_dig]) )
att:skills.c:   if( ch->pcdata->condition[COND_BLOODTHIRST] < 10 )
att:skills.c:          && ch->fighting && ch->pcdata->condition[COND_BLOODTHIRST] < ( 10 + ch->level ) )
att:skills.c:                               ( 10 + ch->level ) - ch->pcdata->condition[COND_BLOODTHIRST] ) );
att:skills.c:         if( ch->pcdata->condition[COND_FULL] <= 37 )
att:skills.c:          && ch->fighting && ch->pcdata->condition[COND_BLOODTHIRST] < ( 10 + ch->level ) )
att:skills.c:   if( IS_PKILL( ch ) && ch->pcdata->condition[COND_BLOODTHIRST] > 22 )
att:skills.c:   if( !IS_NPC( ch ) && ch->pcdata->clan )
att:skills.c:      location = get_room_index( ch->pcdata->clan->recall );
att:skills.c:   if( !IS_NPC( ch ) && !location && ch->level >= 5 && IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
att:skills.c:   if( !IS_NPC( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_GAG ) )   /* SB */
att:skills.c:   if( !IS_NPC( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_GAG ) )
att:skills.c:   if( !IS_NPC( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_GAG ) )
att:skills.c:   if( !IS_NPC( ch ) && ( ( get_curr_dex( ch ) < 17 ) || ch->pcdata->condition[COND_DRUNK] > 0 ) )
att:skills.c:            || !IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
att:skills.c:   if( skill_table[gsn]->guild == 99 && !IS_NPC( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
att:track.c:   if( !IS_NPC( ch ) && ch->pcdata->learned[gsn_track] <= 0 )
att:update.c:   add_hp = UMAX( 1, add_hp ) + ( ch->pcdata->lck * .3 );
att:update.c:   add_mana = UMAX( 0, add_mana ) + ( (ch->pcdata->lck * .4) + ch->pcdata->intel );
att:update.c:   add_move = UMAX( 10, add_move ) + (( ch->pcdata->lck * .5 ) + ch->pcdata->dex );
att:update.c:   ch->pcdata->str += 1;
att:update.c:   ch->pcdata->intel += 1;
att:update.c:   ch->pcdata->dex += 1;
att:update.c:   ch->pcdata->lck += 1;
att:update.c:   ch->pcdata->def += 1;
att:update.c:   ch->pcdata->mdef += 1;
att:update.c:   ch->pcdata->att += 1;
att:update.c:         if( ch->pcdata->condition[COND_BLOODTHIRST] <= 1 )
att:update.c:         else if( ch->pcdata->condition[COND_BLOODTHIRST] >= ( 8 + ch->level ) )
att:update.c:      if( ch->pcdata->condition[COND_FULL] == 0 )
att:update.c:      if( ch->pcdata->condition[COND_THIRST] == 0 )
att:update.c:      if( ch->pcdata->condition[COND_FULL] == 0 )
att:update.c:      if( ch->pcdata->condition[COND_THIRST] == 0 )
att:update.c:         if( ch->pcdata->condition[COND_BLOODTHIRST] <= 1 )
att:update.c:         else if( ch->pcdata->condition[COND_BLOODTHIRST] >= ( 8 + ch->level ) )
att:update.c:      if( ch->pcdata->condition[COND_FULL] == 0 )
att:update.c:      if( ch->pcdata->condition[COND_THIRST] == 0 )
att:update.c:   condition = ch->pcdata->condition[iCond];
att:update.c:      ch->pcdata->condition[iCond] = URANGE( 0, condition + value, 10 + ch->level );
att:update.c:      ch->pcdata->condition[iCond] = URANGE( 0, condition + value, 48 );
att:update.c:   if( ch->pcdata->condition[iCond] == 0 )
att:update.c:   if( ch->pcdata->condition[iCond] == 1 )
att:update.c:   if( ch->pcdata->condition[iCond] == 2 )
att:update.c:   if( ch->pcdata->condition[iCond] == 3 )
att:update.c:      if( !IS_NPC( ch ) && ch->pcdata->nuisance )
att:update.c:         if( ch->pcdata->nuisance->flags < MAX_NUISANCE_STAGE )
att:update.c:            temp = ch->pcdata->nuisance->max_time - ch->pcdata->nuisance->set_time;
att:update.c:            temp *= ch->pcdata->nuisance->flags;
att:update.c:            temp += ch->pcdata->nuisance->set_time;
att:update.c:               ++ch->pcdata->nuisance->flags;
att:update.c:               SET_BIT( ch->pcdata->flags, PCFLAG_IDLE );
att:update.c:         if( ch->pcdata->condition[COND_DRUNK] > 8 )
att:update.c:            worsen_mental_state( ch, ch->pcdata->condition[COND_DRUNK] / 8 );
att:update.c:         if( ch->pcdata->condition[COND_FULL] > 1 )
att:update.c:         if( ch->pcdata->condition[COND_THIRST] > 1 )
att:update.c:         if( CAN_PKILL( ch ) && ch->pcdata->condition[COND_THIRST] - 9 > 10 )
att:update.c:         if( !IS_NPC( ch ) && ch->pcdata->nuisance )
att:update.c:            value = ( ( 0 - ch->pcdata->nuisance->flags ) * ch->pcdata->nuisance->power );
att:update.c:      if( !IS_NPC( ch ) && !IS_IMMORTAL( ch ) && ch->pcdata->release_date > 0 && ch->pcdata->release_date <= current_time )
att:update.c:         if( ch->pcdata->clan )
att:update.c:            location = get_room_index( ch->pcdata->clan->recall );
att:update.c:         STRFREE( ch->pcdata->helled_by );
att:update.c:         ch->pcdata->helled_by = NULL;
att:update.c:         ch->pcdata->release_date = 0;
att:update.c:   if( IS_NPC( ch ) || ch->pcdata->condition[COND_DRUNK] <= 0 )
att:update.c:   drunk = ch->pcdata->condition[COND_DRUNK];
att:act_comm.c:   drunk = ch->pcdata->condition[COND_DRUNK];
att:act_comm.c:            ch_printf( ch, "(%d) ", ( !IS_NPC( ch ) ) ? ch->pcdata->wizinvis : ch->mobinvis );
att:act_comm.c:            ch_printf( ch, "(%d) ", ( !IS_NPC( ch ) ) ? ch->pcdata->wizinvis : ch->mobinvis );
att:act_comm.c:            ch_printf( ch, "(%d) ", ( !IS_NPC( ch ) ) ? ch->pcdata->wizinvis : ch->mobinvis );
att:act_comm.c:            ch_printf( ch, "(%d) ", ( !IS_NPC( ch ) ) ? ch->pcdata->wizinvis : ch->mobinvis );
att:act_comm.c:            ch_printf( ch, "(%d) ", ( !IS_NPC( ch ) ) ? ch->pcdata->wizinvis : ch->mobinvis );
att:act_comm.c:            ch_printf( ch, "(%d) ", ( !IS_NPC( ch ) ) ? ch->pcdata->wizinvis : ch->mobinvis );
att:act_comm.c:             ( !IS_NPC( och ) && !IS_SET( och->pcdata->flags, PCFLAG_RETIRED ) ) )
att:act_comm.c:               && !( och->pcdata->council && !str_cmp( och->pcdata->council->name, "Newbie Council" ) ) ) )
att:act_comm.c:            if( vch->pcdata->clan != ch->pcdata->clan )
att:act_comm.c:            if( vch->pcdata->council != ch->pcdata->council )
att:act_comm.c:            snprintf( lbuf, MAX_INPUT_LENGTH + 4, "(%d) ", ( !IS_NPC( ch ) ) ? ch->pcdata->wizinvis : ch->mobinvis );
att:act_comm.c:         if( !IS_NPC( ch ) && ch->pcdata->nuisance
att:act_comm.c:             && ch->pcdata->nuisance->flags > 7
att:act_comm.c:             && ( number_percent(  ) < ( ( ch->pcdata->nuisance->flags - 7 ) * 10 * ch->pcdata->nuisance->power ) ) )
att:act_comm.c:         if( !IS_NPC( vch ) && vch->pcdata->nuisance &&
att:act_comm.c:             vch->pcdata->nuisance->flags > 7
att:act_comm.c:             && ( number_percent(  ) < ( ( vch->pcdata->nuisance->flags - 7 ) * 10 * vch->pcdata->nuisance->power ) ) )
att:act_comm.c:   if( IS_NPC( ch ) || !ch->pcdata->clan
att:act_comm.c:       || ch->pcdata->clan->clan_type == CLAN_ORDER || ch->pcdata->clan->clan_type == CLAN_GUILD )
att:act_comm.c:            && !( ch->pcdata->council && !str_cmp( ch->pcdata->council->name, "Newbie Council" ) ) ) )
att:act_comm.c:   if( IS_NPC( ch ) || !ch->pcdata->clan || ch->pcdata->clan->clan_type != CLAN_ORDER )
att:act_comm.c:   if( IS_NPC( ch ) || !ch->pcdata->council )
att:act_comm.c:   if( IS_NPC( ch ) || !ch->pcdata->clan || ch->pcdata->clan->clan_type != CLAN_GUILD )
att:act_comm.c:   if( !IS_IMMORTAL( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_RETIRED ) )
att:act_comm.c:   if( IS_SET( ch->pcdata->flags, PCFLAG_NOBECKON ) )
att:act_comm.c:      victim->pcdata->lt_index = tolower( IS_NPC( ch ) ? ch->short_descr[0] : ch->name[0] ) - 'a';
att:act_comm.c:      victim->pcdata->lt_index = tolower( IS_NPC( ch ) ? ch->short_descr[0] : ch->name[0] ) - 'a';
att:act_comm.c:      victim->pcdata->lt_index = tolower( IS_NPC( ch ) ? ch->short_descr[0] : ch->name[0] ) - 'a';
att:act_comm.c:   if( IS_NPC( ch ) || !IS_IMMORTAL( ch ) || !ch->pcdata->tell_history )
att:act_comm.c:      tindex = ch->pcdata->lt_index;
att:act_comm.c:   if( ch->pcdata->tell_history[tindex] )
att:act_comm.c:      send_to_char( ch->pcdata->tell_history[tindex], ch );
att:act_comm.c:   if( get_trust( ch ) >= LEVEL_ASCENDANT || is_name( "bug", ch->pcdata->bestowments ) )
att:act_comm.c:   if( ch->level >= LEVEL_HERO && !ch->pcdata->pet ) /* Pet crash fix */
att:act_comm.c:   if( sysdata.save_pets && ch->pcdata->pet )
att:act_comm.c:      act( AT_BYE, "$N follows $S master into the Void.", ch, NULL, ch->pcdata->pet, TO_ROOM );
att:act_comm.c:      extract_char( ch->pcdata->pet, TRUE );
att:act_comm.c:   if( ch->pcdata->clan )
att:act_comm.c:      save_clan( ch->pcdata->clan );
att:act_comm.c:   if( !ch->pcdata->council )
att:act_comm.c:   if( str_cmp( ch->pcdata->council->name, "Newbie Council" ) )
att:act_comm.c:   if( IS_NPC( ch ) && !IS_NPC( ch->master ) && ch->master->pcdata->pet == ch )
att:act_comm.c:      ch->master->pcdata->pet = NULL;
att:act_comm.c:         ch->master->pcdata->charmies--;
att:act_comm.c:                          IS_VAMPIRE( gch ) ? gch->pcdata->condition[COND_BLOODTHIRST] : gch->mana,
att:act_comm.c:      if( ch->pcdata->clan == cch->pcdata->clan && ch->pcdata->clan != NULL )
att:act_comm.c:               return ch->pcdata->learned[sn];
att:act_comm.c:            if( ch->pcdata->learned[sn] >= 99 )
att:act_comm.c:            if( lang_array[langs] == LANG_CLAN && ( IS_NPC( ch ) || !ch->pcdata->clan ) )
att:act_comm.c:          lang_array[lang] == LANG_COMMON || ch->pcdata->learned[sn] >= 99 )
att:act_comm.c:      if( countlangs( ch->speaks ) >= ( ch->level / 10 ) && ch->pcdata->learned[sn] <= 0 )
att:act_comm.c:      ch->pcdata->learned[sn] += prct;
att:act_comm.c:      ch->pcdata->learned[sn] = UMIN( ch->pcdata->learned[sn], 99 );
att:act_comm.c:      if( ch->pcdata->learned[sn] == prct )
att:act_comm.c:      else if( ch->pcdata->learned[sn] < 60 )
att:act_comm.c:      else if( ch->pcdata->learned[sn] < 60 + prct )
att:act_comm.c:      else if( ch->pcdata->learned[sn] < 99 )
att:act_info.c:      * ( IS_NPC( ch ) ? 1 : ( ch->pcdata->condition[COND_DRUNK] ? ( ch->pcdata->condition[COND_DRUNK] / 12 ) : 1 ) );
att:act_info.c:   else if( ch->pcdata->learned[gsn_peek] > 0 )
att:act_info.c:      SET_BIT( ch->pcdata->flags, PCFLAG_HELPSTART );
att:act_info.c:      if( wch->level < iLevelLower || wch->level > iLevelUpper || ( fPkill && !CAN_PKILL( wch ) ) || ( fImmortalOnly && wch->level < LEVEL_IMMORTAL ) || ( fClassRestrict && !rgfClass[wch->Class] ) || ( fRaceRestrict && !rgfRace[wch->race] ) || ( fClanMatch && ( pClan != wch->pcdata->clan ) )  /* SB */
att:act_info.c:          || ( fCouncilMatch && ( pCouncil != wch->pcdata->council ) )  /* SB */
att:act_info.c:          || ( fDeityMatch && ( pDeity != wch->pcdata->deity ) ) )
att:act_info.c:      if( fLeader && !( wch->pcdata->council &&
att:act_info.c:                        ( ( wch->pcdata->council->head2 &&
att:act_info.c:                            !str_cmp( wch->pcdata->council->head2, wch->name ) ) ||
att:act_info.c:                          ( wch->pcdata->council->head &&
att:act_info.c:                            !str_cmp( wch->pcdata->council->head, wch->name ) ) ) ) &&
att:act_info.c:          !( wch->pcdata->clan && ( ( wch->pcdata->clan->deity &&
att:act_info.c:                                      !str_cmp( wch->pcdata->clan->deity, wch->name ) )
att:act_info.c:                                    || ( wch->pcdata->clan->leader
att:act_info.c:                                         && !str_cmp( wch->pcdata->clan->leader, wch->name ) )
att:act_info.c:                                    || ( wch->pcdata->clan->number1
att:act_info.c:                                         && !str_cmp( wch->pcdata->clan->number1, wch->name ) )
att:act_info.c:                                    || ( wch->pcdata->clan->number2
att:act_info.c:                                         && !str_cmp( wch->pcdata->clan->number2, wch->name ) ) ) ) )
att:act_info.c:      if( fGroup && !wch->leader && !IS_SET( wch->pcdata->flags, PCFLAG_GROUPWHO ) && ( !whogr_p || !whogr_p->indent ) )
att:act_info.c:      if( fShowHomepage && wch->pcdata->homepage && wch->pcdata->homepage[0] != '\0' )
att:act_info.c:         snprintf( char_name, MAX_INPUT_LENGTH, "<A HREF=\"%s\">%s</A>", show_tilde( wch->pcdata->homepage ), wch->name );
att:act_info.c:      else if( wch->pcdata->clan
att:act_info.c:               && !str_cmp( wch->name, wch->pcdata->clan->leader ) && wch->pcdata->clan->leadrank[0] != '\0' )
att:act_info.c:         Class = wch->pcdata->clan->leadrank;
att:act_info.c:      else if( wch->pcdata->clan
att:act_info.c:               && !str_cmp( wch->name, wch->pcdata->clan->number1 ) && wch->pcdata->clan->onerank[0] != '\0' )
att:act_info.c:         Class = wch->pcdata->clan->onerank;
att:act_info.c:      else if( wch->pcdata->clan
att:act_info.c:               && !str_cmp( wch->name, wch->pcdata->clan->number2 ) && wch->pcdata->clan->tworank[0] != '\0' )
att:act_info.c:         Class = wch->pcdata->clan->tworank;
att:act_info.c:      else if( wch->pcdata->rank && wch->pcdata->rank[0] != '\0' )
att:act_info.c:         Class = wch->pcdata->rank;
att:act_info.c:      if( wch->pcdata->clan )
att:act_info.c:         CLAN_DATA *pclan = wch->pcdata->clan;
att:act_info.c:      if( wch->pcdata->council )
att:act_info.c:         if( wch->pcdata->council->head2 == NULL )
att:act_info.c:            if( !str_cmp( wch->name, wch->pcdata->council->head ) )
att:act_info.c:            if( !str_cmp( wch->name, wch->pcdata->council->head ) || !str_cmp( wch->name, wch->pcdata->council->head2 ) )
att:act_info.c:         mudstrlcat( council_name, wch->pcdata->council_name, MAX_INPUT_LENGTH );
att:act_info.c:         snprintf( invis_str, MAX_INPUT_LENGTH, "(%d) ", wch->pcdata->wizinvis );
att:act_info.c:                wch->pcdata->customclass,
att:act_info.c:                char_name, wch->pcdata->title, extra_title, clan_name, council_name );
att:act_info.c:             && ( skill->guild != CLASS_NONE && ( !IS_GUILDED( ch ) || ( ch->pcdata->clan->Class != skill->guild ) ) ) )
att:act_info.c:         if( ch->pcdata->learned[sn] <= 0 && SPELL_FLAG( skill, SF_SECRETSKILL ) )
att:act_info.c:         if( ch->pcdata->learned[normalSn] > 0 )
att:act_info.c:         pager_printf( ch, " %3d%% ", ch->pcdata->learned[normalSn] );
att:act_info.c:	     && ch->pcdata->clan->class != skill_table[sn]->guild )
att:act_info.c:      if( ch->pcdata->learned[sn] >= adept )
att:act_info.c:         ch->pcdata->learned[sn] += int_app[get_curr_int( ch )].learn;
att:act_info.c:         if( ch->pcdata->learned[sn] >= adept )
att:act_info.c:            ch->pcdata->learned[sn] = adept;
att:act_info.c:   DISPOSE( ch->pcdata->pwd );
att:act_info.c:   ch->pcdata->pwd = str_dup( pwdnew );
att:act_info.c:      if( !IS_NPC( ch ) && ch->pcdata->clan )
att:act_info.c:         if( ch->pcdata->clan->clan_type == CLAN_ORDER )
att:act_info.c:         else if( ch->pcdata->clan->clan_type == CLAN_GUILD )
att:act_info.c:      if( IS_IMMORTAL( ch ) || ( ch->pcdata->council && !str_cmp( ch->pcdata->council->name, "Newbie Council" ) ) )
att:act_info.c:      if( !IS_NPC( ch ) && ch->pcdata->council )
att:act_info.c:      if( !IS_NPC( ch ) && IS_SET( ch->pcdata->flags, PCFLAG_RETIRED ) )
att:act_info.c:      else if( !str_cmp( arg + 1, "clan" ) && !IS_NPC( ch ) && ch->pcdata->clan
att:act_info.c:               && ch->pcdata->clan->clan_type != CLAN_ORDER && ch->pcdata->clan->clan_type != CLAN_GUILD )
att:act_info.c:      else if( !str_cmp( arg + 1, "council" ) && !IS_NPC( ch ) && ch->pcdata->council )
att:act_info.c:      else if( !str_cmp( arg + 1, "guild" ) && !IS_NPC( ch ) && ch->pcdata->clan
att:act_info.c:               && ch->pcdata->clan->clan_type == CLAN_GUILD )
att:act_info.c:                                                  || ( ch->pcdata->council
att:act_info.c:                                                       && !str_cmp( ch->pcdata->council->name, "Newbie Council" ) ) ) )
att:act_info.c:      else if( !str_cmp( arg + 1, "order" ) && !IS_NPC( ch ) && ch->pcdata->clan
att:act_info.c:               && ch->pcdata->clan->clan_type == CLAN_ORDER )
att:act_info.c:          * if (ch->pcdata->clan)
att:act_info.c:          * if (ch->pcdata->council)
att:act_info.c:          * if (ch->pcdata->guild)
att:act_info.c:          * if (ch->pcdata->clan)
att:act_info.c:          * if (ch->pcdata->council)
att:act_info.c:                 IS_SET( ch->pcdata->flags, PCFLAG_PAGERON ) ? "[+] PAGER"
att:act_info.c:                 IS_SET( ch->pcdata->flags, PCFLAG_GAG ) ? "[+] GAG"
att:act_info.c:                 IS_SET( ch->pcdata->flags, PCFLAG_NORECALL ) ? "[+] NORECALL"
att:act_info.c:                 : "[-] norecall", IS_SET( ch->pcdata->flags, PCFLAG_NOSUMMON ) ? "[+] NOSUMMON" : "[-] nosummon" );
att:act_info.c:      if( !IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
att:act_info.c:                 IS_SET( ch->pcdata->flags, PCFLAG_GROUPWHO ) ? "[+] GROUPWHO" : "[-] groupwho",
att:act_info.c:                 IS_SET( ch->pcdata->flags, PCFLAG_NOINTRO ) ? "[+] NOINTRO" : "[-] nointro",
att:act_info.c:                 IS_SET( ch->pcdata->flags, PCFLAG_BECKON ) ? "[+] BECKON" : "[-] beckon" );
att:act_info.c:      ch_printf_color( ch, "Pager Length (%d)    Wimpy (&W%d&w)", ch->pcdata->pagerlen, ch->wimpy );
att:act_info.c:                 IS_SET( ch->pcdata->flags, PCFLAG_NODESC ) ? " You are not permitted to set your description.\r\n" : "" );
att:act_info.c:         if( ( bit == PLR_FLEE || bit == PLR_NICE || bit == PLR_SHOVEDRAG ) && IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
att:act_info.c:            SET_BIT( ch->pcdata->flags, bit );
att:act_info.c:            REMOVE_BIT( ch->pcdata->flags, bit );
att:act_info.c:         if( ch->pcdata->learned[normalSn] <= 0 && SPELL_FLAG( skill, SF_SECRETSKILL ) )
att:act_info.c:                          skn, skill->name, ch->pcdata->learned[normalSn], skill->skill_adept[ch->Class], buf );
att:act_info.c:      if( IS_SET( ch->pcdata->flags, PCFLAG_PAGERON ) )
att:act_info.c:         ch_printf( ch, "Pager is now enabled at %d lines.\r\n", ch->pcdata->pagerlen );
att:act_info.c:   ch->pcdata->pagerlen = atoi( arg );
att:act_info.c:   if( ch->pcdata->pagerlen < 5 )
att:act_info.c:      ch->pcdata->pagerlen = 5;
att:act_info.c:   ch_printf( ch, "Page pausing set to %d lines.\r\n", ch->pcdata->pagerlen );
att:act_info.c:      if( !ch->pcdata->first_ignored )
att:act_info.c:      for( temp = ch->pcdata->first_ignored; temp; temp = temp->next )
att:act_info.c:      for( temp = ch->pcdata->first_ignored; temp; temp = next )
att:act_info.c:         UNLINK( temp, ch->pcdata->first_ignored, ch->pcdata->last_ignored, next, prev );
att:act_info.c:      for( temp = ch->pcdata->first_ignored, i = 0; temp; temp = temp->next, i++ )
att:act_info.c:            UNLINK( temp, ch->pcdata->first_ignored, ch->pcdata->last_ignored, next, prev );
att:act_info.c:         LINK( inew, ch->pcdata->first_ignored, ch->pcdata->last_ignored, next, prev );
att:act_info.c:   for( temp = ch->pcdata->first_ignored; temp; temp = temp->next )
att:act_move.c: if( ch->pcdata->cpose )
att:act_move.c:      ch->pcdata->cpose = str_dup( " is here." );
att:act_move.c:      if( ch->pcdata->nuisance && ch->pcdata->nuisance->flags > 8 &&
att:act_move.c:          number_percent(  ) > ( ch->pcdata->nuisance->flags * ch->pcdata->nuisance->power ) )
att:act_obj.c:                && !IS_NPC( ch ) && IS_SET( ch->pcdata->flags, PCFLAG_DEADLY )
att:act_obj.c:   if( !IS_NPC( ch ) && ( !IS_PKILL( ch ) || ( IS_PKILL( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_GAG ) ) ) )
att:act_obj.c:   if( IS_NPC( ch ) || ch->pcdata->learned[gsn_dual_wield] )
att:act_obj.c:   if( !IS_NPC( ch ) && ch->pcdata->deity && ch->pcdata->deity->name[0] != '\0' )
att:act_obj.c:      mudstrlcpy( name, ch->pcdata->deity->name, 50 );
att:act_obj.c:   else if( !IS_NPC( ch ) && ch->pcdata->clan && ch->pcdata->clan->deity[0] != '\0' )
att:act_obj.c:      mudstrlcpy( name, ch->pcdata->clan->deity, 50 );
att:act_obj.c:         if( !IS_NPC( vch ) && xIS_SET( vch->act, PLR_WIZINVIS ) && vch->pcdata->wizinvis >= LEVEL_IMMORTAL )
att:act_wiz.c:      if( IS_SET( ch->pcdata->flags, PCFLAG_DND ) )
att:act_wiz.c:         REMOVE_BIT( ch->pcdata->flags, PCFLAG_DND );
att:act_wiz.c:         SET_BIT( ch->pcdata->flags, PCFLAG_DND );
att:act_wiz.c:      victim->pcdata->authed_by = QUICKLINK( ch->name );
att:act_wiz.c:      DISPOSE( ch->pcdata->bamfin );
att:act_wiz.c:      ch->pcdata->bamfin = newbamf;
att:act_wiz.c:      DISPOSE( ch->pcdata->bamfout );
att:act_wiz.c:      ch->pcdata->bamfout = newbamf;
att:act_wiz.c:   DISPOSE( ch->pcdata->rank );
att:act_wiz.c:      ch->pcdata->rank = str_dup( "" );
att:act_wiz.c:      ch->pcdata->rank = newrank;
att:act_wiz.c:   if( wch && !IS_NPC( wch ) && IS_SET( wch->pcdata->flags, PCFLAG_DND ) && get_trust( ch ) < get_trust( wch ) )
att:act_wiz.c:      if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
att:act_wiz.c:      if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
att:act_wiz.c:      ch->pcdata->restore_time = current_time;
att:act_wiz.c:            if( deity && vch->pcdata->deity != deity )
att:act_wiz.c:            vch->pcdata->condition[COND_BLOODTHIRST] = ( 10 + vch->level );
att:act_wiz.c:   if( !ch->pcdata->restore_time )
att:act_wiz.c:   time_passed = current_time - ch->pcdata->restore_time;
att:act_wiz.c:         ch->pcdata->wizinvis = level;
att:act_wiz.c:   if( ch->pcdata->wizinvis < 2 )
att:act_wiz.c:      ch->pcdata->wizinvis = ch->level;
att:act_wiz.c:   victim->pcdata->helled_by = STRALLOC( ch->name );
att:act_wiz.c:      if( str_cmp( ch->name, victim->pcdata->helled_by ) )
att:act_wiz.c:      if( str_cmp( ch->pcdata->council_name, "Quest Council" ) && ( get_trust( ch ) < LEVEL_DEMI ) )
att:act_wiz.c:   for( track = 0; track < MAX_KILLTRACK && vch->pcdata->killed[track].vnum; track++ )
att:act_wiz.c:      tmob = get_mob_index( vch->pcdata->killed[track].vnum );
att:act_wiz.c:      ch_printf( ch, "    - killed %d times.\r\n", vch->pcdata->killed[track].count );
att:act_wiz.c:      if( str_cmp( ch->pcdata->council_name, "Code Council" )
att:act_wiz.c:      if( get_trust( ch ) < LEVEL_GOD && str_cmp( ch->pcdata->council_name, "Code Council" ) )
att:act_wiz.c:      if( get_trust( ch ) < LEVEL_GOD && str_cmp( ch->pcdata->council_name, "Code Council" ) )
att:act_wiz.c:      if( str_cmp( ch->pcdata->council_name, "Code Council" ) && get_trust( ch ) < LEVEL_ASCENDANT )
att:act_wiz.c:          && pproject->coder && str_cmp( pproject->coder, ch->name ) && str_cmp( ch->pcdata->council_name, "Code Council" ) )
att:act_wiz.c:             get_trust( ch ) < LEVEL_GREATER && str_cmp( ch->pcdata->council_name, "Code Council" ) )
att:act_wiz.c:             && str_cmp( ch->name, pproject->coder ) && str_cmp( ch->pcdata->council_name, "Code Council" ) )
att:act_wiz.c:             pproject->coder && str_cmp( ch->name, pproject->coder ) && str_cmp( ch->pcdata->council_name, "Code Council" ) )
att:act_wiz.c:             && str_cmp( ch->name, pproject->coder ) && str_cmp( ch->pcdata->council_name, "Code Council" ) )
att:agecommand.c:             && ( skill->guild != CLASS_NONE && ( !IS_GUILDED( ch ) || ( ch->pcdata->clan->Class != skill->guild ) ) ) )
att:agecommand.c:         if( ch->pcdata->learned[sn] <= 0 && SPELL_FLAG( skill, SF_SECRETSKILL ) )
att:agecommand.c:if ( ch->pcdata->learned[normalSn] <= 99 )
att:agecommand.c:         if( ch->pcdata->learned[normalSn] > 99 )
att:agecommand.c:         if( ch->pcdata->learned[normalSn] < 99 )
att:agecommand.c:pager_printf( ch, "You have a balance of %d\r\n", ch->pcdata->balance);
att:agecommand.c:      amount = ch->pcdata->balance;
att:agecommand.c:   if( amount > ch->pcdata->balance )
att:agecommand.c:   ch->pcdata->balance -= amount;
att:agecommand.c:   ch->pcdata->balance += amount;
att:agecommand.c:        if ( ch->pcdata->souls <= 1999)
att:agecommand.c:        ch->pcdata->souls -= 2000;
att:agecommand.c:   if( IS_SET( ch->pcdata->flags, PCFLAG_NOCPOSE ) )
att:agecommand.c:      ch->pcdata->cpose = str_dup( " is here." );
att:agecommand.c:   ch->pcdata->cpose = STRALLOC( buf );
att:agecommand.c:      ch->pcdata->customclass = str_dup( "Adventurer" );
att:agecommand.c:   ch->pcdata->customclass = STRALLOC( buf );
att:agecommand.c:pager_printf( ch, "&CYou are a level %d %s %s from %s.\r\n", ch->level, capitalize( get_race( ch ) ),  ch->pcdata->customclass, ch->pcdata->hometown  );
att:agecommand.c:pager_printf( ch, "Your TIER rank is %d.\r\n\r\n", ch->pcdata->tier);
att:agecommand.c:                    (ch->pcdata->str + ch->pcdata->strplus), (ch->pcdata->str + ch->pcdata->att + ch->damroll),  ch->pcdata->attlevel );
att:agecommand.c:                    (ch->pcdata->dex + ch->pcdata->strplus), (ch->pcdata->def + ch->pcdata->defplus) , ch->pcdata->deflevel );
att:agecommand.c:                    (ch->pcdata->intel + ch->pcdata->intplus) , (ch->pcdata->mdef + ch->pcdata->mdefplus), ch->pcdata->mlevel );
att:agecommand.c:                    (ch->pcdata->lck + ch->pcdata->lckplus ) );
att:agecommand.c:                    ch->gold, ch->pcdata->ap, ch->practice );
att:agecommand.c:pager_printf( ch, "Your Cpose is set at '%s'\r\n", ch->pcdata->cpose );
att:agecommand.c:                    ch->pcdata->pkills, ch->pcdata->illegal_pk, ch->pcdata->pdeaths );
att:agecommand.c:   if( ch->pcdata->clan && ch->pcdata->clan->clan_type != CLAN_ORDER && ch->pcdata->clan->clan_type != CLAN_GUILD )
att:agecommand.c:                    ch->pcdata->clan->name, ch->pcdata->clan->pkills[6],
att:agecommand.c:                    ( ch->pcdata->clan->pkills[1] + ch->pcdata->clan->pkills[2] +
att:agecommand.c:                      ch->pcdata->clan->pkills[3] + ch->pcdata->clan->pkills[4] + ch->pcdata->clan->pkills[5] ) );
att:agecommand.c:                    ch->pcdata->clan->pdeaths[6],
att:agecommand.c:                    ( ch->pcdata->clan->pdeaths[1] + ch->pcdata->clan->pdeaths[2] +
att:agecommand.c:                      ch->pcdata->clan->pdeaths[3] + ch->pcdata->clan->pdeaths[4] + ch->pcdata->clan->pdeaths[5] ) );
att:agecommand.c:                    xIS_SET( ch->act, PLR_WIZINVIS ) ? "X" : " ", ch->pcdata->wizinvis );
att:agecommand.c:      pager_printf( ch, "Bamfin:  %s\r\n", ( ch->pcdata->bamfin[0] != '\0' )
att:agecommand.c:                    ? ch->pcdata->bamfin : "An immortal appears." );
att:agecommand.c:      pager_printf( ch, "Bamfout: %s\r\n", ( ch->pcdata->bamfout[0] != '\0' )
att:agecommand.c:                    ? ch->pcdata->bamfout : "The immortal disappears." );
att:agecommand.c:      if( ch->pcdata->area )
att:agecommand.c:                       ch->pcdata->area->low_r_vnum, ch->pcdata->area->hi_r_vnum,
att:agecommand.c:                       ch->pcdata->area->low_o_vnum, ch->pcdata->area->hi_o_vnum,
att:agecommand.c:                       ch->pcdata->area->low_m_vnum, ch->pcdata->area->hi_m_vnum );
att:agecommand.c:         pager_printf( ch, "Area Loaded [%s]\r\n", ( IS_SET( ch->pcdata->area->status, AREA_LOADED ) ) ? "yes" : "no" );
att:bank.c:   ch->pcdata->balance += amount;
att:bank.c:      amount = ch->pcdata->balance;
att:bank.c:   if( amount > ch->pcdata->balance )
att:bank.c:   ch->pcdata->balance -= amount;
att:bank.c:   ch_printf( ch, "You have %d gold in the bank.\r\n", ch->pcdata->balance );
att:boards.c:      if( ch->pcdata->clan && !str_cmp( ch->pcdata->clan->name, board->read_group ) )
att:boards.c:      if( ch->pcdata->council && !str_cmp( ch->pcdata->council->name, board->read_group ) )
att:boards.c:      if( ch->pcdata->clan && !str_cmp( ch->pcdata->clan->name, board->post_group ) )
att:boards.c:      if( ch->pcdata->council && !str_cmp( ch->pcdata->council->name, board->post_group ) )
att:build.c:   if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
att:build.c:   if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
att:build.c:   if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
att:build.c:   if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
att:build.c:   if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
att:build.c:      if( !IS_NPC( fch ) && get_trust( ch ) < get_trust( fch ) && IS_SET( fch->pcdata->flags, PCFLAG_DND ) )
att:build.c:      if( get_trust( ch ) < LEVEL_CREATOR || vnum < 1 || IS_NPC( ch ) || !ch->pcdata->area )
att:build.c:         if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
att:build.c:      location = make_room( vnum, ch->pcdata->area );
att:build.c:             && ch->pcdata->bamfout[0] != '\0' ) ? ch->pcdata->bamfout : ( char * )"The immortal disappears.", TO_ROOM );
att:build.c:             && ch->pcdata->bamfin[0] != '\0' ) ? ch->pcdata->bamfin : ( char * )"An immortal appears.", TO_ROOM );
att:build.c:         if( ch->pcdata && ch->pcdata->subprompt )
att:build.c:            STRFREE( ch->pcdata->subprompt );
att:build.c:            ch->pcdata->subprompt = NULL;
att:build.c:         if( ch->pcdata->subprompt )
att:build.c:            STRFREE( ch->pcdata->subprompt );
att:build.c:         ch->pcdata->subprompt = STRALLOC( buf );
att:build.c:         if( ch->pcdata && ch->pcdata->subprompt )
att:build.c:            STRFREE( ch->pcdata->subprompt );
att:build.c:            ch->pcdata->subprompt = NULL;
att:build.c:         if( ch->pcdata->subprompt )
att:build.c:            STRFREE( ch->pcdata->subprompt );
att:build.c:         ch->pcdata->subprompt = STRALLOC( buf );
att:build.c:                && get_trust( ch ) < LEVEL_GREATER && !is_name( "protoflag", ch->pcdata->bestowments ) )
att:build.c:   if( !ch->pcdata->area )
att:build.c:      pArea = ch->pcdata->area;
att:build.c:      location->area = ch->pcdata->area;
att:build.c:   pArea = ch->pcdata->area;
att:build.c:         location->area = ch->pcdata->area;
att:build.c:   if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
att:build.c:         if( ch->pcdata && ch->pcdata->subprompt )
att:build.c:            STRFREE( ch->pcdata->subprompt );
att:build.c:            ch->pcdata->subprompt = NULL;
att:build.c:         if( ch->pcdata->subprompt )
att:build.c:            STRFREE( ch->pcdata->subprompt );
att:build.c:         ch->pcdata->subprompt = STRALLOC( "<&CRedit &W#%r&w> %i" );
att:build.c:      if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
att:build.c:      if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
att:build.c:   if( get_trust( ch ) > LEVEL_IMMORTAL && ch->pcdata->r_range_lo && ch->pcdata->r_range_hi )
att:build.c:      tarea = ch->pcdata->area;
att:build.c:      tarea->low_r_vnum = ch->pcdata->r_range_lo;
att:build.c:      tarea->low_o_vnum = ch->pcdata->o_range_lo;
att:build.c:      tarea->low_m_vnum = ch->pcdata->m_range_lo;
att:build.c:      tarea->hi_r_vnum = ch->pcdata->r_range_hi;
att:build.c:      tarea->hi_o_vnum = ch->pcdata->o_range_hi;
att:build.c:      tarea->hi_m_vnum = ch->pcdata->m_range_hi;
att:build.c:      ch->pcdata->area = tarea;
att:build.c:      ch->pcdata->area = NULL;
att:build.c:      if( !ch->pcdata->area )
att:build.c:       || ( is_name( buf, ch->pcdata->bestowments )
att:build.c:       || ( ch->pcdata->council && is_name( buf, ch->pcdata->council->powers ) ) )
att:build.c:                || is_name( tmp->filename, ch->pcdata->bestowments )
att:build.c:                || ( ch->pcdata->council
att:build.c:                     && ( is_name( buf, ch->pcdata->council->powers )
att:build.c:                          || is_name( "aassign", ch->pcdata->council->powers ) ) ) )
att:build.c:   ch->pcdata->area = tarea;
att:build.c:   if( IS_NPC( ch ) || get_trust( ch ) < LEVEL_CREATOR || !ch->pcdata || ( argument[0] == '\0' && !ch->pcdata->area ) )
att:build.c:      tarea = ch->pcdata->area;
att:build.c:   if( IS_NPC( ch ) || get_trust( ch ) < LEVEL_CREATOR || !ch->pcdata || ( argument[0] == '\0' && !ch->pcdata->area ) )
att:build.c:      tarea = ch->pcdata->area;
att:build.c:       || ( !ch->pcdata->area && get_trust( ch ) < LEVEL_GREATER ) )
att:build.c:   tarea = ch->pcdata->area;
att:build.c:       || ( !ch->pcdata->area && get_trust( ch ) < LEVEL_GREATER ) )
att:build.c:   tarea = ch->pcdata->area;
att:build.c:       || ( !ch->pcdata->area && get_trust( ch ) < LEVEL_GREATER ) )
att:build.c:   tarea = ch->pcdata->area;
att:build.c:       && ( obj->vnum < ch->pcdata->area->low_o_vnum || obj->vnum > ch->pcdata->area->hi_o_vnum ) )
att:build.c:       && ( mob->vnum < ch->pcdata->area->low_m_vnum || mob->vnum > ch->pcdata->area->hi_m_vnum ) )
att:build.c:       || ( !ch->pcdata->area && get_trust( ch ) < LEVEL_GREATER ) )
att:build.c:   tarea = ch->pcdata->area;
att:calendar.c:   ch->pcdata->timezone = i;
att:calendar.c:   ch_printf( ch, "&wYour local time        :  &W %s&D\r\n", c_time( current_time, ch->pcdata->timezone ) );
att:calendar.c:      if( day == ch->pcdata->day + 1 && time_info.month == ch->pcdata->month )
att:chess.c:         ch->pcdata->game_board = NULL;
att:chess.c:         ch->pcdata->game_board = NULL;
att:chess.c:      if( ch->pcdata->game_board )
att:chess.c:      ch->pcdata->game_board = board;
att:chess.c:      ch->pcdata->game_board->player1 = QUICKLINK( ch->name );
att:chess.c:      if( ch->pcdata->game_board )
att:chess.c:         ch->pcdata->game_board = board;
att:chess.c:      board = vch->pcdata->game_board;
att:chess.c:      ch->pcdata->game_board = board;
att:chess.c:   if( !ch->pcdata->game_board )
att:chess.c:      free_game( ch->pcdata->game_board );
att:chess.c:      GAME_BOARD_DATA *board = ch->pcdata->game_board;
att:chess.c:      send_to_char( print_big_board( ch, ch->pcdata->game_board ), ch );
att:chess.c:      if( !ch->pcdata->game_board->player1 || !ch->pcdata->game_board->player2 )
att:chess.c:      if( ch->pcdata->game_board->turn < 0 )
att:chess.c:      if( king_in_checkmate( ch->pcdata->game_board, BLACK_KING ) )
att:chess.c:      if( king_in_checkmate( ch->pcdata->game_board, WHITE_KING ) )
att:chess.c:      if( ch->pcdata->game_board->turn % 2 == 1 && !str_cmp( ch->pcdata->game_board->player1, ch->name ) )
att:chess.c:      if( ch->pcdata->game_board->turn % 2 == 0 && !str_cmp( ch->pcdata->game_board->player2, ch->name ) )
att:chess.c:      ret = is_valid_move( ch, ch->pcdata->game_board, x, y, dx, dy );
att:chess.c:         board = ch->pcdata->game_board;
att:chess.c:            if( ch->pcdata->game_board->type == TYPE_IMC )
att:chess.c:               imc_send_chess( ch->pcdata->game_board->player1, ch->pcdata->game_board->player2, arg );
att:chess.c:      if( !str_cmp( ch->name, ch->pcdata->game_board->player1 ) )
att:chess.c:         opp = get_char_world( ch, ch->pcdata->game_board->player2 );
att:chess.c:            mudstrlcpy( opp_name, ch->pcdata->game_board->player2, MAX_INPUT_LENGTH );
att:chess.c:         opp = get_char_world( ch, ch->pcdata->game_board->player1 );
att:chess.c:            mudstrlcpy( opp_name, ch->pcdata->game_board->player1, MAX_INPUT_LENGTH );
att:chess.c:         if( ch->pcdata->game_board->type == TYPE_LOCAL ) \
att:chess.c:         if( ch->pcdata->game_board->type == TYPE_IMC ) \
att:chess.c:         if( ch->pcdata->game_board->type == TYPE_LOCAL ) \
att:clans.c:   if( IS_NPC( ch ) || !ch->pcdata->clan )
att:clans.c:   for( roster = ch->pcdata->clan->first_member; roster; roster = roster->next )
att:clans.c:         roster->kills = ch->pcdata->mkills;
att:clans.c:         roster->deaths = ch->pcdata->mdeaths;
att:clans.c:         save_clan( ch->pcdata->clan );
att:clans.c:   add_roster( ch->pcdata->clan, ch->name, ch->Class, ch->level, ch->pcdata->mkills, ch->pcdata->mdeaths );
att:clans.c:   save_clan( ch->pcdata->clan );
att:clans.c:   if( IS_NPC( ch ) || !ch->pcdata->clan )
att:clans.c:   clan = ch->pcdata->clan;
att:clans.c:   if( IS_NPC( ch ) || !ch->pcdata->clan )
att:clans.c:   clan = ch->pcdata->clan;
att:clans.c:   if( ( ch->pcdata && ch->pcdata->bestowments
att:clans.c:         && is_name( "caninduct", ch->pcdata->bestowments ) )
att:clans.c:   if( IS_NPC( ch ) || !ch->pcdata->council )
att:clans.c:   council = ch->pcdata->council;
att:clans.c:   if( IS_NPC( ch ) || !ch->pcdata->clan )
att:clans.c:   clan = ch->pcdata->clan;
att:clans.c:   if( ( ch->pcdata && ch->pcdata->bestowments
att:clans.c:         && is_name( "canoutcast", ch->pcdata->bestowments ) )
att:clans.c:      if( ch->pcdata->clan->clan_type == CLAN_ORDER )
att:clans.c:      else if( ch->pcdata->clan->clan_type == CLAN_GUILD )
att:clans.c:   if( victim->pcdata->clan != ch->pcdata->clan )
att:clans.c:      if( ch->pcdata->clan->clan_type == CLAN_ORDER )
att:clans.c:      else if( ch->pcdata->clan->clan_type == CLAN_GUILD )
att:clans.c:   if( !str_cmp( victim->name, ch->pcdata->clan->number1 ) )
att:clans.c:      STRFREE( ch->pcdata->clan->number1 );
att:clans.c:      ch->pcdata->clan->number1 = STRALLOC( "" );
att:clans.c:   if( !str_cmp( victim->name, ch->pcdata->clan->number2 ) )
att:clans.c:      STRFREE( ch->pcdata->clan->number2 );
att:clans.c:      ch->pcdata->clan->number2 = STRALLOC( "" );
att:clans.c:   if( !str_cmp( victim->name, ch->pcdata->clan->deity ) )
att:clans.c:      STRFREE( ch->pcdata->clan->deity );
att:clans.c:      ch->pcdata->clan->deity = STRALLOC( "" );
att:clans.c:   if( IS_NPC( ch ) || !ch->pcdata->council )
att:clans.c:   council = ch->pcdata->council;
att:clans.c:   if( victim->pcdata->council != ch->pcdata->council )
att:clans.c:   if( council->head2 && !str_cmp( victim->name, ch->pcdata->council->head2 ) )
att:clans.c:      STRFREE( ch->pcdata->council->head2 );
att:clans.c:      ch->pcdata->council->head2 = NULL;
att:clans.c:   if( IS_NPC( ch ) || !ch->pcdata->clan )
att:clans.c:   if( ch->pcdata->clan->clan_type != CLAN_ORDER && ch->pcdata->clan->clan_type != CLAN_GUILD )
att:clans.c:      snprintf( filename, 256, "%s%s.defeats", CLAN_DIR, ch->pcdata->clan->name );
att:clans.c:      if( !str_cmp( ch->name, ch->pcdata->clan->leader ) && !str_cmp( argument, "clean" ) )
att:clans.c:   if( IS_NPC( ch ) || !ch->pcdata->clan )
att:clans.c:   if( ch->pcdata->clan->clan_type != CLAN_ORDER && ch->pcdata->clan->clan_type != CLAN_GUILD )
att:clans.c:      snprintf( filename, 256, "%s%s.record", CLAN_DIR, ch->pcdata->clan->name );
att:clans.c:      if( !str_cmp( ch->name, ch->pcdata->clan->leader ) && !str_cmp( argument, "clean" ) )
att:clans.c:   if( IS_NPC( ch ) || !IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
att:clans.c:   if( !IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) && IS_SET( victim->pcdata->flags, PCFLAG_DEADLY ) )
att:clans.c:      if( IS_SET( victim->pcdata->flags, PCFLAG_DEADLY ) && IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
att:color.c:      if( IS_NPC( ch ) || !IS_SET( ch->pcdata->flags, PCFLAG_PAGERON ) )
att:comm.c:      log_printf_plus( LOG_COMM, UMAX( sysdata.log_level, ch->level ), "Closing link to %s. (INRoom %d)", ch->pcdata->filename, ( ch->in_room ? ch->in_room->vnum : -1 ) );
att:comm.c:   if( !IS_SET( ch->pcdata->flags, PCFLAG_NOINTRO ) )
att:comm.c:   if( str_cmp( sha256_crypt( argument ), ch->pcdata->pwd ) )
att:comm.c:   if( check_playing( d, ch->pcdata->filename, TRUE ) )
att:comm.c:chk = check_reconnect( d, ch->pcdata->filename, TRUE );
att:comm.c:   mudstrlcpy( buf, ch->pcdata->filename, MAX_STRING_LENGTH );
att:comm.c:   DISPOSE( ch->pcdata->pwd );
att:comm.c:   ch->pcdata->pwd = str_dup( pwdnew );
att:comm.c:   if( str_cmp( sha256_crypt( argument ), ch->pcdata->pwd ) )
att:comm.c:   ch->pcdata->cpose = str_dup( " is here." );
att:comm.c:   ch->pcdata->customclass = str_dup( "Adventurer" );
att:comm.c:   ch->pcdata->str = 4;
att:comm.c:   ch->pcdata->intel = 3;
att:comm.c:   ch->pcdata->dex = 4;
att:comm.c:   ch->pcdata->lck = 2;
att:comm.c:   ch->pcdata->att = 10;
att:comm.c:   ch->pcdata->def = 15;
att:comm.c:   ch->pcdata->mdef = 5;
att:comm.c:   ch->pcdata->matt = 5;
att:comm.c:   ch->pcdata->strplus = 0;
att:comm.c:   ch->pcdata->intplus = 0;
att:comm.c:   ch->pcdata->dexplus = 0;
att:comm.c:   ch->pcdata->lckplus = 0;
att:comm.c:   ch->pcdata->attplus = 0;
att:comm.c:   ch->pcdata->defplus = 0;
att:comm.c:   ch->pcdata->mattplus = 0;
att:comm.c:   ch->pcdata->mdefplus = 0;
att:comm.c:   ch->pcdata->mlevel = 1;
att:comm.c:   ch->pcdata->deflevel = 1;
att:comm.c:   ch->pcdata->attlevel = 1;
att:comm.c:   ch->pcdata->hometown = str_dup( "Kroridge" );
att:comm.c:   ch->pcdata->hometown = str_dup( "O'ran Thalore" );
att:comm.c:   ch->pcdata->hometown = str_dup( "Kimlodar" );
att:comm.c:   ch->pcdata->hometown = str_dup( "Shireton" );
att:comm.c:   ch->pcdata->hometown = str_dup( "BeachCastle" );
att:comm.c:   ch->pcdata->hometown = str_dup( "Calmarnock" );
att:comm.c:   ch->pcdata->hometown = str_dup( "Tarnstead" );
att:comm.c:   ch->pcdata->hometown = str_dup( "Dhubrokh" );
att:comm.c:      SET_BIT( ch->pcdata->flags, PCFLAG_WATCH );
att:comm.c:      REMOVE_BIT( ch->pcdata->flags, PCFLAG_WATCH );
att:comm.c:      ch->pcdata->clan = NULL;
att:comm.c:         ch->pcdata->learned[iLang] = 100;
att:comm.c:                  ch->pcdata->learned[uLang] = 100;
att:comm.c:      ch->pcdata->day = time_info.day;
att:comm.c:      ch->pcdata->month = time_info.month;
att:comm.c:      ch->pcdata->year = time_info.year - 17;
att:comm.c:      ch->pcdata->age = 17;
att:comm.c:      ch->pcdata->age_bonus = 0;
att:comm.c:         ch->pcdata->auth_state = 0;
att:comm.c:         SET_BIT( ch->pcdata->flags, PCFLAG_UNAUTHED );
att:comm.c:   else if( !IS_IMMORTAL( ch ) && ch->pcdata->release_date > 0 && ch->pcdata->release_date > current_time )
att:comm.c:   if( ch->pcdata->pet )
att:comm.c:      act( AT_ACTION, "$n returns to $s master from the Void.", ch->pcdata->pet, NULL, ch, TO_NOTVICT );
att:comm.c:      act( AT_ACTION, "$N returns with you to the realms.", ch, NULL, ch->pcdata->pet, TO_CHAR );
att:comm.c:   if( str_cmp( sha256_crypt( argument ), ch->pcdata->pwd ) )
att:comm.c:      if( !IS_NPC( ch ) && ( !fConn || !ch->desc ) && ch->pcdata->filename && !str_cmp( name, ch->pcdata->filename ) )
att:comm.c:            d->character->pcdata->pwd = str_dup( ch->pcdata->pwd );
att:comm.c:               ch->pcdata->recent_site = STRALLOC( d->host );
att:comm.c:            log_printf_plus( LOG_COMM, sysdata.log_level, "%s already connected.", ch->pcdata->filename );
att:comm.c:            ch->pcdata->recent_site = STRALLOC( d->host );
att:comm.c:                          ch->pcdata->filename, d->host );
att:comm.c:   REMOVE_BIT( ch->pcdata->flags, PCFLAG_IDLE );
att:comm.c:         && ( get_trust(to) < ( ch->pcdata ? ch->pcdata->wizinvis : 0 ) ) ) ) ) )
att:comm.c:   if( !NOT_AUTHED( ch ) || ch->pcdata->auth_state != 2 )
att:comm.c:   STRFREE( ch->pcdata->filename );
att:comm.c:   ch->pcdata->filename = STRALLOC( ucase_argument );
att:comm.c:   ch->pcdata->auth_state = 0;
att:comm.c:   if( !IS_NPC( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_HELPSTART ) )
att:comm.c:   else if( !IS_NPC( ch ) && ch->substate != SUB_NONE && ch->pcdata->subprompt && ch->pcdata->subprompt[0] != '\0' )
att:comm.c:      prompt = ch->pcdata->subprompt;
att:comm.c:   else if( IS_NPC( ch ) || ( !ch->fighting && ( !ch->pcdata->prompt || !*ch->pcdata->prompt ) ) )
att:comm.c:      if( !ch->pcdata->fprompt || !*ch->pcdata->fprompt )
att:comm.c:         prompt = ch->pcdata->fprompt;
att:comm.c:      prompt = ch->pcdata->prompt;
att:comm.c:                     pstat = ch->pcdata->condition[COND_BLOODTHIRST];
att:comm.c:                     if( IS_SET( ch->pcdata->flags, PCFLAG_DND ) )
att:comm.c:                               ( IS_NPC( ch ) ? ch->mobinvis : ch->pcdata->wizinvis ) );
att:comm.c:                            : ( xIS_SET( ch->act, PLR_WIZINVIS ) ? ch->pcdata->wizinvis : 0 ) );
att:comm.c:   pclines = UMAX( ch->pcdata->pagerlen, 5 ) - 1;
att:comm.c.backup:      log_printf_plus( LOG_COMM, UMAX( sysdata.log_level, ch->level ), "Closing link to %s. (INRoom %d)", ch->pcdata->filename, ( ch->in_room ? ch->in_room->vnum : -1 ) );
att:comm.c.backup:   if( !IS_SET( ch->pcdata->flags, PCFLAG_NOINTRO ) )
att:comm.c.backup:   if( str_cmp( sha256_crypt( argument ), ch->pcdata->pwd ) )
att:comm.c.backup:   if( check_playing( d, ch->pcdata->filename, TRUE ) )
att:comm.c.backup:chk = check_reconnect( d, ch->pcdata->filename, TRUE );
att:comm.c.backup:   mudstrlcpy( buf, ch->pcdata->filename, MAX_STRING_LENGTH );
att:comm.c.backup:   DISPOSE( ch->pcdata->pwd );
att:comm.c.backup:   ch->pcdata->pwd = str_dup( pwdnew );
att:comm.c.backup:   if( str_cmp( sha256_crypt( argument ), ch->pcdata->pwd ) )
att:comm.c.backup:   ch->pcdata->customclass = str_dup( "Adventurer" );
att:comm.c.backup:      SET_BIT( ch->pcdata->flags, PCFLAG_WATCH );
att:comm.c.backup:      REMOVE_BIT( ch->pcdata->flags, PCFLAG_WATCH );
att:comm.c.backup:      ch->pcdata->clan = NULL;
att:comm.c.backup:         ch->pcdata->learned[iLang] = 100;
att:comm.c.backup:                  ch->pcdata->learned[uLang] = 100;
att:comm.c.backup:      ch->pcdata->day = time_info.day;
att:comm.c.backup:      ch->pcdata->month = time_info.month;
att:comm.c.backup:      ch->pcdata->year = time_info.year - 17;
att:comm.c.backup:      ch->pcdata->age = 17;
att:comm.c.backup:      ch->pcdata->age_bonus = 0;
att:comm.c.backup:         ch->pcdata->auth_state = 0;
att:comm.c.backup:         SET_BIT( ch->pcdata->flags, PCFLAG_UNAUTHED );
att:comm.c.backup:   else if( !IS_IMMORTAL( ch ) && ch->pcdata->release_date > 0 && ch->pcdata->release_date > current_time )
att:comm.c.backup:   if( ch->pcdata->pet )
att:comm.c.backup:      act( AT_ACTION, "$n returns to $s master from the Void.", ch->pcdata->pet, NULL, ch, TO_NOTVICT );
att:comm.c.backup:      act( AT_ACTION, "$N returns with you to the realms.", ch, NULL, ch->pcdata->pet, TO_CHAR );
att:comm.c.backup:   if( str_cmp( sha256_crypt( argument ), ch->pcdata->pwd ) )
att:comm.c.backup:      if( !IS_NPC( ch ) && ( !fConn || !ch->desc ) && ch->pcdata->filename && !str_cmp( name, ch->pcdata->filename ) )
att:comm.c.backup:            d->character->pcdata->pwd = str_dup( ch->pcdata->pwd );
att:comm.c.backup:               ch->pcdata->recent_site = STRALLOC( d->host );
att:comm.c.backup:            log_printf_plus( LOG_COMM, sysdata.log_level, "%s already connected.", ch->pcdata->filename );
att:comm.c.backup:            ch->pcdata->recent_site = STRALLOC( d->host );
att:comm.c.backup:                          ch->pcdata->filename, d->host );
att:comm.c.backup:   REMOVE_BIT( ch->pcdata->flags, PCFLAG_IDLE );
att:comm.c.backup:         && ( get_trust(to) < ( ch->pcdata ? ch->pcdata->wizinvis : 0 ) ) ) ) ) )
att:comm.c.backup:   if( !NOT_AUTHED( ch ) || ch->pcdata->auth_state != 2 )
att:comm.c.backup:   STRFREE( ch->pcdata->filename );
att:comm.c.backup:   ch->pcdata->filename = STRALLOC( ucase_argument );
att:comm.c.backup:   ch->pcdata->auth_state = 0;
att:comm.c.backup:   if( !IS_NPC( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_HELPSTART ) )
att:comm.c.backup:   else if( !IS_NPC( ch ) && ch->substate != SUB_NONE && ch->pcdata->subprompt && ch->pcdata->subprompt[0] != '\0' )
att:comm.c.backup:      prompt = ch->pcdata->subprompt;
att:comm.c.backup:   else if( IS_NPC( ch ) || ( !ch->fighting && ( !ch->pcdata->prompt || !*ch->pcdata->prompt ) ) )
att:comm.c.backup:      if( !ch->pcdata->fprompt || !*ch->pcdata->fprompt )
att:comm.c.backup:         prompt = ch->pcdata->fprompt;
att:comm.c.backup:      prompt = ch->pcdata->prompt;
att:comm.c.backup:                     pstat = ch->pcdata->condition[COND_BLOODTHIRST];
att:comm.c.backup:                     if( IS_SET( ch->pcdata->flags, PCFLAG_DND ) )
att:comm.c.backup:                               ( IS_NPC( ch ) ? ch->mobinvis : ch->pcdata->wizinvis ) );
att:comm.c.backup:                            : ( xIS_SET( ch->act, PLR_WIZINVIS ) ? ch->pcdata->wizinvis : 0 ) );
att:comm.c.backup:   pclines = UMAX( ch->pcdata->pagerlen, 5 ) - 1;
att:comm.c.bak:      log_printf_plus( LOG_COMM, UMAX( sysdata.log_level, ch->level ), "Closing link to %s. (INRoom %d)", ch->pcdata->filename, ( ch->in_room ? ch->in_room->vnum : -1 ) );
att:comm.c.bak:   if( !IS_SET( ch->pcdata->flags, PCFLAG_NOINTRO ) )
att:comm.c.bak:   if( str_cmp( sha256_crypt( argument ), ch->pcdata->pwd ) )
att:comm.c.bak:   if( check_playing( d, ch->pcdata->filename, TRUE ) )
att:comm.c.bak:chk = check_reconnect( d, ch->pcdata->filename, TRUE );
att:comm.c.bak:   mudstrlcpy( buf, ch->pcdata->filename, MAX_STRING_LENGTH );
att:comm.c.bak:   DISPOSE( ch->pcdata->pwd );
att:comm.c.bak:   ch->pcdata->pwd = str_dup( pwdnew );
att:comm.c.bak:   if( str_cmp( sha256_crypt( argument ), ch->pcdata->pwd ) )
att:comm.c.bak:   ch->pcdata->customclass = str_dup( "Adventurer" );
att:comm.c.bak:      SET_BIT( ch->pcdata->flags, PCFLAG_WATCH );
att:comm.c.bak:      REMOVE_BIT( ch->pcdata->flags, PCFLAG_WATCH );
att:comm.c.bak:      ch->pcdata->clan = NULL;
att:comm.c.bak:         ch->pcdata->learned[iLang] = 100;
att:comm.c.bak:                  ch->pcdata->learned[uLang] = 100;
att:comm.c.bak:      ch->pcdata->day = time_info.day;
att:comm.c.bak:      ch->pcdata->month = time_info.month;
att:comm.c.bak:      ch->pcdata->year = time_info.year - 17;
att:comm.c.bak:      ch->pcdata->age = 17;
att:comm.c.bak:      ch->pcdata->age_bonus = 0;
att:comm.c.bak:         ch->pcdata->auth_state = 0;
att:comm.c.bak:         SET_BIT( ch->pcdata->flags, PCFLAG_UNAUTHED );
att:comm.c.bak:   else if( !IS_IMMORTAL( ch ) && ch->pcdata->release_date > 0 && ch->pcdata->release_date > current_time )
att:comm.c.bak:   if( ch->pcdata->pet )
att:comm.c.bak:      act( AT_ACTION, "$n returns to $s master from the Void.", ch->pcdata->pet, NULL, ch, TO_NOTVICT );
att:comm.c.bak:      act( AT_ACTION, "$N returns with you to the realms.", ch, NULL, ch->pcdata->pet, TO_CHAR );
att:comm.c.bak:   if( str_cmp( sha256_crypt( argument ), ch->pcdata->pwd ) )
att:comm.c.bak:      if( !IS_NPC( ch ) && ( !fConn || !ch->desc ) && ch->pcdata->filename && !str_cmp( name, ch->pcdata->filename ) )
att:comm.c.bak:            d->character->pcdata->pwd = str_dup( ch->pcdata->pwd );
att:comm.c.bak:               ch->pcdata->recent_site = STRALLOC( d->host );
att:comm.c.bak:            log_printf_plus( LOG_COMM, sysdata.log_level, "%s already connected.", ch->pcdata->filename );
att:comm.c.bak:            ch->pcdata->recent_site = STRALLOC( d->host );
att:comm.c.bak:                          ch->pcdata->filename, d->host );
att:comm.c.bak:   REMOVE_BIT( ch->pcdata->flags, PCFLAG_IDLE );
att:comm.c.bak:         && ( get_trust(to) < ( ch->pcdata ? ch->pcdata->wizinvis : 0 ) ) ) ) ) )
att:comm.c.bak:   if( !NOT_AUTHED( ch ) || ch->pcdata->auth_state != 2 )
att:comm.c.bak:   STRFREE( ch->pcdata->filename );
att:comm.c.bak:   ch->pcdata->filename = STRALLOC( ucase_argument );
att:comm.c.bak:   ch->pcdata->auth_state = 0;
att:comm.c.bak:   if( !IS_NPC( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_HELPSTART ) )
att:comm.c.bak:   else if( !IS_NPC( ch ) && ch->substate != SUB_NONE && ch->pcdata->subprompt && ch->pcdata->subprompt[0] != '\0' )
att:comm.c.bak:      prompt = ch->pcdata->subprompt;
att:comm.c.bak:   else if( IS_NPC( ch ) || ( !ch->fighting && ( !ch->pcdata->prompt || !*ch->pcdata->prompt ) ) )
att:comm.c.bak:      if( !ch->pcdata->fprompt || !*ch->pcdata->fprompt )
att:comm.c.bak:         prompt = ch->pcdata->fprompt;
att:comm.c.bak:      prompt = ch->pcdata->prompt;
att:comm.c.bak:                     pstat = ch->pcdata->condition[COND_BLOODTHIRST];
att:comm.c.bak:                     if( IS_SET( ch->pcdata->flags, PCFLAG_DND ) )
att:comm.c.bak:                               ( IS_NPC( ch ) ? ch->mobinvis : ch->pcdata->wizinvis ) );
att:comm.c.bak:                            : ( xIS_SET( ch->act, PLR_WIZINVIS ) ? ch->pcdata->wizinvis : 0 ) );
att:comm.c.bak:   pclines = UMAX( ch->pcdata->pagerlen, 5 ) - 1;
att:db.c:      if( ch->pcdata->pet )
att:db.c:         extract_char( ch->pcdata->pet, TRUE );
att:db.c:         ch->pcdata->pet = NULL;
att:db.c:      for( temp = ch->pcdata->first_ignored; temp; temp = next )
att:db.c:         UNLINK( temp, ch->pcdata->first_ignored, ch->pcdata->last_ignored, next, prev );
att:db.c:      STRFREE( ch->pcdata->filename );
att:db.c:      STRFREE( ch->pcdata->deity_name );
att:db.c:      STRFREE( ch->pcdata->clan_name );
att:db.c:      STRFREE( ch->pcdata->council_name );
att:db.c:      if( ch->pcdata->recent_site )
att:db.c:         STRFREE( ch->pcdata->recent_site );
att:db.c:      if( ch->pcdata->prev_site )
att:db.c:         STRFREE( ch->pcdata->prev_site );
att:db.c:      DISPOSE( ch->pcdata->pwd );   /* no hash */
att:db.c:      DISPOSE( ch->pcdata->bamfin );   /* no hash */
att:db.c:      DISPOSE( ch->pcdata->bamfout );  /* no hash */
att:db.c:      DISPOSE( ch->pcdata->rank );
att:db.c:      STRFREE( ch->pcdata->title );
att:db.c:      STRFREE( ch->pcdata->bio );
att:db.c:      DISPOSE( ch->pcdata->bestowments ); /* no hash */
att:db.c:      DISPOSE( ch->pcdata->homepage ); /* no hash */
att:db.c:      STRFREE( ch->pcdata->authed_by );
att:db.c:      STRFREE( ch->pcdata->prompt );
att:db.c:      STRFREE( ch->pcdata->fprompt );
att:db.c:      if( ch->pcdata->helled_by )
att:db.c:         STRFREE( ch->pcdata->helled_by );
att:db.c:      if( ch->pcdata->subprompt )
att:db.c:         STRFREE( ch->pcdata->subprompt );
att:db.c:      if( ch->pcdata->tell_history )
att:db.c:            if( ch->pcdata->tell_history[i] )
att:db.c:               STRFREE( ch->pcdata->tell_history[i] );
att:db.c:         DISPOSE( ch->pcdata->tell_history );
att:deity.c:            if( vch->pcdata->deity == deity )
att:deity.c:               snprintf( buf, MAX_STRING_LENGTH, "&R\r\nYour deity, %s, has met its demise!\r\n", vch->pcdata->deity_name );
att:deity.c:               xREMOVE_BITS( vch->affected_by, vch->pcdata->deity->affected );
att:deity.c:               REMOVE_BIT( vch->resistant, vch->pcdata->deity->element );
att:deity.c:               REMOVE_BIT( vch->susceptible, vch->pcdata->deity->suscept );
att:deity.c:               vch->pcdata->deity = NULL;
att:deity.c:               STRFREE( vch->pcdata->deity_name );
att:deity.c:               vch->pcdata->deity_name = STRALLOC( "" );
att:deity.c:      if( !ch->pcdata->deity )
att:deity.c:      --ch->pcdata->deity->worshippers;
att:deity.c:      if( ch->pcdata->deity->worshippers < 0 )
att:deity.c:         ch->pcdata->deity->worshippers = 0;
att:deity.c:      ch->pcdata->favor = -2500;
att:deity.c:      xREMOVE_BITS( ch->affected_by, ch->pcdata->deity->affected );
att:deity.c:      REMOVE_BIT( ch->resistant, ch->pcdata->deity->element );
att:deity.c:      REMOVE_BIT( ch->susceptible, ch->pcdata->deity->suscept );
att:deity.c:      save_deity( ch->pcdata->deity );
att:deity.c:      ch->pcdata->deity = NULL;
att:deity.c:      STRFREE( ch->pcdata->deity_name );
att:deity.c:      ch->pcdata->deity_name = STRALLOC( "" );
att:deity.c:   if( ch->pcdata->deity )
att:deity.c:   STRFREE( ch->pcdata->deity_name );
att:deity.c:   ch->pcdata->deity_name = QUICKLINK( deity->name );
att:deity.c:   ch->pcdata->deity = deity;
att:deity.c:   if( ch->pcdata->favor > deity->affectednum )
att:deity.c:      xSET_BITS( ch->affected_by, ch->pcdata->deity->affected );
att:deity.c:   if( ch->pcdata->favor > deity->elementnum )
att:deity.c:      SET_BIT( ch->resistant, ch->pcdata->deity->element );
att:deity.c:   if( ch->pcdata->favor < deity->susceptnum )
att:deity.c:      SET_BIT( ch->susceptible, ch->pcdata->deity->suscept );
att:deity.c:   act( AT_MAGIC, "Body and soul, you devote yourself to $t!", ch, ch->pcdata->deity_name, NULL, TO_CHAR );
att:deity.c:   ++ch->pcdata->deity->worshippers;
att:deity.c:   save_deity( ch->pcdata->deity );
att:deity.c:   if( IS_NPC( ch ) || !ch->pcdata->deity )
att:deity.c:   oldfavor = ch->pcdata->favor;
att:deity.c:      if( ch->pcdata->favor < ch->pcdata->deity->scorpse )
att:deity.c:                  ch->pcdata->favor -= ch->pcdata->deity->scorpse;
att:deity.c:      ch->pcdata->favor -= ch->pcdata->deity->scorpse;
att:deity.c:      if( ch->pcdata->favor < ch->pcdata->deity->susceptnum )
att:deity.c:         SET_BIT( ch->susceptible, ch->pcdata->deity->suscept );
att:deity.c:      if( ( oldfavor > ch->pcdata->deity->affectednum &&
att:deity.c:            ch->pcdata->favor <= ch->pcdata->deity->affectednum ) ||
att:deity.c:          ( oldfavor > ch->pcdata->deity->elementnum &&
att:deity.c:            ch->pcdata->favor <= ch->pcdata->deity->elementnum ) ||
att:deity.c:          ( oldfavor < ch->pcdata->deity->susceptnum && ch->pcdata->favor >= ch->pcdata->deity->susceptnum ) )
att:deity.c:      if( ch->pcdata->favor < ch->pcdata->deity->savatar )
att:deity.c:      snprintf( buf, MAX_STRING_LENGTH, victim->short_descr, ch->pcdata->deity->name );
att:deity.c:      snprintf( buf, MAX_STRING_LENGTH, victim->long_descr, ch->pcdata->deity->name );
att:deity.c:      snprintf( buf, MAX_STRING_LENGTH, victim->description, ch->pcdata->deity->name );
att:deity.c:      victim->hit = ch->hit * 6 + ch->pcdata->favor;
att:deity.c:      victim->alignment = ch->pcdata->deity->alignment;
att:deity.c:      victim->max_hit = ch->hit * 6 + ch->pcdata->favor;
att:deity.c:      ch->pcdata->favor -= ch->pcdata->deity->savatar;
att:deity.c:      if( ch->pcdata->favor < ch->pcdata->deity->susceptnum )
att:deity.c:         SET_BIT( ch->susceptible, ch->pcdata->deity->suscept );
att:deity.c:      if( ( oldfavor > ch->pcdata->deity->affectednum &&
att:deity.c:            ch->pcdata->favor <= ch->pcdata->deity->affectednum ) ||
att:deity.c:          ( oldfavor > ch->pcdata->deity->elementnum &&
att:deity.c:            ch->pcdata->favor <= ch->pcdata->deity->elementnum ) ||
att:deity.c:          ( oldfavor < ch->pcdata->deity->susceptnum && ch->pcdata->favor >= ch->pcdata->deity->susceptnum ) )
att:deity.c:      if( ch->pcdata->favor < ch->pcdata->deity->sdeityobj )
att:deity.c:      snprintf( buf, MAX_STRING_LENGTH, "sigil %s", ch->pcdata->deity->name );
att:deity.c:      snprintf( buf, MAX_STRING_LENGTH, obj->short_descr, ch->pcdata->deity->name );
att:deity.c:      snprintf( buf, MAX_STRING_LENGTH, obj->description, ch->pcdata->deity->name );
att:deity.c:      ch->pcdata->favor -= ch->pcdata->deity->sdeityobj;
att:deity.c:      if( ch->pcdata->favor < ch->pcdata->deity->susceptnum )
att:deity.c:         SET_BIT( ch->susceptible, ch->pcdata->deity->suscept );
att:deity.c:      if( ( oldfavor > ch->pcdata->deity->affectednum &&
att:deity.c:            ch->pcdata->favor <= ch->pcdata->deity->affectednum ) ||
att:deity.c:          ( oldfavor > ch->pcdata->deity->elementnum &&
att:deity.c:            ch->pcdata->favor <= ch->pcdata->deity->elementnum ) ||
att:deity.c:          ( oldfavor < ch->pcdata->deity->susceptnum && ch->pcdata->favor >= ch->pcdata->deity->susceptnum ) )
att:deity.c:      switch ( ch->pcdata->deity->objstat )
att:deity.c:      if( ch->pcdata->favor < ch->pcdata->deity->srecall )
att:deity.c:      if( !IS_NPC( ch ) && ch->pcdata->clan )
att:deity.c:         location = get_room_index( ch->pcdata->clan->recall );
att:deity.c:      if( !IS_NPC( ch ) && !location && ch->level >= 5 && IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
att:deity.c:      ch->pcdata->favor -= ch->pcdata->deity->srecall;
att:deity.c:      if( ch->pcdata->favor < ch->pcdata->deity->susceptnum )
att:deity.c:         SET_BIT( ch->susceptible, ch->pcdata->deity->suscept );
att:deity.c:      if( ( oldfavor > ch->pcdata->deity->affectednum &&
att:deity.c:            ch->pcdata->favor <= ch->pcdata->deity->affectednum ) ||
att:deity.c:          ( oldfavor > ch->pcdata->deity->elementnum &&
att:deity.c:            ch->pcdata->favor <= ch->pcdata->deity->elementnum ) ||
att:deity.c:          ( oldfavor < ch->pcdata->deity->susceptnum && ch->pcdata->favor >= ch->pcdata->deity->susceptnum ) )
att:deity.c:   if( IS_NPC( ch ) || !ch->pcdata->deity )
att:deity.c:   oldfavor = ch->pcdata->favor;
att:deity.c:   if( ( ch->alignment - ch->pcdata->deity->alignment > 650
att:deity.c:         || ch->alignment - ch->pcdata->deity->alignment < -650 ) && ch->pcdata->deity->alignment != 0 )
att:deity.c:      ch->pcdata->favor -= 2;
att:deity.c:      ch->pcdata->favor = URANGE( -2500, ch->pcdata->favor, 2500 );
att:deity.c:      if( ch->pcdata->favor > ch->pcdata->deity->affectednum )
att:deity.c:         xSET_BITS( ch->affected_by, ch->pcdata->deity->affected );
att:deity.c:      if( ch->pcdata->favor > ch->pcdata->deity->elementnum )
att:deity.c:         SET_BIT( ch->resistant, ch->pcdata->deity->element );
att:deity.c:      if( ch->pcdata->favor < ch->pcdata->deity->susceptnum )
att:deity.c:         SET_BIT( ch->susceptible, ch->pcdata->deity->suscept );
att:deity.c:      if( ( oldfavor > ch->pcdata->deity->affectednum &&
att:deity.c:            ch->pcdata->favor <= ch->pcdata->deity->affectednum ) ||
att:deity.c:          ( oldfavor > ch->pcdata->deity->elementnum &&
att:deity.c:            ch->pcdata->favor <= ch->pcdata->deity->elementnum ) ||
att:deity.c:          ( oldfavor < ch->pcdata->deity->susceptnum && ch->pcdata->favor >= ch->pcdata->deity->susceptnum ) )
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->flee / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->flee_npcrace / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->kill / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->kill_npcrace / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->kill_magic / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->sac / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->bury_corpse / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->aid_spell / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->aid / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->steal / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->backstab / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->die / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->die_npcrace / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->spell_aid / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->dig_corpse / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->die_npcfoe / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->flee_npcfoe / mod );
att:deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->kill_npcfoe / mod );
att:deity.c:   ch->pcdata->favor = URANGE( -2500, ch->pcdata->favor, 2500 );
att:deity.c:   if( ch->pcdata->favor > ch->pcdata->deity->affectednum )
att:deity.c:      xSET_BITS( ch->affected_by, ch->pcdata->deity->affected );
att:deity.c:   if( ch->pcdata->favor > ch->pcdata->deity->elementnum )
att:deity.c:      SET_BIT( ch->resistant, ch->pcdata->deity->element );
att:deity.c:   if( ch->pcdata->favor < ch->pcdata->deity->susceptnum )
att:deity.c:      SET_BIT( ch->susceptible, ch->pcdata->deity->suscept );
att:deity.c:   if( ( oldfavor > ch->pcdata->deity->affectednum &&
att:deity.c:         ch->pcdata->favor <= ch->pcdata->deity->affectednum ) ||
att:deity.c:       ( oldfavor > ch->pcdata->deity->elementnum &&
att:deity.c:         ch->pcdata->favor <= ch->pcdata->deity->elementnum ) ||
att:deity.c:       ( oldfavor < ch->pcdata->deity->susceptnum && ch->pcdata->favor >= ch->pcdata->deity->susceptnum ) )
att:fight.c:               DISPOSE( ch->pcdata->nuisance );
att:fight.c:       * ( 1 + abs( ch->alignment - ch->pcdata->clan->alignment ) );
att:fight.c:         bonus -= ch->pcdata->favor / -400;
att:fight.c:   if( !IS_NPC( ch ) && ch->pcdata->learned[gsn_enhanced_damage] > 0 )
att:fight.c:   victim_ac = ((((ch->pcdata->def + ch->pcdata->defplus) * ch->pcdata->deflevel) /15 ) * -1);
att:fight.c:   if( !IS_NPC( ch ) && ch->pcdata->learned[gsn_enhanced_damage] > 0 )
att:fight.c:	dam = ((dam + ch->pcdata->str + ch->pcdata->att) * ch->pcdata->attlevel) * ((ch->pcdata->dex/100) +1);
att:fight.c:         if( !IS_NPC( ch ) && !IS_IMMORTAL( ch ) && ch->pcdata->clan
att:fight.c:             && ch->pcdata->clan->clan_type != CLAN_ORDER && ch->pcdata->clan->clan_type != CLAN_GUILD && victim != ch )
att:fight.c:            snprintf( filename, 256, "%s%s.record", CLAN_DIR, ch->pcdata->clan->name );
att:fight.c:            if( victim->pcdata && victim->pcdata->clan && victim->pcdata->clan->name == ch->pcdata->clan->name )
att:fight.c:                     ch->pcdata->clan ? ch->pcdata->clan->badge :
att:fight.c:            if( ch->pcdata && ch->pcdata->clan && ch->pcdata->clan->name == victim->pcdata->clan->name )
att:fight.c:      if( !IS_NPC( ch ) && ch->pcdata->clan )
att:fight.c:       && IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) && IS_SET( victim->pcdata->flags, PCFLAG_DEADLY ) )
att:fight.c:         if( ch->pcdata->clan )
att:fight.c:            ch->pcdata->clan->mkills++;
att:fight.c:         ch->pcdata->mkills++;
att:fight.c:         if( ch->pcdata->deity )
att:fight.c:            if( victim->race == ch->pcdata->deity->npcrace )
att:fight.c:            else if( victim->race == ch->pcdata->deity->npcfoe )
att:fight.c:         ch->pcdata->pkills++;
att:fight.c:         if( ch->pcdata->clan )
att:fight.c:               ch->pcdata->clan->pkills[0]++;
att:fight.c:               ch->pcdata->clan->pkills[1]++;
att:fight.c:               ch->pcdata->clan->pkills[2]++;
att:fight.c:               ch->pcdata->clan->pkills[3]++;
att:fight.c:               ch->pcdata->clan->pkills[4]++;
att:fight.c:               ch->pcdata->clan->pkills[5]++;
att:fight.c:               ch->pcdata->clan->pkills[6]++;
att:fight.c:         ch->pcdata->pkills++;
att:fight.c:       && IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) && IS_SET( victim->pcdata->flags, PCFLAG_DEADLY ) )
att:fight.c:      if( !ch->pcdata->clan
att:fight.c:          || ( ch->pcdata->clan->clan_type != CLAN_NOKILL
att:fight.c:               && victim->pcdata->clan->clan_type != CLAN_NOKILL && ch->pcdata->clan != victim->pcdata->clan ) )
att:fight.c:         if( ch->pcdata->clan )
att:fight.c:               ch->pcdata->clan->pkills[0]++;
att:fight.c:               ch->pcdata->clan->pkills[1]++;
att:fight.c:               ch->pcdata->clan->pkills[2]++;
att:fight.c:               ch->pcdata->clan->pkills[3]++;
att:fight.c:               ch->pcdata->clan->pkills[4]++;
att:fight.c:               ch->pcdata->clan->pkills[5]++;
att:fight.c:               ch->pcdata->clan->pkills[6]++;
att:fight.c:         ch->pcdata->pkills++;
att:fight.c:            ch->pcdata->condition[COND_BLOODTHIRST] = ( 10 + ch->level );
att:fight.c:            if( ch->race == victim->pcdata->deity->npcrace )
att:fight.c:            else if( ch->race == victim->pcdata->deity->npcfoe )
att:fight.c:      if( ch->pcdata->clan )
att:fight.c:         ch->pcdata->clan->illegal_pk++;
att:fight.c:      ch->pcdata->illegal_pk++;
att:fight.c:    { if ( !(ch->pcdata->clan && victim->pcdata->clan
att:fight.c:      && ch->pcdata->clan == victim->pcdata->clan ) )  return; }
att:fight.c:        ch->pcdata->ap += (victim->level * get_curr_lck(ch));
att:fight.c:   if( dam == 0 && ( !IS_NPC( ch ) && ( IS_SET( ch->pcdata->flags, PCFLAG_GAG ) ) ) )
att:fight.c:            || !IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
att:fight.c:         if( wf && ch->pcdata->deity )
att:fight.c:            if( wf && wf->race == ch->pcdata->deity->npcrace )
att:fight.c:            else if( wf && wf->race == ch->pcdata->deity->npcfoe )
att:fight.c.backup:               DISPOSE( ch->pcdata->nuisance );
att:fight.c.backup:       * ( 1 + abs( ch->alignment - ch->pcdata->clan->alignment ) );
att:fight.c.backup:         bonus -= ch->pcdata->favor / -400;
att:fight.c.backup:   if( !IS_NPC( ch ) && ch->pcdata->learned[gsn_enhanced_damage] > 0 )
att:fight.c.backup:   victim_ac = ((((ch->pcdata->def + ch->pcdata->defplus) * ch->pcdata->deflevel) /15 ) * -1);
att:fight.c.backup:   if( !IS_NPC( ch ) && ch->pcdata->learned[gsn_enhanced_damage] > 0 )
att:fight.c.backup:	dam = (dam + ch->pcdata->str + ch->pcdata->att + ch->pcdata->attplus) * ch->pcdata->attlevel;
att:fight.c.backup:         if( !IS_NPC( ch ) && !IS_IMMORTAL( ch ) && ch->pcdata->clan
att:fight.c.backup:             && ch->pcdata->clan->clan_type != CLAN_ORDER && ch->pcdata->clan->clan_type != CLAN_GUILD && victim != ch )
att:fight.c.backup:            snprintf( filename, 256, "%s%s.record", CLAN_DIR, ch->pcdata->clan->name );
att:fight.c.backup:            if( victim->pcdata && victim->pcdata->clan && victim->pcdata->clan->name == ch->pcdata->clan->name )
att:fight.c.backup:                     ch->pcdata->clan ? ch->pcdata->clan->badge :
att:fight.c.backup:            if( ch->pcdata && ch->pcdata->clan && ch->pcdata->clan->name == victim->pcdata->clan->name )
att:fight.c.backup:      if( !IS_NPC( ch ) && ch->pcdata->clan )
att:fight.c.backup:       && IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) && IS_SET( victim->pcdata->flags, PCFLAG_DEADLY ) )
att:fight.c.backup:         if( ch->pcdata->clan )
att:fight.c.backup:            ch->pcdata->clan->mkills++;
att:fight.c.backup:         ch->pcdata->mkills++;
att:fight.c.backup:         if( ch->pcdata->deity )
att:fight.c.backup:            if( victim->race == ch->pcdata->deity->npcrace )
att:fight.c.backup:            else if( victim->race == ch->pcdata->deity->npcfoe )
att:fight.c.backup:         ch->pcdata->pkills++;
att:fight.c.backup:         if( ch->pcdata->clan )
att:fight.c.backup:               ch->pcdata->clan->pkills[0]++;
att:fight.c.backup:               ch->pcdata->clan->pkills[1]++;
att:fight.c.backup:               ch->pcdata->clan->pkills[2]++;
att:fight.c.backup:               ch->pcdata->clan->pkills[3]++;
att:fight.c.backup:               ch->pcdata->clan->pkills[4]++;
att:fight.c.backup:               ch->pcdata->clan->pkills[5]++;
att:fight.c.backup:               ch->pcdata->clan->pkills[6]++;
att:fight.c.backup:         ch->pcdata->pkills++;
att:fight.c.backup:       && IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) && IS_SET( victim->pcdata->flags, PCFLAG_DEADLY ) )
att:fight.c.backup:      if( !ch->pcdata->clan
att:fight.c.backup:          || ( ch->pcdata->clan->clan_type != CLAN_NOKILL
att:fight.c.backup:               && victim->pcdata->clan->clan_type != CLAN_NOKILL && ch->pcdata->clan != victim->pcdata->clan ) )
att:fight.c.backup:         if( ch->pcdata->clan )
att:fight.c.backup:               ch->pcdata->clan->pkills[0]++;
att:fight.c.backup:               ch->pcdata->clan->pkills[1]++;
att:fight.c.backup:               ch->pcdata->clan->pkills[2]++;
att:fight.c.backup:               ch->pcdata->clan->pkills[3]++;
att:fight.c.backup:               ch->pcdata->clan->pkills[4]++;
att:fight.c.backup:               ch->pcdata->clan->pkills[5]++;
att:fight.c.backup:               ch->pcdata->clan->pkills[6]++;
att:fight.c.backup:         ch->pcdata->pkills++;
att:fight.c.backup:            ch->pcdata->condition[COND_BLOODTHIRST] = ( 10 + ch->level );
att:fight.c.backup:            if( ch->race == victim->pcdata->deity->npcrace )
att:fight.c.backup:            else if( ch->race == victim->pcdata->deity->npcfoe )
att:fight.c.backup:      if( ch->pcdata->clan )
att:fight.c.backup:         ch->pcdata->clan->illegal_pk++;
att:fight.c.backup:      ch->pcdata->illegal_pk++;
att:fight.c.backup:    { if ( !(ch->pcdata->clan && victim->pcdata->clan
att:fight.c.backup:      && ch->pcdata->clan == victim->pcdata->clan ) )  return; }
att:fight.c.backup:        ch->pcdata->ap += (victim->level * get_curr_lck(ch));
att:fight.c.backup:   if( dam == 0 && ( !IS_NPC( ch ) && ( IS_SET( ch->pcdata->flags, PCFLAG_GAG ) ) ) )
att:fight.c.backup:            || !IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
att:fight.c.backup:         if( wf && ch->pcdata->deity )
att:fight.c.backup:            if( wf && wf->race == ch->pcdata->deity->npcrace )
att:fight.c.backup:            else if( wf && wf->race == ch->pcdata->deity->npcfoe )
att:handler.c:   ch_days = ( ch->pcdata->month + 1 ) * sysdata.dayspermonth;
att:handler.c:   ch_days += ch->pcdata->day;
att:handler.c:   age = time_info.year - ch->pcdata->year;
att:handler.c:         ch->pcdata->learned[sn] += mod;
att:handler.c:         ch->pcdata->learned[sn] = URANGE( 0, ch->pcdata->learned[sn] + mod, GET_ADEPT( ch, sn ) );
att:handler.c:            ch->pcdata->condition[COND_FULL] = URANGE( 0, ch->pcdata->condition[COND_FULL] + mod, 48 );
att:handler.c:            ch->pcdata->condition[COND_THIRST] = URANGE( 0, ch->pcdata->condition[COND_THIRST] + mod, 48 );
att:handler.c:            ch->pcdata->condition[COND_DRUNK] = URANGE( 0, ch->pcdata->condition[COND_DRUNK] + mod, 48 );
att:handler.c:            ch->pcdata->condition[COND_BLOODTHIRST] =
att:handler.c:               URANGE( 0, ch->pcdata->condition[COND_BLOODTHIRST] + mod, ch->level + 10 );
att:handler.c:   if( ch->pcdata->deity )
att:handler.c:      if( ch->pcdata->favor > ch->pcdata->deity->affectednum )
att:handler.c:         xSET_BITS( ch->affected_by, ch->pcdata->deity->affected );
att:handler.c:      if( ch->pcdata->favor > ch->pcdata->deity->elementnum )
att:handler.c:         SET_BIT( ch->resistant, ch->pcdata->deity->element );
att:handler.c:      if( ch->pcdata->favor < ch->pcdata->deity->susceptnum )
att:handler.c:         SET_BIT( ch->susceptible, ch->pcdata->deity->suscept );
att:handler.c:         if( wch->pcdata && wch->pcdata->pet == ch )
att:handler.c:            wch->pcdata->pet = NULL;
att:handler.c:      if( !IS_NPC( ch ) && ch->pcdata->clan )
att:handler.c:         location = get_room_index( ch->pcdata->clan->recall );
att:handler.c:   int drunk = IS_NPC( ch ) ? 0 : ch->pcdata->condition[COND_DRUNK];
att:handler.c:          && IS_SET( rch->pcdata->flags, PCFLAG_DND ) && get_trust( ch ) < get_trust( rch ) && can_see( ch, rch ) )
att:handler.c:      if( ch->pcdata->council && !str_cmp( ch->pcdata->council->name, "Newbie Council" ) )
att:handler.c:    clan_factor = 1 + abs( ch->alignment - ch->pcdata->clan->alignment ) / 1000; 
att:handler.c:      deity_factor = ch->pcdata->favor / -500;
att:handler.c:      deity_factor = ch->pcdata->favor / -500;
att:handler.c:   if( !IS_NPC( ch ) && ch->pcdata->nuisance && ch->pcdata->nuisance->flags > 2 )
att:handler.c:      c += ( int )( .4 * ( ( ch->pcdata->nuisance->flags - 2 ) * ch->pcdata->nuisance->power ) );
att:handler.c:      if( ch->pcdata->killed[x].vnum == vnum )
att:handler.c:         if( ch->pcdata->killed[x].count < 50 )
att:handler.c:            ++ch->pcdata->killed[x].count;
att:handler.c:      else if( ch->pcdata->killed[x].vnum == 0 )
att:handler.c:   memmove( ( char * )ch->pcdata->killed + sizeof( KILLED_DATA ),
att:handler.c:            ch->pcdata->killed, ( track - 1 ) * sizeof( KILLED_DATA ) );
att:handler.c:   ch->pcdata->killed[0].vnum = vnum;
att:handler.c:   ch->pcdata->killed[0].count = 1;
att:handler.c:      ch->pcdata->killed[track].vnum = 0;
att:handler.c:      if( ch->pcdata->killed[x].vnum == vnum )
att:handler.c:         return ch->pcdata->killed[x].count;
att:handler.c:      else if( ch->pcdata->killed[x].vnum == 0 )
att:handler.c:         if( !IS_NPC( ch ) && ch->pcdata->bestowments && is_name( cmd->name, ch->pcdata->bestowments )
att:handler.c.backup:   ch_days = ( ch->pcdata->month + 1 ) * sysdata.dayspermonth;
att:handler.c.backup:   ch_days += ch->pcdata->day;
att:handler.c.backup:   age = time_info.year - ch->pcdata->year;
att:handler.c.backup:         ch->pcdata->learned[sn] += mod;
att:handler.c.backup:         ch->pcdata->learned[sn] = URANGE( 0, ch->pcdata->learned[sn] + mod, GET_ADEPT( ch, sn ) );
att:handler.c.backup:            ch->pcdata->condition[COND_FULL] = URANGE( 0, ch->pcdata->condition[COND_FULL] + mod, 48 );
att:handler.c.backup:            ch->pcdata->condition[COND_THIRST] = URANGE( 0, ch->pcdata->condition[COND_THIRST] + mod, 48 );
att:handler.c.backup:            ch->pcdata->condition[COND_DRUNK] = URANGE( 0, ch->pcdata->condition[COND_DRUNK] + mod, 48 );
att:handler.c.backup:            ch->pcdata->condition[COND_BLOODTHIRST] =
att:handler.c.backup:               URANGE( 0, ch->pcdata->condition[COND_BLOODTHIRST] + mod, ch->level + 10 );
att:handler.c.backup:   if( ch->pcdata->deity )
att:handler.c.backup:      if( ch->pcdata->favor > ch->pcdata->deity->affectednum )
att:handler.c.backup:         xSET_BITS( ch->affected_by, ch->pcdata->deity->affected );
att:handler.c.backup:      if( ch->pcdata->favor > ch->pcdata->deity->elementnum )
att:handler.c.backup:         SET_BIT( ch->resistant, ch->pcdata->deity->element );
att:handler.c.backup:      if( ch->pcdata->favor < ch->pcdata->deity->susceptnum )
att:handler.c.backup:         SET_BIT( ch->susceptible, ch->pcdata->deity->suscept );
att:handler.c.backup:         if( wch->pcdata && wch->pcdata->pet == ch )
att:handler.c.backup:            wch->pcdata->pet = NULL;
att:handler.c.backup:      if( !IS_NPC( ch ) && ch->pcdata->clan )
att:handler.c.backup:         location = get_room_index( ch->pcdata->clan->recall );
att:handler.c.backup:   int drunk = IS_NPC( ch ) ? 0 : ch->pcdata->condition[COND_DRUNK];
att:handler.c.backup:          && IS_SET( rch->pcdata->flags, PCFLAG_DND ) && get_trust( ch ) < get_trust( rch ) && can_see( ch, rch ) )
att:handler.c.backup:      if( ch->pcdata->council && !str_cmp( ch->pcdata->council->name, "Newbie Council" ) )
att:handler.c.backup:    clan_factor = 1 + abs( ch->alignment - ch->pcdata->clan->alignment ) / 1000; 
att:handler.c.backup:      deity_factor = ch->pcdata->favor / -500;
att:handler.c.backup:      deity_factor = ch->pcdata->favor / -500;
att:handler.c.backup:   if( !IS_NPC( ch ) && ch->pcdata->nuisance && ch->pcdata->nuisance->flags > 2 )
att:handler.c.backup:      c += ( int )( .4 * ( ( ch->pcdata->nuisance->flags - 2 ) * ch->pcdata->nuisance->power ) );
att:handler.c.backup:      if( ch->pcdata->killed[x].vnum == vnum )
att:handler.c.backup:         if( ch->pcdata->killed[x].count < 50 )
att:handler.c.backup:            ++ch->pcdata->killed[x].count;
att:handler.c.backup:      else if( ch->pcdata->killed[x].vnum == 0 )
att:handler.c.backup:   memmove( ( char * )ch->pcdata->killed + sizeof( KILLED_DATA ),
att:handler.c.backup:            ch->pcdata->killed, ( track - 1 ) * sizeof( KILLED_DATA ) );
att:handler.c.backup:   ch->pcdata->killed[0].vnum = vnum;
att:handler.c.backup:   ch->pcdata->killed[0].count = 1;
att:handler.c.backup:      ch->pcdata->killed[track].vnum = 0;
att:handler.c.backup:      if( ch->pcdata->killed[x].vnum == vnum )
att:handler.c.backup:         return ch->pcdata->killed[x].count;
att:handler.c.backup:      else if( ch->pcdata->killed[x].vnum == 0 )
att:handler.c.backup:         if( !IS_NPC( ch ) && ch->pcdata->bestowments && is_name( cmd->name, ch->pcdata->bestowments )
att:hotboot.c:         och->pcdata->hotboot = TRUE;
att:house.c:   if( sysdata.save_pets && ch->pcdata && ch->pcdata->pet )
att:house.c:      extract_char( ch->pcdata->pet, TRUE );
att:house.c:   if( ch->pcdata && ch->pcdata->clan )
att:house.c:      save_clan( ch->pcdata->clan );
att:interp.c:                  || ( !IS_NPC( ch ) && ch->pcdata->council
att:interp.c:                       && is_name( cmd->name, ch->pcdata->council->powers )
att:interp.c:                  || ( !IS_NPC( ch ) && IS_SET( ch->pcdata->flags, PCFLAG_RETIRED )
att:interp.c:                  || ( !IS_NPC( ch ) && ch->pcdata->bestowments && ch->pcdata->bestowments[0] != '\0'
att:interp.c:                       && is_name( cmd->name, ch->pcdata->bestowments ) && cmd->level <= ( trust + sysdata.bestow_dif ) ) ) )
att:interp.c:      else if( IS_SET( ch->pcdata->flags, PCFLAG_WATCH ) )
att:interp.c:   if( !IS_NPC( ch ) && ch->pcdata->nuisance && ch->pcdata->nuisance->flags > 9
att:interp.c:       && number_percent(  ) < ( ( ch->pcdata->nuisance->flags - 9 ) * 10 * ch->pcdata->nuisance->power ) )
att:liquids.c:   if( !IS_NPC( ch ) && ch->pcdata->condition[COND_DRUNK] > MAX_COND_VALUE - 8 )
att:liquids.c:                && ch->level > 5 && ch->pcdata->condition[COND_BLOODTHIRST] > ( 5 + ch->level / 10 ) )
att:liquids.c:            if( ch->pcdata->condition[COND_BLOODTHIRST] < ( 10 + ch->level ) )
att:liquids.c:               if( ch->pcdata->condition[COND_FULL] >= MAX_COND_VALUE
att:liquids.c:                   || ch->pcdata->condition[COND_THIRST] >= MAX_COND_VALUE )
att:liquids.c:            ch->pcdata->condition[COND_THIRST] = MAX_COND_VALUE;
att:liquids.c:         if( !IS_NPC( ch ) && ( ch->pcdata->condition[COND_THIRST] == MAX_COND_VALUE
att:liquids.c:                                || ch->pcdata->condition[COND_FULL] == MAX_COND_VALUE ) )
att:liquids.c:            if( ch->pcdata->condition[COND_DRUNK] > ( MAX_COND_VALUE / 2 )
att:liquids.c:                && ch->pcdata->condition[COND_DRUNK] < ( MAX_COND_VALUE * .4 ) )
att:liquids.c:            else if( ch->pcdata->condition[COND_DRUNK] >= ( MAX_COND_VALUE * .4 )
att:liquids.c:                     && ch->pcdata->condition[COND_DRUNK] < ( MAX_COND_VALUE * .6 ) )
att:liquids.c:            else if( ch->pcdata->condition[COND_DRUNK] >= ( MAX_COND_VALUE * .6 )
att:liquids.c:                     && ch->pcdata->condition[COND_DRUNK] < ( MAX_COND_VALUE * .9 ) )
att:liquids.c:            else if( ch->pcdata->condition[COND_DRUNK] >= ( MAX_COND_VALUE * .9 )
att:liquids.c:                     && ch->pcdata->condition[COND_DRUNK] < MAX_COND_VALUE )
att:liquids.c:            else if( ch->pcdata->condition[COND_DRUNK] == MAX_COND_VALUE )
att:liquids.c:            if( ch->pcdata->condition[COND_THIRST] > ( MAX_COND_VALUE / 2 )
att:liquids.c:                && ch->pcdata->condition[COND_THIRST] < ( MAX_COND_VALUE * .4 ) )
att:liquids.c:            else if( ch->pcdata->condition[COND_THIRST] >= ( MAX_COND_VALUE * .4 )
att:liquids.c:                     && ch->pcdata->condition[COND_THIRST] < ( MAX_COND_VALUE * .6 ) )
att:liquids.c:            else if( ch->pcdata->condition[COND_THIRST] >= ( MAX_COND_VALUE * .6 )
att:liquids.c:                     && ch->pcdata->condition[COND_THIRST] < ( MAX_COND_VALUE * .9 ) )
att:liquids.c:            else if( ch->pcdata->condition[COND_THIRST] >= ( MAX_COND_VALUE * .9 )
att:liquids.c:                     && ch->pcdata->condition[COND_THIRST] < MAX_COND_VALUE )
att:liquids.c:            else if( ch->pcdata->condition[COND_THIRST] == MAX_COND_VALUE )
att:liquids.c:               if( ch->pcdata->condition[COND_BLOODTHIRST] > ( MAX_COND_VALUE / 2 )
att:liquids.c:                   && ch->pcdata->condition[COND_BLOODTHIRST] < ( MAX_COND_VALUE * .4 ) )
att:liquids.c:               else if( ch->pcdata->condition[COND_BLOODTHIRST] >= ( MAX_COND_VALUE * .4 )
att:liquids.c:                        && ch->pcdata->condition[COND_BLOODTHIRST] < ( MAX_COND_VALUE * .6 ) )
att:liquids.c:               else if( ch->pcdata->condition[COND_BLOODTHIRST] >= ( MAX_COND_VALUE * .6 )
att:liquids.c:                        && ch->pcdata->condition[COND_BLOODTHIRST] < ( MAX_COND_VALUE * .9 ) )
att:liquids.c:               else if( ch->pcdata->condition[COND_BLOODTHIRST] >= ( MAX_COND_VALUE * .9 )
att:liquids.c:                        && ch->pcdata->condition[COND_BLOODTHIRST] < MAX_COND_VALUE )
att:liquids.c:            else if( !IS_VAMPIRE( ch ) && ch->pcdata->condition[COND_BLOODTHIRST] >= MAX_COND_VALUE )
att:liquids.c:               ch->pcdata->condition[COND_BLOODTHIRST] = MAX_COND_VALUE;
att:liquids.c:            if( ch->pcdata->condition[COND_DRUNK] > ( MAX_COND_VALUE / 2 )
att:liquids.c:                && ch->pcdata->condition[COND_DRUNK] < ( MAX_COND_VALUE * .4 ) )
att:liquids.c:            else if( ch->pcdata->condition[COND_DRUNK] >= ( MAX_COND_VALUE * .4 )
att:liquids.c:                     && ch->pcdata->condition[COND_DRUNK] < ( MAX_COND_VALUE * .6 ) )
att:liquids.c:            else if( ch->pcdata->condition[COND_DRUNK] >= ( MAX_COND_VALUE * .6 )
att:liquids.c:                     && ch->pcdata->condition[COND_DRUNK] < ( MAX_COND_VALUE * .9 ) )
att:liquids.c:            else if( ch->pcdata->condition[COND_DRUNK] >= ( MAX_COND_VALUE * .9 )
att:liquids.c:                     && ch->pcdata->condition[COND_DRUNK] < MAX_COND_VALUE )
att:liquids.c:            else if( ch->pcdata->condition[COND_DRUNK] == MAX_COND_VALUE )
att:liquids.c:            if( ch->pcdata->condition[COND_THIRST] > ( MAX_COND_VALUE / 2 )
att:liquids.c:                && ch->pcdata->condition[COND_THIRST] < ( MAX_COND_VALUE * .4 ) )
att:liquids.c:            else if( ch->pcdata->condition[COND_THIRST] >= ( MAX_COND_VALUE * .4 )
att:liquids.c:                     && ch->pcdata->condition[COND_THIRST] < ( MAX_COND_VALUE * .6 ) )
att:liquids.c:            else if( ch->pcdata->condition[COND_THIRST] >= ( MAX_COND_VALUE * .6 )
att:liquids.c:                     && ch->pcdata->condition[COND_THIRST] < ( MAX_COND_VALUE * .9 ) )
att:liquids.c:            else if( ch->pcdata->condition[COND_THIRST] >= ( MAX_COND_VALUE * .9 )
att:liquids.c:                     && ch->pcdata->condition[COND_THIRST] < MAX_COND_VALUE )
att:liquids.c:            else if( ch->pcdata->condition[COND_THIRST] == MAX_COND_VALUE )
att:liquids.c:               if( ch->pcdata->condition[COND_BLOODTHIRST] > ( MAX_COND_VALUE / 2 )
att:liquids.c:                   && ch->pcdata->condition[COND_BLOODTHIRST] < ( MAX_COND_VALUE * .4 ) )
att:liquids.c:               else if( ch->pcdata->condition[COND_BLOODTHIRST] >= ( MAX_COND_VALUE * .4 )
att:liquids.c:                        && ch->pcdata->condition[COND_BLOODTHIRST] < ( MAX_COND_VALUE * .6 ) )
att:liquids.c:               else if( ch->pcdata->condition[COND_BLOODTHIRST] >= ( MAX_COND_VALUE * .6 )
att:liquids.c:                        && ch->pcdata->condition[COND_BLOODTHIRST] < ( MAX_COND_VALUE * .9 ) )
att:liquids.c:               else if( ch->pcdata->condition[COND_BLOODTHIRST] >= ( MAX_COND_VALUE * .9 )
att:liquids.c:                        && ch->pcdata->condition[COND_BLOODTHIRST] < MAX_COND_VALUE )
att:liquids.c:            else if( !IS_VAMPIRE( ch ) && ch->pcdata->condition[COND_BLOODTHIRST] >= MAX_COND_VALUE )
att:liquids.c:               ch->pcdata->condition[COND_BLOODTHIRST] = MAX_COND_VALUE;
att:liquids.c:            if( !IS_OBJ_STAT( source, ITEM_CLANCORPSE ) || !IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
att:magic.c:   if( ch->pcdata->learned[sn] > 0
att:magic.c:      if( ch->pcdata->learned[sn] > 0
att:magic.c:      if( !ch->pcdata->special_skills[sn] || !ch->pcdata->special_skills[sn]->name )
att:magic.c:      if( LOWER( name[0] ) == LOWER( ch->pcdata->special_skills[sn]->name[0] )
att:magic.c:          && !str_prefix( name, ch->pcdata->special_skills[sn]->name ) )
att:magic.c:         if( !IS_NPC( ch ) && ch->pcdata->nuisance &&
att:magic.c:             ch->pcdata->nuisance->flags > 5
att:magic.c:             && number_percent(  ) < ( ( ( ch->pcdata->nuisance->flags - 5 ) * 8 ) + ch->pcdata->nuisance->power * 6 ) )
att:magic.c:         if( !IS_NPC( ch ) && ch->fighting && ch->pcdata->nuisance &&
att:magic.c:             ch->pcdata->nuisance->flags > 5
att:magic.c:             && number_percent(  ) < ( ( ( ch->pcdata->nuisance->flags - 5 ) * 8 ) + 6 * ch->pcdata->nuisance->power ) )
att:magic.c:             && skill->guild != CLASS_NONE && ( !ch->pcdata->clan || skill->guild != ch->pcdata->clan->Class ) )
att:magic.c:            if( ch->pcdata->condition[COND_BLOODTHIRST] < blood )
att:magic.c:   if( !IS_NPC( ch ) && ( number_percent(  ) + skill->difficulty * 5 ) > ch->pcdata->learned[sn] )
att:magic.c:         if( !IS_NPC( vch ) && xIS_SET( vch->act, PLR_WIZINVIS ) && vch->pcdata->wizinvis >= LEVEL_IMMORTAL )
att:magic.c:   if( ( ( get_curr_cha( ch ) / 3 ) + 1 ) > ch->pcdata->charmies )
att:magic.c:      ch->pcdata->charmies++;
att:magic.c:         if( !IS_NPC( vch ) && xIS_SET( vch->act, PLR_WIZINVIS ) && vch->pcdata->wizinvis >= LEVEL_IMMORTAL )
att:magic.c:      if( !IS_NPC( vch ) && xIS_SET( vch->act, PLR_WIZINVIS ) && vch->pcdata->wizinvis >= LEVEL_IMMORTAL )
att:magic.c:   if( IS_PKILL( ch ) && ch->pcdata->condition[COND_BLOODTHIRST] > 22 )
att:magic.c:         if( !IS_IMMORTAL( ch ) && ch->pcdata->condition[COND_BLOODTHIRST] - ( pMobIndex->level / 3 ) < 0 )
att:magic.c:      if( !IS_NPC( vch ) && xIS_SET( vch->act, PLR_WIZINVIS ) && vch->pcdata->wizinvis >= LEVEL_IMMORTAL )
att:magic.c:      if( !IS_NPC( vch ) && xIS_SET( vch->act, PLR_WIZINVIS ) && vch->pcdata->wizinvis >= LEVEL_IMMORTAL )
att:mapout.c:   for( i = ch->pcdata->area->low_r_vnum; i <= ch->pcdata->area->hi_r_vnum; i++ )
att:mapout.c:         if( !( location = make_room( i, ch->pcdata->area ) ) )
att:mapout.c:         location->area = ch->pcdata->area;
att:mapout.c:   for( i = ch->pcdata->area->low_r_vnum; i <= ch->pcdata->area->hi_r_vnum; i++ )
att:mapout.c:      for( i = ch->pcdata->area->low_r_vnum; i <= ch->pcdata->area->hi_r_vnum; i++ )
att:misc.c:   if( IS_NPC( ch ) || ch->pcdata->condition[COND_FULL] > 5 )
att:misc.c:      if( !IS_NPC( ch ) && ch->pcdata->condition[COND_FULL] > 40 )
att:misc.c:   if( !IS_NPC( ch ) && ( !IS_PKILL( ch ) || ( IS_PKILL( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_HIGHGAG ) ) ) )
att:misc.c:               condition = ch->pcdata->condition[COND_FULL];
att:misc.c:               if( condition <= 1 && ch->pcdata->condition[COND_FULL] > 1 )
att:misc.c:               else if( ch->pcdata->condition[COND_FULL] > 40 )
att:misc.c:               condition = ch->pcdata->condition[COND_FULL];
att:misc.c:               if( condition <= 1 && ch->pcdata->condition[COND_FULL] > 1 )
att:misc.c:               else if( ch->pcdata->condition[COND_FULL] > 40 )
att:misc.c:   if( !IS_NPC( ch ) && ( ch->pcdata->condition[COND_FULL] >= 48 || ch->pcdata->condition[COND_THIRST] >= 48 ) )
att:misc.c:   if( !IS_NPC( ch ) && ch->pcdata->nuisance &&
att:misc.c:       ch->pcdata->nuisance->flags > 3
att:misc.c:       && ( ch->pcdata->condition[COND_FULL] >= ( 48 - ( 3 * ch->pcdata->nuisance->flags ) + ch->pcdata->nuisance->power )
att:misc.c:            || ch->pcdata->condition[COND_THIRST] >= ( 48 - ( ch->pcdata->nuisance->flags ) + ch->pcdata->nuisance->power ) ) )
att:misc.c:   if( !IS_NPC( ch ) && ( !IS_PKILL( ch ) || ( IS_PKILL( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_HIGHGAG ) ) ) )
att:misc.c:      if( !IS_NPC( ch ) && ch->pcdata->condition[COND_THIRST] > 43 )
att:mud.h:#define WAIT_STATE(ch, npulse) ((ch)->wait=(!IS_NPC(ch)&&ch->pcdata->nuisance&&\
att:mud.h:			      (ch->pcdata->nuisance->flags>4))?UMAX((ch)->wait,\
att:mud.h:               		      ch->pcdata->nuisance->power)): \
att:mud.h:#define IS_RETIRED(ch) (ch->pcdata && IS_SET(ch->pcdata->flags,PCFLAG_RETIRED))
att:mud.h:#define IS_GUEST(ch) (ch->pcdata && IS_SET(ch->pcdata->flags,PCFLAG_GUEST))
att:mud.h:#define NOT_AUTHED(ch)		(!IS_NPC(ch) && ch->pcdata->auth_state <= 3  \
att:mud.h:			      && IS_SET(ch->pcdata->flags, PCFLAG_UNAUTHED) )
att:mud.h:			      && ch->pcdata->auth_state == 1		     \
att:mud.h:			      && IS_SET(ch->pcdata->flags, PCFLAG_UNAUTHED) )
att:mud.h.backup:#define WAIT_STATE(ch, npulse) ((ch)->wait=(!IS_NPC(ch)&&ch->pcdata->nuisance&&\
att:mud.h.backup:			      (ch->pcdata->nuisance->flags>4))?UMAX((ch)->wait,\
att:mud.h.backup:               		      ch->pcdata->nuisance->power)): \
att:mud.h.backup:#define IS_RETIRED(ch) (ch->pcdata && IS_SET(ch->pcdata->flags,PCFLAG_RETIRED))
att:mud.h.backup:#define IS_GUEST(ch) (ch->pcdata && IS_SET(ch->pcdata->flags,PCFLAG_GUEST))
att:mud.h.backup:#define NOT_AUTHED(ch)		(!IS_NPC(ch) && ch->pcdata->auth_state <= 3  \
att:mud.h.backup:			      && IS_SET(ch->pcdata->flags, PCFLAG_UNAUTHED) )
att:mud.h.backup:			      && ch->pcdata->auth_state == 1		     \
att:mud.h.backup:			      && IS_SET(ch->pcdata->flags, PCFLAG_UNAUTHED) )
att:mud_comm.c:               drunk = vch->pcdata->condition[COND_DRUNK];
att:mud_comm.c:               vch->pcdata->condition[COND_DRUNK] = 0;
att:mud_comm.c:               vch->pcdata->condition[COND_DRUNK] = drunk;
att:mud_comm.c:   if( !ch->pcdata->nuisance )
att:mud_comm.c.backup:               drunk = vch->pcdata->condition[COND_DRUNK];
att:mud_comm.c.backup:               vch->pcdata->condition[COND_DRUNK] = 0;
att:mud_comm.c.backup:               vch->pcdata->condition[COND_DRUNK] = drunk;
att:mud_comm.c.backup:   if( !ch->pcdata->nuisance )
att:player.c:   pager_printf( ch, "\r\nWorth for %s%s.\r\n", ch->name, ch->pcdata->title );
att:player.c:   if( !ch->pcdata->deity )
att:player.c:   else if( ch->pcdata->favor > 2250 )
att:player.c:   else if( ch->pcdata->favor > 2000 )
att:player.c:   else if( ch->pcdata->favor > 1750 )
att:player.c:   else if( ch->pcdata->favor > 1500 )
att:player.c:   else if( ch->pcdata->favor > 1250 )
att:player.c:   else if( ch->pcdata->favor > 1000 )
att:player.c:   else if( ch->pcdata->favor > 750 )
att:player.c:   else if( ch->pcdata->favor > 250 )
att:player.c:   else if( ch->pcdata->favor > -250 )
att:player.c:   else if( ch->pcdata->favor > -750 )
att:player.c:   else if( ch->pcdata->favor > -1000 )
att:player.c:   else if( ch->pcdata->favor > -1250 )
att:player.c:   else if( ch->pcdata->favor > -1500 )
att:player.c:   else if( ch->pcdata->favor > -1750 )
att:player.c:   else if( ch->pcdata->favor > -2000 )
att:player.c:   else if( ch->pcdata->favor > -2250 )
att:player.c:                 ch->pcdata->quest_curr, ch->carry_weight, buf, num_punct( ch->gold ) );
att:player.c:   if( !ch->pcdata->deity )
att:player.c:   if( ch->pcdata->favor < ch->level * 2 )
att:player.c:   pager_printf( ch, "%s appears in a vision, revealing that your remains... ", ch->pcdata->deity->name );
att:player.c:      ch->pcdata->favor -= ch->level * 2;
att:player.c:   STRFREE( ch->pcdata->title );
att:player.c:   ch->pcdata->title = STRALLOC( buf );
att:player.c:   if( IS_SET( ch->pcdata->flags, PCFLAG_NOTITLE ) )
att:player.c:   if( IS_SET( ch->pcdata->flags, PCFLAG_NOCPOSE ) )
att:player.c:      if( !ch->pcdata->cpose )
att:player.c:         ch->pcdata->cpose = str_dup( "" );
att:player.c:      ch_printf( ch, "Your cpose is: %s\r\n", show_tilde( ch->pcdata->cpose ) );
att:player.c:      if( ch->pcdata->cpose )
att:player.c:         DISPOSE( ch->pcdata->cpose );
att:player.c:      ch->pcdata->cpose = str_dup( "" );
att:player.c:   if( ch->pcdata->cpose )
att:player.c:      DISPOSE( ch->pcdata->cpose );
att:player.c:   ch->pcdata->cpose = str_dup( buf );
att:player.c:   if( IS_SET( ch->pcdata->flags, PCFLAG_NODESC ) )
att:player.c:   if( IS_SET( ch->pcdata->flags, PCFLAG_NOBIO ) )
att:player.c:         start_editing( ch, ch->pcdata->bio );
att:player.c:         STRFREE( ch->pcdata->bio );
att:player.c:         ch->pcdata->bio = copy_buffer( ch );
att:player.c:                 ch->hit, ch->max_hit, ch->pcdata->condition[COND_BLOODTHIRST],
att:player.c:                ch->hit, ch->max_hit, ch->pcdata->condition[COND_BLOODTHIRST],
att:player.c:                 ch->hit, ch->max_hit, ch->pcdata->condition[COND_BLOODTHIRST],
att:player.c:                 ch->pcdata->condition[COND_BLOODTHIRST], 10 + ch->level, ch->move, ch->max_move, ch->exp );
att:player.c:                ch->pcdata->condition[COND_BLOODTHIRST], 10 + ch->level, ch->move, ch->max_move, ch->exp );
att:player.c:      ch_printf( ch, "%s\r\n", !str_cmp( ch->pcdata->fprompt, "" ) ? "(default prompt)" : ch->pcdata->fprompt );
att:player.c:   ch_printf( ch, "%s\r\n", !str_cmp( ch->pcdata->fprompt, "" ) ? "(default prompt)" : ch->pcdata->fprompt );
att:player.c:   if( ch->pcdata->fprompt )
att:player.c:      STRFREE( ch->pcdata->fprompt );
att:player.c:      ch->pcdata->fprompt = STRALLOC( "" );
att:player.c:      ch->pcdata->fprompt = STRALLOC( ch->pcdata->prompt );
att:player.c:      ch->pcdata->fprompt = STRALLOC( argument );
att:player.c:      ch_printf( ch, "%s\r\n", !str_cmp( ch->pcdata->prompt, "" ) ? "(default prompt)" : ch->pcdata->prompt );
att:player.c:   ch_printf( ch, "%s\r\n", !str_cmp( ch->pcdata->prompt, "" ) ? "(default prompt)" : ch->pcdata->prompt );
att:player.c:   if( ch->pcdata->prompt )
att:player.c:      STRFREE( ch->pcdata->prompt );
att:player.c:      ch->pcdata->prompt = STRALLOC( "" );
att:player.c:      ch->pcdata->prompt = STRALLOC( ch->pcdata->fprompt );
att:player.c:      ch->pcdata->prompt = STRALLOC( argument );
att:player.c:   if( !ch->pcdata->deity )
att:player.c:   else if( ch->pcdata->favor > 2250 )
att:player.c:   else if( ch->pcdata->favor > 2000 )
att:player.c:   else if( ch->pcdata->favor > 1750 )
att:player.c:   else if( ch->pcdata->favor > 1500 )
att:player.c:   else if( ch->pcdata->favor > 1250 )
att:player.c:   else if( ch->pcdata->favor > 1000 )
att:player.c:   else if( ch->pcdata->favor > 750 )
att:player.c:   else if( ch->pcdata->favor > 250 )
att:player.c:   else if( ch->pcdata->favor > -250 )
att:player.c:   else if( ch->pcdata->favor > -750 )
att:player.c:   else if( ch->pcdata->favor > -1000 )
att:player.c:   else if( ch->pcdata->favor > -1250 )
att:player.c:   else if( ch->pcdata->favor > -1500 )
att:player.c:   else if( ch->pcdata->favor > -1750 )
att:player.c:   else if( ch->pcdata->favor > -2000 )
att:player.c:   else if( ch->pcdata->favor > -2250 )
att:player.c:   ch_printf( ch, "%s considers you to be %s.\n\r", ch->pcdata->deity->name, buf );
att:polymorph.c:   if( morph->deity && ( !ch->pcdata->deity || !get_deity( morph->deity ) ) )
att:polymorph.c:         STRFREE( ch->pcdata->subprompt );
att:polymorph.c:      STRFREE( ch->pcdata->subprompt );
att:polymorph.c:      ch->pcdata->subprompt = STRALLOC( buf );
att:polymorph.c:      if( IS_NPC( ch ) || !ch->pcdata->deity || ch->pcdata->favor < morph->favourused )
att:polymorph.c:         ch->pcdata->favor -= morph->favourused;
att:renumber.c:      if( area->low_r_vnum < ch->pcdata->r_range_lo || area->hi_r_vnum > ch->pcdata->r_range_hi ||
att:renumber.c:          area->low_m_vnum < ch->pcdata->m_range_lo || area->hi_m_vnum > ch->pcdata->m_range_hi ||
att:renumber.c:          area->low_o_vnum < ch->pcdata->o_range_lo || area->hi_o_vnum > ch->pcdata->o_range_hi )
att:renumber.c:      if( r_area->low_room < ch->pcdata->r_range_lo || r_area->hi_room > ch->pcdata->r_range_hi ||
att:renumber.c:          r_area->low_obj < ch->pcdata->o_range_lo || r_area->hi_obj > ch->pcdata->o_range_hi ||
att:renumber.c:          r_area->low_mob < ch->pcdata->m_range_lo || r_area->hi_mob > ch->pcdata->m_range_hi )
att:reset.c:   if( IS_NPC( ch ) || get_trust( ch ) < LEVEL_SAVIOR || !ch->pcdata->area )
att:reset.c:   if( ch->in_room->area != ch->pcdata->area && get_trust( ch ) < LEVEL_GREATER )
att:reset.c:   if( IS_NPC( ch ) || get_trust( ch ) < LEVEL_SAVIOR || !ch->pcdata->area )
att:reset.c:   pArea = ch->pcdata->area;
att:save.c:   ch->pcdata->day = ( number_range( 1, sysdata.dayspermonth ) - 1 );   /* Assign random day of birth */
att:save.c:   ch->pcdata->month = ( number_range( 1, sysdata.monthsperyear ) - 1 );   /* Assign random month of birth */
att:save.c:   ch->pcdata->year = time_info.year - age;  /* Assign birth year based on calculations above */
att:save.c:   snprintf( strsave, MAX_INPUT_LENGTH, "%s%c/%s", PLAYER_DIR, tolower( ch->pcdata->filename[0] ),
att:save.c:             capitalize( ch->pcdata->filename ) );
att:save.c:      snprintf( strback, MAX_INPUT_LENGTH, "%s%c/%s", BACKUP_DIR, tolower( ch->pcdata->filename[0] ),
att:save.c:                capitalize( ch->pcdata->filename ) );
att:save.c:   if( ch->level >= LEVEL_IMMORTAL || IS_SET( ch->pcdata->flags, PCFLAG_RETIRED ) )
att:save.c:      snprintf( strback, MAX_INPUT_LENGTH, "%s%s", GOD_DIR, capitalize( ch->pcdata->filename ) );
att:save.c:         fprintf( fp, "Pcflags      %d\n", ch->pcdata->flags );
att:save.c:         if( ch->pcdata->r_range_lo && ch->pcdata->r_range_hi )
att:save.c:            fprintf( fp, "RoomRange    %d %d\n", ch->pcdata->r_range_lo, ch->pcdata->r_range_hi );
att:save.c:         if( ch->pcdata->o_range_lo && ch->pcdata->o_range_hi )
att:save.c:            fprintf( fp, "ObjRange     %d %d\n", ch->pcdata->o_range_lo, ch->pcdata->o_range_hi );
att:save.c:         if( ch->pcdata->m_range_lo && ch->pcdata->m_range_hi )
att:save.c:            fprintf( fp, "MobRange     %d %d\n", ch->pcdata->m_range_lo, ch->pcdata->m_range_hi );
att:save.c:         fwrite_obj( ch, ch->last_carrying, fp, 0, OS_CARRY, ch->pcdata->hotboot );
att:save.c:      if( sysdata.save_pets && ch->pcdata->pet )
att:save.c:         fwrite_mobile( fp, ch->pcdata->pet );
att:save.c:            ch->pcdata->age_bonus, ch->pcdata->day, ch->pcdata->month, ch->pcdata->year );
att:save.c:   fprintf( fp, "Str          %d\n", ch->pcdata->str );
att:save.c:   fprintf( fp, "Intel          %d\n", ch->pcdata->intel );
att:save.c:   fprintf( fp, "Dex         %d\n", ch->pcdata->dex );
att:save.c:   fprintf( fp, "Lck          %d\n", ch->pcdata->lck );
att:save.c:   fprintf( fp, "Att          %d\n", ch->pcdata->att );
att:save.c:   fprintf( fp, "Def          %d\n", ch->pcdata->def );
att:save.c:   fprintf( fp, "Matt          %d\n", ch->pcdata->matt );
att:save.c:   fprintf( fp, "Mdef          %d\n", ch->pcdata->mdef );
att:save.c:   fprintf( fp, "strplus          %d\n", ch->pcdata->strplus );
att:save.c:   fprintf( fp, "intplus          %d\n", ch->pcdata->intplus );
att:save.c:   fprintf( fp, "dexplus          %d\n", ch->pcdata->dexplus );
att:save.c:   fprintf( fp, "lckplus          %d\n", ch->pcdata->lckplus );
att:save.c:   fprintf( fp, "attplus          %d\n", ch->pcdata->attplus );
att:save.c:   fprintf( fp, "defplus          %d\n", ch->pcdata->defplus );
att:save.c:   fprintf( fp, "mattplus          %d\n", ch->pcdata->mattplus );
att:save.c:   fprintf( fp, "mdefplus          %d\n", ch->pcdata->mdefplus );
att:save.c:   fprintf( fp, "mlevel          %d\n", ch->pcdata->mlevel );
att:save.c:   fprintf( fp, "deflevel          %d\n", ch->pcdata->deflevel );
att:save.c:   fprintf( fp, "attlevel          %d\n", ch->pcdata->attlevel );
att:save.c:   fprintf( fp, "Favor        %d\n", ch->pcdata->favor );
att:save.c:   fprintf( fp, "Balance      %d\n", ch->pcdata->balance );
att:save.c:   fprintf( fp, "Glory        %d\n", ch->pcdata->quest_curr );
att:save.c:   fprintf( fp, "MGlory       %d\n", ch->pcdata->quest_accum );
att:save.c:   fprintf( fp, "Ap        %d\n", ch->pcdata->ap );   
att:save.c:   fprintf( fp, "Tier        %d\n", ch->pcdata->tier );   
att:save.c:   if( ch->pcdata && ch->pcdata->outcast_time )
att:save.c:      fprintf( fp, "Outcast_time %ld\n", ch->pcdata->outcast_time );
att:save.c:   if( ch->pcdata && ch->pcdata->nuisance )
att:save.c:      fprintf( fp, "NuisanceNew %ld %ld %d %d\n", ch->pcdata->nuisance->set_time,
att:save.c:               ch->pcdata->nuisance->max_time, ch->pcdata->nuisance->flags, ch->pcdata->nuisance->power );
att:save.c:   fprintf( fp, "Password     %s~\n", ch->pcdata->pwd );
att:save.c:   if( ch->pcdata->rank && ch->pcdata->rank[0] != '\0' )
att:save.c:      fprintf( fp, "Rank         %s~\n", ch->pcdata->rank );
att:save.c:   if( ch->pcdata->bestowments && ch->pcdata->bestowments[0] != '\0' )
att:save.c:      fprintf( fp, "Bestowments  %s~\n", ch->pcdata->bestowments );
att:save.c:   fprintf( fp, "Title        %s~\n", ch->pcdata->title );
att:save.c:   fprintf( fp, "Cpose        %s~\n", ch->pcdata->cpose );
att:save.c:   fprintf( fp, "Hometown        %s~\n", ch->pcdata->hometown );
att:save.c:   fprintf( fp, "Customclass        %s~\n", ch->pcdata->customclass );
att:save.c:   if( ch->pcdata->homepage && ch->pcdata->homepage[0] != '\0' )
att:save.c:      fprintf( fp, "Homepage     %s~\n", ch->pcdata->homepage );
att:save.c:   if( ch->pcdata->bio && ch->pcdata->bio[0] != '\0' )
att:save.c:      fprintf( fp, "Bio          %s~\n", ch->pcdata->bio );
att:save.c:   if( ch->pcdata->authed_by && ch->pcdata->authed_by[0] != '\0' )
att:save.c:      fprintf( fp, "AuthedBy     %s~\n", ch->pcdata->authed_by );
att:save.c:   if( ch->pcdata->min_snoop )
att:save.c:      fprintf( fp, "Minsnoop     %d\n", ch->pcdata->min_snoop );
att:save.c:   if( ch->pcdata->prompt && *ch->pcdata->prompt )
att:save.c:      fprintf( fp, "Prompt       %s~\n", ch->pcdata->prompt );
att:save.c:   if( ch->pcdata->fprompt && *ch->pcdata->fprompt )
att:save.c:      fprintf( fp, "FPrompt	     %s~\n", ch->pcdata->fprompt );
att:save.c:   if( ch->pcdata->pagerlen != 24 )
att:save.c:      fprintf( fp, "Pagerlen     %d\n", ch->pcdata->pagerlen );
att:save.c:      for( temp = ch->pcdata->first_ignored; temp; temp = temp->next )
att:save.c:      if( ch->pcdata->bamfin && ch->pcdata->bamfin[0] != '\0' )
att:save.c:         fprintf( fp, "Bamfin       %s~\n", ch->pcdata->bamfin );
att:save.c:      if( ch->pcdata->bamfout && ch->pcdata->bamfout[0] != '\0' )
att:save.c:         fprintf( fp, "Bamfout      %s~\n", ch->pcdata->bamfout );
att:save.c:      if( ch->pcdata && ch->pcdata->restore_time )
att:save.c:         fprintf( fp, "Restore_time %ld\n", ch->pcdata->restore_time );
att:save.c:      fprintf( fp, "WizInvis     %d\n", ch->pcdata->wizinvis );
att:save.c:      if( ch->pcdata->r_range_lo && ch->pcdata->r_range_hi )
att:save.c:         fprintf( fp, "RoomRange    %d %d\n", ch->pcdata->r_range_lo, ch->pcdata->r_range_hi );
att:save.c:      if( ch->pcdata->o_range_lo && ch->pcdata->o_range_hi )
att:save.c:         fprintf( fp, "ObjRange     %d %d\n", ch->pcdata->o_range_lo, ch->pcdata->o_range_hi );
att:save.c:      if( ch->pcdata->m_range_lo && ch->pcdata->m_range_hi )
att:save.c:         fprintf( fp, "MobRange     %d %d\n", ch->pcdata->m_range_lo, ch->pcdata->m_range_hi );
att:save.c:   if( ch->pcdata->council )
att:save.c:      fprintf( fp, "Council      %s~\n", ch->pcdata->council_name );
att:save.c:   if( ch->pcdata->deity_name && ch->pcdata->deity_name[0] != '\0' )
att:save.c:      fprintf( fp, "Deity	     %s~\n", ch->pcdata->deity_name );
att:save.c:   if( ch->pcdata->clan_name && ch->pcdata->clan_name[0] != '\0' )
att:save.c:      fprintf( fp, "Clan         %s~\n", ch->pcdata->clan_name );
att:save.c:   fprintf( fp, "Flags        %d\n", ch->pcdata->flags );
att:save.c:   if( ch->pcdata->release_date )
att:save.c:      fprintf( fp, "Helled       %d %s~\n", ( int )ch->pcdata->release_date, ch->pcdata->helled_by );
att:save.c:   fprintf( fp, "PKills       %d\n", ch->pcdata->pkills );
att:save.c:   fprintf( fp, "PDeaths      %d\n", ch->pcdata->pdeaths );
att:save.c:   fprintf( fp, "MKills       %d\n", ch->pcdata->mkills );
att:save.c:   fprintf( fp, "MDeaths      %d\n", ch->pcdata->mdeaths );
att:save.c:   fprintf( fp, "IllegalPK    %d\n", ch->pcdata->illegal_pk );
att:save.c:   fprintf( fp, "Timezone     %d\n", ch->pcdata->timezone );
att:save.c:            ch->pcdata->condition[0], ch->pcdata->condition[1], ch->pcdata->condition[2], ch->pcdata->condition[3] );
att:save.c:   if( ch->pcdata->recent_site )
att:save.c:      fprintf( fp, "Site         %s\n", ch->pcdata->recent_site );
att:save.c:      if( skill_table[sn]->name && ch->pcdata->learned[sn] > 0 )
att:save.c:               fprintf( fp, "Skill        %d '%s'\n", ch->pcdata->learned[sn], skill_table[sn]->name );
att:save.c:               fprintf( fp, "Ability      %d '%s'\n", ch->pcdata->learned[sn], skill_table[sn]->name );
att:save.c:               fprintf( fp, "Spell        %d '%s'\n", ch->pcdata->learned[sn], skill_table[sn]->name );
att:save.c:               fprintf( fp, "Weapon       %d '%s'\n", ch->pcdata->learned[sn], skill_table[sn]->name );
att:save.c:               fprintf( fp, "Tongue       %d '%s'\n", ch->pcdata->learned[sn], skill_table[sn]->name );
att:save.c:      if( ch->pcdata->killed[sn].vnum == 0 )
att:save.c:      fprintf( fp, "Killed       %d %d\n", ch->pcdata->killed[sn].vnum, ch->pcdata->killed[sn].count );
att:save.c:   ch->pcdata->filename = STRALLOC( name );
att:save.c:      ch->pcdata->recent_site = STRALLOC( d->host );
att:save.c:   ch->pcdata->condition[COND_THIRST] = 48;
att:save.c:   ch->pcdata->condition[COND_FULL] = 48;
att:save.c:   ch->pcdata->condition[COND_BLOODTHIRST] = 10;
att:save.c:   ch->pcdata->nuisance = NULL;
att:save.c:   ch->pcdata->wizinvis = 0;
att:save.c:   ch->pcdata->balance = 0;
att:save.c:   ch->pcdata->charmies = 0;
att:save.c:      ch->pcdata->learned[i] = 0;
att:save.c:   ch->pcdata->release_date = 0;
att:save.c:   ch->pcdata->helled_by = NULL;
att:save.c:   ch->pcdata->pagerlen = 24;
att:save.c:   ch->pcdata->first_ignored = NULL;   /* Ignore list */
att:save.c:   ch->pcdata->last_ignored = NULL;
att:save.c:   ch->pcdata->tell_history = NULL; /* imm only lasttell cmnd */
att:save.c:   ch->pcdata->lt_index = 0;  /* last tell index */
att:save.c:   ch->pcdata->hotboot = FALSE;  /* Never changed except when PC is saved during hotboot save */
att:save.c:                          preload ? "Preloading" : "Loading", ch->pcdata->filename, ( int )fst.st_size / 1024 );
att:save.c:               ch->pcdata->pet = mob;
att:save.c:      ch->pcdata->clan_name = STRALLOC( "" );
att:save.c:      ch->pcdata->clan = NULL;
att:save.c:      ch->pcdata->council_name = STRALLOC( "" );
att:save.c:      ch->pcdata->council = NULL;
att:save.c:      ch->pcdata->deity_name = STRALLOC( "" );
att:save.c:      ch->pcdata->deity = NULL;
att:save.c:      ch->pcdata->pet = NULL;
att:save.c:      ch->pcdata->pwd = str_dup( "" );
att:save.c:      ch->pcdata->bamfin = str_dup( "" );
att:save.c:      ch->pcdata->bamfout = str_dup( "" );
att:save.c:      ch->pcdata->rank = str_dup( "" );
att:save.c:      ch->pcdata->bestowments = str_dup( "" );
att:save.c:      ch->pcdata->title = STRALLOC( "" );
att:save.c:      ch->pcdata->customclass = STRALLOC( "" );
att:save.c:      ch->pcdata->homepage = str_dup( "" );
att:save.c:      ch->pcdata->bio = STRALLOC( "" );
att:save.c:      ch->pcdata->authed_by = STRALLOC( "" );
att:save.c:      ch->pcdata->prompt = STRALLOC( "" );
att:save.c:      ch->pcdata->fprompt = STRALLOC( "" );
att:save.c:      ch->pcdata->r_range_lo = 0;
att:save.c:      ch->pcdata->r_range_hi = 0;
att:save.c:      ch->pcdata->m_range_lo = 0;
att:save.c:      ch->pcdata->m_range_hi = 0;
att:save.c:      ch->pcdata->o_range_lo = 0;
att:save.c:      ch->pcdata->o_range_hi = 0;
att:save.c:      ch->pcdata->wizinvis = 0;
att:save.c:      ch->pcdata->timezone = -1;
att:save.c:      if( !ch->pcdata->clan_name )
att:save.c:         ch->pcdata->clan_name = STRALLOC( "" );
att:save.c:         ch->pcdata->clan = NULL;
att:save.c:      if( !ch->pcdata->council_name )
att:save.c:         ch->pcdata->council_name = STRALLOC( "" );
att:save.c:         ch->pcdata->council = NULL;
att:save.c:      if( !ch->pcdata->deity_name )
att:save.c:         ch->pcdata->deity_name = STRALLOC( "" );
att:save.c:         ch->pcdata->deity = NULL;
att:save.c:      if( !ch->pcdata->bio )
att:save.c:         ch->pcdata->bio = STRALLOC( "" );
att:save.c:      if( !ch->pcdata->authed_by )
att:save.c:         ch->pcdata->authed_by = STRALLOC( "" );
att:save.c:         if( ch->pcdata->wizinvis < 2 )
att:save.c:            ch->pcdata->wizinvis = ch->level;
att:save.c:                     KEY( "Att", ch->pcdata->att, fread_number( fp ) );
att:save.c:                     KEY( "Attplus", ch->pcdata->attplus, fread_number( fp ) );
att:save.c:                     KEY( "Attlevel", ch->pcdata->attlevel, fread_number( fp ) );
att:save.c:                     ch->pcdata->learned[sn] = value;
att:save.c:                           ch->pcdata->learned[sn] = 0;
att:save.c:                  ch->pcdata->age_bonus = x1;
att:save.c:                  ch->pcdata->day = x2;
att:save.c:                  ch->pcdata->month = x3;
att:save.c:                  ch->pcdata->year = x4;
att:save.c:            KEY( "Ap", ch->pcdata->ap, fread_number( fp ) );
att:save.c:            KEY( "AuthedBy", ch->pcdata->authed_by, fread_string( fp ) );
att:save.c:            KEY( "Balance", ch->pcdata->balance, fread_number( fp ) );
att:save.c:            KEY( "Bamfin", ch->pcdata->bamfin, fread_string_nohash( fp ) );
att:save.c:            KEY( "Bamfout", ch->pcdata->bamfout, fread_string_nohash( fp ) );
att:save.c:            KEY( "Bestowments", ch->pcdata->bestowments, fread_string_nohash( fp ) );
att:save.c:            KEY( "Bio", ch->pcdata->bio, fread_string( fp ) );
att:save.c:               ch->pcdata->clan_name = fread_string( fp );
att:save.c:                   && ch->pcdata->clan_name[0] != '\0' && ( ch->pcdata->clan = get_clan( ch->pcdata->clan_name ) ) == NULL )
att:save.c:                     ch->pcdata->clan_name );
att:save.c:                  STRFREE( ch->pcdata->clan_name );
att:save.c:                  ch->pcdata->clan_name = STRALLOC( "" );
att:save.c:            KEY( "Customclass", ch->pcdata->customclass, fread_string( fp ) );
att:save.c:               ch->pcdata->condition[0] = x1;
att:save.c:               ch->pcdata->condition[1] = x2;
att:save.c:               ch->pcdata->condition[2] = x3;
att:save.c:               ch->pcdata->condition[3] = x4;
att:save.c:               ch->pcdata->council_name = fread_string( fp );
att:save.c:                   && ch->pcdata->council_name[0] != '\0'
att:save.c:                   && ( ch->pcdata->council = get_council( ch->pcdata->council_name ) ) == NULL )
att:save.c:                     ch->pcdata->council_name );
att:save.c:                  STRFREE( ch->pcdata->council_name );
att:save.c:                  ch->pcdata->council_name = STRALLOC( "" );
att:save.c:               ch->pcdata->cpose = fread_string( fp );
att:save.c:               if( isalpha( ch->pcdata->cpose[0] ) || isdigit( ch->pcdata->cpose[0] ) )
att:save.c:                  snprintf( buf, MAX_STRING_LENGTH, " %s", ch->pcdata->cpose );
att:save.c:                  if( ch->pcdata->cpose )
att:save.c:                     STRFREE( ch->pcdata->cpose );
att:save.c:                  ch->pcdata->cpose = STRALLOC( buf );
att:save.c:                     KEY( "Dex", ch->pcdata->dex, fread_number( fp ) );
att:save.c:                     KEY( "Def", ch->pcdata->def, fread_number( fp ) );
att:save.c:                     KEY( "Dexplus", ch->pcdata->dexplus, fread_number( fp ) );
att:save.c:                     KEY( "Defplus", ch->pcdata->defplus, fread_number( fp ) );
att:save.c:                     KEY( "Deflevel", ch->pcdata->deflevel, fread_number( fp ) );
att:save.c:               ch->pcdata->deity_name = fread_string( fp );
att:save.c:                   && ch->pcdata->deity_name[0] != '\0'
att:save.c:                   && ( ch->pcdata->deity = get_deity( ch->pcdata->deity_name ) ) == NULL )
att:save.c:                  snprintf( buf, MAX_STRING_LENGTH, "&R\r\nYour deity, %s, has met its demise!\r\n", ch->pcdata->deity_name );
att:save.c:                  STRFREE( ch->pcdata->deity_name );
att:save.c:                  ch->pcdata->deity_name = STRALLOC( "" );
att:save.c:                  ch->pcdata->favor = 0;
att:save.c:            KEY( "Favor", ch->pcdata->favor, fread_number( fp ) );
att:save.c:            KEY( "Flags", ch->pcdata->flags, fread_number( fp ) );
att:save.c:            KEY( "FPrompt", ch->pcdata->fprompt, fread_string( fp ) );
att:save.c:            KEY( "Glory", ch->pcdata->quest_curr, fread_number( fp ) );
att:save.c:               ch->pcdata->clan_name = fread_string( fp );
att:save.c:                   && ch->pcdata->clan_name[0] != '\0' && ( ch->pcdata->clan = get_clan( ch->pcdata->clan_name ) ) == NULL )
att:save.c:                     ch->pcdata->clan_name );
att:save.c:                  STRFREE( ch->pcdata->clan_name );
att:save.c:                  ch->pcdata->clan_name = STRALLOC( "" );
att:save.c:               ch->pcdata->release_date = fread_number( fp );
att:save.c:               ch->pcdata->helled_by = fread_string( fp );
att:save.c:            KEY( "Homepage", ch->pcdata->homepage, fread_string_nohash( fp ) );
att:save.c:               ch->pcdata->hometown = fread_string( fp );
att:save.c:               if( isalpha( ch->pcdata->hometown[0] ) || isdigit( ch->pcdata->hometown[0] ) )
att:save.c:                  snprintf( buf, MAX_STRING_LENGTH, " %s", ch->pcdata->hometown );
att:save.c:                  if( ch->pcdata->hometown )
att:save.c:                     STRFREE( ch->pcdata->hometown );
att:save.c:                  ch->pcdata->hometown = STRALLOC( buf );
att:save.c:               for( ign = 0, inode = ch->pcdata->first_ignored; inode; inode = inode->next )
att:save.c:                  LINK( inode, ch->pcdata->first_ignored, ch->pcdata->last_ignored, next, prev );
att:save.c:            KEY( "IllegalPK", ch->pcdata->illegal_pk, fread_number( fp ) );
att:save.c:                   KEY( "Intel", ch->pcdata->intel, fread_number( fp ) );
att:save.c:                   KEY( "Intplus", ch->pcdata->intplus, fread_number( fp ) );
att:save.c:                  ch->pcdata->killed[killcnt].vnum = fread_number( fp );
att:save.c:                  ch->pcdata->killed[killcnt++].count = fread_number( fp );
att:save.c:                     KEY( "Lck", ch->pcdata->lck, fread_number( fp ) );
att:save.c:                     KEY( "Lckplus", ch->pcdata->lckplus, fread_number( fp ) );
att:save.c:                   KEY( "Matt", ch->pcdata->matt, fread_number( fp ) );
att:save.c:                   KEY( "Mdef", ch->pcdata->mdef, fread_number( fp ) );
att:save.c:                   KEY( "Mattplus", ch->pcdata->mattplus, fread_number( fp ) );
att:save.c:                   KEY( "Mdefplus", ch->pcdata->mdefplus, fread_number( fp ) );
att:save.c:                   KEY( "Mlevel", ch->pcdata->mlevel, fread_number( fp ) );
att:save.c:            KEY( "MDeaths", ch->pcdata->mdeaths, fread_number( fp ) );
att:save.c:            KEY( "MGlory", ch->pcdata->quest_accum, fread_number( fp ) );
att:save.c:            KEY( "Minsnoop", ch->pcdata->min_snoop, fread_number( fp ) );
att:save.c:            KEY( "MKills", ch->pcdata->mkills, fread_number( fp ) );
att:save.c:               ch->pcdata->m_range_lo = fread_number( fp );
att:save.c:               ch->pcdata->m_range_hi = fread_number( fp );
att:save.c:               CREATE( ch->pcdata->nuisance, NUISANCE_DATA, 1 );
att:save.c:               ch->pcdata->nuisance->set_time = fread_number( fp );
att:save.c:               ch->pcdata->nuisance->max_time = fread_number( fp );
att:save.c:               ch->pcdata->nuisance->flags = fread_number( fp );
att:save.c:               ch->pcdata->nuisance->power = 1;
att:save.c:               CREATE( ch->pcdata->nuisance, NUISANCE_DATA, 1 );
att:save.c:               ch->pcdata->nuisance->set_time = fread_number( fp );
att:save.c:               ch->pcdata->nuisance->max_time = fread_number( fp );
att:save.c:               ch->pcdata->nuisance->flags = fread_number( fp );
att:save.c:               ch->pcdata->nuisance->power = fread_number( fp );
att:save.c:            KEY( "Outcast_time", ch->pcdata->outcast_time, fread_number( fp ) );
att:save.c:               ch->pcdata->o_range_lo = fread_number( fp );
att:save.c:               ch->pcdata->o_range_hi = fread_number( fp );
att:save.c:            KEY( "Pagerlen", ch->pcdata->pagerlen, fread_number( fp ) );
att:save.c:            KEY( "Password", ch->pcdata->pwd, fread_string_nohash( fp ) );
att:save.c:            KEY( "PDeaths", ch->pcdata->pdeaths, fread_number( fp ) );
att:save.c:            KEY( "PKills", ch->pcdata->pkills, fread_number( fp ) );
att:save.c:            KEY( "Prompt", ch->pcdata->prompt, fread_string( fp ) );
att:save.c:            KEY( "Rank", ch->pcdata->rank, fread_string_nohash( fp ) );
att:save.c:            KEY( "Restore_time", ch->pcdata->restore_time, fread_number( fp ) );
att:save.c:               ch->pcdata->r_range_lo = fread_number( fp );
att:save.c:               ch->pcdata->r_range_hi = fread_number( fp );
att:save.c:                   KEY( "Str", ch->pcdata->str, fread_number( fp ) );
att:save.c:                   KEY( "Strplus", ch->pcdata->strplus, fread_number( fp ) );
att:save.c:                  ch->pcdata->prev_site = STRALLOC( fread_word( fp ) );
att:save.c:                  ch_printf( ch, "Last connected from: %s\r\n", ch->pcdata->prev_site );
att:save.c:                     ch->pcdata->learned[sn] = value;
att:save.c:                           ch->pcdata->learned[sn] = 0;
att:save.c:                     ch->pcdata->learned[sn] = value;
att:save.c:                           ch->pcdata->learned[sn] = 0;
att:save.c:               if( !ch->pcdata->pwd )
att:save.c:                  ch->pcdata->pwd = str_dup( "" );
att:save.c:               if( !ch->pcdata->bamfin )
att:save.c:                  ch->pcdata->bamfin = str_dup( "" );
att:save.c:               if( !ch->pcdata->bamfout )
att:save.c:                  ch->pcdata->bamfout = str_dup( "" );
att:save.c:               if( !ch->pcdata->bio )
att:save.c:                  ch->pcdata->bio = STRALLOC( "" );
att:save.c:               if( !ch->pcdata->rank )
att:save.c:                  ch->pcdata->rank = str_dup( "" );
att:save.c:               if( !ch->pcdata->bestowments )
att:save.c:                  ch->pcdata->bestowments = str_dup( "" );
att:save.c:               if( !ch->pcdata->title )
att:save.c:                  ch->pcdata->title = STRALLOC( "" );
att:save.c:               if( !ch->pcdata->customclass )
att:save.c:                  ch->pcdata->customclass = STRALLOC( "" );
att:save.c:               if( !ch->pcdata->cpose )
att:save.c:                  ch->pcdata->cpose = STRALLOC( "" );
att:save.c:               if( !ch->pcdata->hometown )
att:save.c:                  ch->pcdata->hometown = STRALLOC( "" );
att:save.c:               if( !ch->pcdata->homepage )
att:save.c:                  ch->pcdata->homepage = str_dup( "" );
att:save.c:               if( !ch->pcdata->authed_by )
att:save.c:                  ch->pcdata->authed_by = STRALLOC( "" );
att:save.c:               if( !ch->pcdata->prompt )
att:save.c:                  ch->pcdata->prompt = STRALLOC( "" );
att:save.c:               if( !ch->pcdata->fprompt )
att:save.c:                  ch->pcdata->fprompt = STRALLOC( "" );
att:save.c:                  ch->pcdata->killed[killcnt].vnum = 0;
att:save.c:                  CREATE( ch->pcdata->tell_history, const char *, 26 );
att:save.c:                     ch->pcdata->tell_history[i] = NULL;
att:save.c:               if( !ch->pcdata->prompt )
att:save.c:                  ch->pcdata->prompt = STRALLOC( "" );
att:save.c:               if( ch->pcdata->clan )
att:save.c:                     KEY( "Tier", ch->pcdata->tier, fread_number( fp ) );
att:save.c:                     ch->pcdata->learned[sn] = value;
att:save.c:                           ch->pcdata->learned[sn] = 0;
att:save.c:            KEY( "Timezone", ch->pcdata->timezone, fread_number( fp )); 
att:save.c:               ch->pcdata->title = fread_string( fp );
att:save.c:               if( isalpha( ch->pcdata->title[0] ) || isdigit( ch->pcdata->title[0] ) )
att:save.c:                  snprintf( buf, MAX_STRING_LENGTH, " %s", ch->pcdata->title );
att:save.c:                  if( ch->pcdata->title )
att:save.c:                     STRFREE( ch->pcdata->title );
att:save.c:                  ch->pcdata->title = STRALLOC( buf );
att:save.c:                     ch->pcdata->learned[sn] = value;
att:save.c:                           ch->pcdata->learned[sn] = 0;
att:save.c:            KEY( "WizInvis", ch->pcdata->wizinvis, fread_number( fp ) );
att:save.c:   if( IS_NPC( ch ) || !ch->pcdata->pet )
att:save.c:   mob = ch->pcdata->pet;
att:skills.c:   if( ch->pcdata->clan && ch->pcdata->clan == vch->pcdata->clan )
att:skills.c:         if( ch->pcdata->condition[COND_BLOODTHIRST] < blood )
att:skills.c:         if( ch->pcdata->condition[COND_BLOODTHIRST] < blood )
att:skills.c:   if( IS_NPC( ch ) || ch->pcdata->learned[sn] <= 0 )
att:skills.c:   if( ch->pcdata->learned[sn] < adept )
att:skills.c:      schance = ch->pcdata->learned[sn] + ( 5 * skill_table[sn]->difficulty );
att:skills.c:      ch->pcdata->learned[sn] = UMIN( adept, ch->pcdata->learned[sn] + learn );
att:skills.c:      if( ch->pcdata->learned[sn] == adept ) /* fully learned! */
att:skills.c:   if( IS_NPC( ch ) || ch->pcdata->learned[sn] <= 0 )
att:skills.c:   if( ch->pcdata->learned[sn] < adept )
att:skills.c:      schance = ch->pcdata->learned[sn] + ( 5 * skill_table[sn]->difficulty );
att:skills.c:      ch->pcdata->learned[sn] = UMIN( adept, ch->pcdata->learned[sn] + learn );
att:skills.c:      if( ch->pcdata->learned[sn] == adept ) /* fully learned! */
att:skills.c:   if( IS_NPC( ch ) || ch->pcdata->learned[sn] <= 0 )
att:skills.c:   schance = ch->pcdata->learned[sn] + ( 5 * skill_table[sn]->difficulty );
att:skills.c:   if( ch->pcdata->learned[sn] < ( adept - 1 ) )
att:skills.c:      ch->pcdata->learned[sn] = UMIN( adept, ch->pcdata->learned[sn] + 1 );
att:skills.c:	    (IS_NPC(ch) ? 80 : ch->pcdata->learned[gsn_dig]) )
att:skills.c:   if( ch->pcdata->condition[COND_BLOODTHIRST] < 10 )
att:skills.c:          && ch->fighting && ch->pcdata->condition[COND_BLOODTHIRST] < ( 10 + ch->level ) )
att:skills.c:                               ( 10 + ch->level ) - ch->pcdata->condition[COND_BLOODTHIRST] ) );
att:skills.c:         if( ch->pcdata->condition[COND_FULL] <= 37 )
att:skills.c:          && ch->fighting && ch->pcdata->condition[COND_BLOODTHIRST] < ( 10 + ch->level ) )
att:skills.c:   if( IS_PKILL( ch ) && ch->pcdata->condition[COND_BLOODTHIRST] > 22 )
att:skills.c:   if( !IS_NPC( ch ) && ch->pcdata->clan )
att:skills.c:      location = get_room_index( ch->pcdata->clan->recall );
att:skills.c:   if( !IS_NPC( ch ) && !location && ch->level >= 5 && IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
att:skills.c:   if( !IS_NPC( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_GAG ) )   /* SB */
att:skills.c:   if( !IS_NPC( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_GAG ) )
att:skills.c:   if( !IS_NPC( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_GAG ) )
att:skills.c:   if( !IS_NPC( ch ) && ( ( get_curr_dex( ch ) < 17 ) || ch->pcdata->condition[COND_DRUNK] > 0 ) )
att:skills.c:            || !IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
att:skills.c:   if( skill_table[gsn]->guild == 99 && !IS_NPC( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
att:track.c:   if( !IS_NPC( ch ) && ch->pcdata->learned[gsn_track] <= 0 )
att:update.c:   add_hp = UMAX( 1, add_hp ) + ( ch->pcdata->lck * .3 );
att:update.c:   add_mana = UMAX( 0, add_mana ) + ( (ch->pcdata->lck * .4) + ch->pcdata->intel );
att:update.c:   add_move = UMAX( 10, add_move ) + (( ch->pcdata->lck * .5 ) + ch->pcdata->dex );
att:update.c:   ch->pcdata->str += 1;
att:update.c:   ch->pcdata->intel += 1;
att:update.c:   ch->pcdata->dex += 1;
att:update.c:   ch->pcdata->lck += 1;
att:update.c:   ch->pcdata->def += 1;
att:update.c:   ch->pcdata->mdef += 1;
att:update.c:   ch->pcdata->att += 1;
att:update.c:         if( ch->pcdata->condition[COND_BLOODTHIRST] <= 1 )
att:update.c:         else if( ch->pcdata->condition[COND_BLOODTHIRST] >= ( 8 + ch->level ) )
att:update.c:      if( ch->pcdata->condition[COND_FULL] == 0 )
att:update.c:      if( ch->pcdata->condition[COND_THIRST] == 0 )
att:update.c:      if( ch->pcdata->condition[COND_FULL] == 0 )
att:update.c:      if( ch->pcdata->condition[COND_THIRST] == 0 )
att:update.c:         if( ch->pcdata->condition[COND_BLOODTHIRST] <= 1 )
att:update.c:         else if( ch->pcdata->condition[COND_BLOODTHIRST] >= ( 8 + ch->level ) )
att:update.c:      if( ch->pcdata->condition[COND_FULL] == 0 )
att:update.c:      if( ch->pcdata->condition[COND_THIRST] == 0 )
att:update.c:   condition = ch->pcdata->condition[iCond];
att:update.c:      ch->pcdata->condition[iCond] = URANGE( 0, condition + value, 10 + ch->level );
att:update.c:      ch->pcdata->condition[iCond] = URANGE( 0, condition + value, 48 );
att:update.c:   if( ch->pcdata->condition[iCond] == 0 )
att:update.c:   if( ch->pcdata->condition[iCond] == 1 )
att:update.c:   if( ch->pcdata->condition[iCond] == 2 )
att:update.c:   if( ch->pcdata->condition[iCond] == 3 )
att:update.c:      if( !IS_NPC( ch ) && ch->pcdata->nuisance )
att:update.c:         if( ch->pcdata->nuisance->flags < MAX_NUISANCE_STAGE )
att:update.c:            temp = ch->pcdata->nuisance->max_time - ch->pcdata->nuisance->set_time;
att:update.c:            temp *= ch->pcdata->nuisance->flags;
att:update.c:            temp += ch->pcdata->nuisance->set_time;
att:update.c:               ++ch->pcdata->nuisance->flags;
att:update.c:               SET_BIT( ch->pcdata->flags, PCFLAG_IDLE );
att:update.c:         if( ch->pcdata->condition[COND_DRUNK] > 8 )
att:update.c:            worsen_mental_state( ch, ch->pcdata->condition[COND_DRUNK] / 8 );
att:update.c:         if( ch->pcdata->condition[COND_FULL] > 1 )
att:update.c:         if( ch->pcdata->condition[COND_THIRST] > 1 )
att:update.c:         if( CAN_PKILL( ch ) && ch->pcdata->condition[COND_THIRST] - 9 > 10 )
att:update.c:         if( !IS_NPC( ch ) && ch->pcdata->nuisance )
att:update.c:            value = ( ( 0 - ch->pcdata->nuisance->flags ) * ch->pcdata->nuisance->power );
att:update.c:      if( !IS_NPC( ch ) && !IS_IMMORTAL( ch ) && ch->pcdata->release_date > 0 && ch->pcdata->release_date <= current_time )
att:update.c:         if( ch->pcdata->clan )
att:update.c:            location = get_room_index( ch->pcdata->clan->recall );
att:update.c:         STRFREE( ch->pcdata->helled_by );
att:update.c:         ch->pcdata->helled_by = NULL;
att:update.c:         ch->pcdata->release_date = 0;
att:update.c:   if( IS_NPC( ch ) || ch->pcdata->condition[COND_DRUNK] <= 0 )
att:update.c:   drunk = ch->pcdata->condition[COND_DRUNK];
bank.c:      int total = ch->pcdata->balance + ch->gold;
bank.c:	       ch->pcdata->balance, (ch->pcdata->balance == 1) ? "" : "s");
bank.c:      ch->pcdata->balance += amount;
bank.c:	amount = ch->pcdata->balance;
bank.c:      if (amount > ch->pcdata->balance)
bank.c:      ch->pcdata->balance -= amount;
bank.c:	amount = ch->pcdata->balance;
bank.c:      if (amount > ch->pcdata->balance)
bank.c:      ch->pcdata->balance -= amount;
bank.c:      victim->pcdata->balance += amount;
boards.c:      if( ch->pcdata->clan && !str_cmp( ch->pcdata->clan->name, board->read_group ) )
boards.c:      if( ch->pcdata->council && !str_cmp( ch->pcdata->council->name, board->read_group ) )
boards.c:      if( ch->pcdata->clan && !str_cmp( ch->pcdata->clan->name, board->post_group ) )
boards.c:      if( ch->pcdata->council && !str_cmp( ch->pcdata->council->name, board->post_group ) )
build.c:   if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
build.c:   if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
build.c:   if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
build.c:   if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
build.c:   if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
build.c:      if( !IS_NPC( fch ) && get_trust( ch ) < get_trust( fch ) && IS_SET( fch->pcdata->flags, PCFLAG_DND ) )
build.c:      if( get_trust( ch ) < LEVEL_CREATOR || vnum < 1 || IS_NPC( ch ) || !ch->pcdata->area )
build.c:         if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
build.c:      location = make_room( vnum, ch->pcdata->area );
build.c:    if ( !IS_SET( ch->pcdata->flags, PCFLAG_BUILDWALK ) && !IS_NPC( ch ) )
build.c:         (ch->pcdata && ch->pcdata->bamfout[0] != '\0')
build.c:         ? ch->pcdata->bamfout : "leaves in a swirling mist.", TO_ROOM);
build.c:    if ( !IS_SET( ch->pcdata->flags, PCFLAG_BUILDWALK ) && !IS_NPC( ch ) )
build.c:         (ch->pcdata && ch->pcdata->bamfin[0] != '\0')
build.c:         ? ch->pcdata->bamfin : "appears in a swirling mist.", TO_ROOM);
build.c:         if( ch->pcdata && ch->pcdata->subprompt )
build.c:            STRFREE( ch->pcdata->subprompt );
build.c:            ch->pcdata->subprompt = NULL;
build.c:         if( ch->pcdata->subprompt )
build.c:            STRFREE( ch->pcdata->subprompt );
build.c:         ch->pcdata->subprompt = STRALLOC( buf );
build.c:	victim->pcdata->str = value;
build.c:	victim->pcdata->intel = value;
build.c:	victim->pcdata->dex = value;
build.c:	victim->pcdata->dex = value;
build.c:	victim->pcdata->lck = value;
build.c:      victim->pcdata->ap = value;
build.c:      victim->pcdata->tier = value;
build.c:      DISPOSE( victim->pcdata->pwd );
build.c:      victim->pcdata->pwd = str_dup( pwdnew );
build.c:      DISPOSE( victim->pcdata->rank );
build.c:         victim->pcdata->rank = str_dup( "" );
build.c:         victim->pcdata->rank = str_dup( argument );
build.c:      victim->pcdata->quest_number = value;
build.c:      victim->pcdata->quest_accum = value;
build.c:      victim->pcdata->quest_curr = value;
build.c:      victim->pcdata->favor = value;
build.c:      victim->pcdata->condition[COND_THIRST] = value;
build.c:      victim->pcdata->condition[COND_DRUNK] = value;
build.c:      victim->pcdata->condition[COND_FULL] = value;
build.c:      victim->pcdata->condition[COND_BLOODTHIRST] = value;
build.c:         victim->pcdata->min_snoop = value;
build.c:         if( victim->pcdata->clan == NULL )
build.c:            --victim->pcdata->clan->members;
build.c:            if( victim->pcdata->clan->members < 0 )
build.c:               victim->pcdata->clan->members = 0;
build.c:            remove_roster( victim->pcdata->clan, victim->name );
build.c:            if( !str_cmp( victim->name, victim->pcdata->clan->leader ) )
build.c:               STRFREE( victim->pcdata->clan->leader );
build.c:               victim->pcdata->clan->leader = STRALLOC( "" );
build.c:            if( !str_cmp( victim->name, victim->pcdata->clan->number1 ) )
build.c:               STRFREE( victim->pcdata->clan->number1 );
build.c:               victim->pcdata->clan->number1 = STRALLOC( "" );
build.c:            if( !str_cmp( victim->name, victim->pcdata->clan->number2 ) )
build.c:               STRFREE( victim->pcdata->clan->number2 );
build.c:               victim->pcdata->clan->number2 = STRALLOC( "" );
build.c:            if( !str_cmp( victim->name, victim->pcdata->clan->deity ) )
build.c:               STRFREE( victim->pcdata->clan->deity );
build.c:               victim->pcdata->clan->deity = STRALLOC( "" );
build.c:            save_clan( victim->pcdata->clan );
build.c:         remove_roster( victim->pcdata->clan, victim->name );
build.c:         STRFREE( victim->pcdata->clan_name );
build.c:         victim->pcdata->clan_name = STRALLOC( "" );
build.c:         victim->pcdata->clan = NULL;
build.c:      if( victim->pcdata->clan != NULL && !IS_IMMORTAL( victim ) )
build.c:         --victim->pcdata->clan->members;
build.c:         if( victim->pcdata->clan->members < 0 )
build.c:            victim->pcdata->clan->members = 0;
build.c:         remove_roster( victim->pcdata->clan, victim->name );
build.c:         if( !str_cmp( victim->name, victim->pcdata->clan->leader ) )
build.c:            STRFREE( victim->pcdata->clan->leader );
build.c:            victim->pcdata->clan->leader = STRALLOC( "" );
build.c:         if( !str_cmp( victim->name, victim->pcdata->clan->number1 ) )
build.c:            STRFREE( victim->pcdata->clan->number1 );
build.c:            victim->pcdata->clan->number1 = STRALLOC( "" );
build.c:         if( !str_cmp( victim->name, victim->pcdata->clan->number2 ) )
build.c:            STRFREE( victim->pcdata->clan->number2 );
build.c:            victim->pcdata->clan->number2 = STRALLOC( "" );
build.c:         if( !str_cmp( victim->name, victim->pcdata->clan->deity ) )
build.c:            STRFREE( victim->pcdata->clan->deity );
build.c:            victim->pcdata->clan->deity = STRALLOC( "" );
build.c:         save_clan( victim->pcdata->clan );
build.c:      STRFREE( victim->pcdata->clan_name );
build.c:      victim->pcdata->clan_name = QUICKLINK( clan->name );
build.c:      victim->pcdata->clan = clan;
build.c:         add_roster( victim->pcdata->clan, victim->name, victim->Class, victim->level, victim->pcdata->mkills,
build.c:                     victim->pcdata->mdeaths );
build.c:         ++victim->pcdata->clan->members;
build.c:         save_clan( victim->pcdata->clan );
build.c:         if( victim->pcdata->deity )
build.c:            --victim->pcdata->deity->worshippers;
build.c:            if( victim->pcdata->deity->worshippers < 0 )
build.c:               victim->pcdata->deity->worshippers = 0;
build.c:            save_deity( victim->pcdata->deity );
build.c:         STRFREE( victim->pcdata->deity_name );
build.c:         victim->pcdata->deity = NULL;
build.c:      if( victim->pcdata->deity )
build.c:         --victim->pcdata->deity->worshippers;
build.c:         if( victim->pcdata->deity->worshippers < 0 )
build.c:            victim->pcdata->deity->worshippers = 0;
build.c:         save_deity( victim->pcdata->deity );
build.c:      STRFREE( victim->pcdata->deity_name );
build.c:      victim->pcdata->deity_name = QUICKLINK( deity->name );
build.c:      victim->pcdata->deity = deity;
build.c:         if( victim->pcdata->council )
build.c:            --victim->pcdata->council->members;
build.c:            if( victim->pcdata->council->members < 0 )
build.c:               victim->pcdata->council->members = 0;
build.c:            if( !str_cmp( victim->name, victim->pcdata->council->head ) )
build.c:               STRFREE( victim->pcdata->council->head );
build.c:               victim->pcdata->council->head = STRALLOC( "" );
build.c:            if( victim->pcdata->council->head2 != NULL && !str_cmp( victim->name, victim->pcdata->council->head2 ) )
build.c:               STRFREE( victim->pcdata->council->head2 );
build.c:               victim->pcdata->council->head2 = NULL;
build.c:            save_council( victim->pcdata->council );
build.c:         STRFREE( victim->pcdata->council_name );
build.c:         victim->pcdata->council_name = STRALLOC( "" );
build.c:         victim->pcdata->council = NULL;
build.c:      if( victim->pcdata->council )
build.c:         --victim->pcdata->council->members;
build.c:         if( victim->pcdata->council->members < 0 )
build.c:            victim->pcdata->council->members = 0;
build.c:         if( !str_cmp( victim->name, victim->pcdata->council->head ) )
build.c:            STRFREE( victim->pcdata->council->head );
build.c:            victim->pcdata->council->head = STRALLOC( "" );
build.c:         if( victim->pcdata->council->head2 != NULL && !str_cmp( victim->name, victim->pcdata->council->head2 ) )
build.c:            STRFREE( victim->pcdata->council->head2 );
build.c:            victim->pcdata->council->head2 = NULL;
build.c:         save_council( victim->pcdata->council );
build.c:      STRFREE( victim->pcdata->council_name );
build.c:      victim->pcdata->council_name = QUICKLINK( council->name );
build.c:      victim->pcdata->council = council;
build.c:      if( !victim->pcdata->area )
build.c:      if( !IS_SET( victim->pcdata->area->status, AREA_LOADED ) )
build.c:         SET_BIT( victim->pcdata->area->status, AREA_LOADED );
build.c:         REMOVE_BIT( victim->pcdata->area->status, AREA_LOADED );
build.c:      if( IS_SET( victim->pcdata->flags, PCFLAG_DEADLY ) )
build.c:         REMOVE_BIT( victim->pcdata->flags, PCFLAG_DEADLY );
build.c:         SET_BIT( victim->pcdata->flags, PCFLAG_DEADLY );
build.c:      if( victim->pcdata->clan && !IS_IMMORTAL( victim ) )
build.c:         remove_roster( victim->pcdata->clan, victim->name );
build.c:         if( victim->pcdata->clan->clan_type == CLAN_GUILD )
build.c:               if( skill_table[sn]->guild == victim->pcdata->clan->Class && skill_table[sn]->name != NULL )
build.c:                  victim->pcdata->learned[sn] = 0;
build.c:         --victim->pcdata->clan->members;
build.c:         if( !str_cmp( victim->name, victim->pcdata->clan->leader ) )
build.c:            STRFREE( victim->pcdata->clan->leader );
build.c:            victim->pcdata->clan->leader = STRALLOC( "" );
build.c:         if( !str_cmp( victim->name, victim->pcdata->clan->number1 ) )
build.c:            STRFREE( victim->pcdata->clan->number1 );
build.c:            victim->pcdata->clan->number1 = STRALLOC( "" );
build.c:         if( !str_cmp( victim->name, victim->pcdata->clan->number2 ) )
build.c:            STRFREE( victim->pcdata->clan->number2 );
build.c:            victim->pcdata->clan->number2 = STRALLOC( "" );
build.c:         save_clan( victim->pcdata->clan );
build.c:         STRFREE( victim->pcdata->clan_name );
build.c:         victim->pcdata->clan_name = STRALLOC( "" );
build.c:         victim->pcdata->clan = NULL;
build.c:         if( ch->pcdata && ch->pcdata->subprompt )
build.c:            STRFREE( ch->pcdata->subprompt );
build.c:            ch->pcdata->subprompt = NULL;
build.c:         if( ch->pcdata->subprompt )
build.c:            STRFREE( ch->pcdata->subprompt );
build.c:         ch->pcdata->subprompt = STRALLOC( buf );
build.c:                && get_trust( ch ) < LEVEL_GREATER && !is_name( "protoflag", ch->pcdata->bestowments ) )
build.c:   if( !ch->pcdata->area )
build.c:      pArea = ch->pcdata->area;
build.c:      location->area = ch->pcdata->area;
build.c:   pArea = ch->pcdata->area;
build.c:         location->area = ch->pcdata->area;
build.c:   if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
build.c:         if( ch->pcdata && ch->pcdata->subprompt )
build.c:            STRFREE( ch->pcdata->subprompt );
build.c:            ch->pcdata->subprompt = NULL;
build.c:         if( ch->pcdata->subprompt )
build.c:            STRFREE( ch->pcdata->subprompt );
build.c:         ch->pcdata->subprompt = STRALLOC( "<&CRedit &W#%r&w> %i" );
build.c:    if ( !IS_SET( ch->pcdata->flags, PCFLAG_BUILDWALK ) && !IS_NPC( ch ) )
build.c:      if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
build.c:      if( !ch->pcdata || !( pArea = ch->pcdata->area ) )
build.c:   if( get_trust( ch ) > LEVEL_IMMORTAL && ch->pcdata->r_range_lo && ch->pcdata->r_range_hi )
build.c:      tarea = ch->pcdata->area;
build.c:      tarea->low_r_vnum = ch->pcdata->r_range_lo;
build.c:      tarea->low_o_vnum = ch->pcdata->o_range_lo;
build.c:      tarea->low_m_vnum = ch->pcdata->m_range_lo;
build.c:      tarea->hi_r_vnum = ch->pcdata->r_range_hi;
build.c:      tarea->hi_o_vnum = ch->pcdata->o_range_hi;
build.c:      tarea->hi_m_vnum = ch->pcdata->m_range_hi;
build.c:      ch->pcdata->area = tarea;
build.c:      ch->pcdata->area = NULL;
build.c:      if( !ch->pcdata->area )
build.c:       || ( is_name( buf, ch->pcdata->bestowments )
build.c:       || ( ch->pcdata->council && is_name( buf, ch->pcdata->council->powers ) ) )
build.c:                || is_name( tmp->filename, ch->pcdata->bestowments )
build.c:                || ( ch->pcdata->council
build.c:                     && ( is_name( buf, ch->pcdata->council->powers )
build.c:                          || is_name( "aassign", ch->pcdata->council->powers ) ) ) )
build.c:   ch->pcdata->area = tarea;
build.c:   if( IS_NPC( ch ) || get_trust( ch ) < LEVEL_CREATOR || !ch->pcdata || ( argument[0] == '\0' && !ch->pcdata->area ) )
build.c:      tarea = ch->pcdata->area;
build.c:   if( IS_NPC( ch ) || get_trust( ch ) < LEVEL_CREATOR || !ch->pcdata || ( argument[0] == '\0' && !ch->pcdata->area ) )
build.c:      tarea = ch->pcdata->area;
build.c:            if( d->character && d->character->pcdata && d->character->pcdata->area == tarea )
build.c:               d->character->pcdata->area = NULL;
build.c:               d->character->pcdata->r_range_lo = 0;
build.c:               d->character->pcdata->r_range_hi = 0;
build.c:               d->character->pcdata->o_range_lo = 0;
build.c:               d->character->pcdata->o_range_hi = 0;
build.c:               d->character->pcdata->m_range_lo = 0;
build.c:               d->character->pcdata->m_range_hi = 0;
build.c:       || ( !ch->pcdata->area && get_trust( ch ) < LEVEL_GREATER ) )
build.c:   tarea = ch->pcdata->area;
build.c:       || ( !ch->pcdata->area && get_trust( ch ) < LEVEL_GREATER ) )
build.c:   tarea = ch->pcdata->area;
build.c:       || ( !ch->pcdata->area && get_trust( ch ) < LEVEL_GREATER ) )
build.c:   tarea = ch->pcdata->area;
build.c:       && ( obj->vnum < ch->pcdata->area->low_o_vnum || obj->vnum > ch->pcdata->area->hi_o_vnum ) )
build.c:       && ( mob->vnum < ch->pcdata->area->low_m_vnum || mob->vnum > ch->pcdata->area->hi_m_vnum ) )
build.c:       || ( !ch->pcdata->area && get_trust( ch ) < LEVEL_GREATER ) )
build.c:   tarea = ch->pcdata->area;
calendar.c:   ch->pcdata->timezone = i;
calendar.c:      bug( "%s", "pcdata->save_timedata: fopen" );
calendar.c:   ch_printf( ch, "&wYour local time        :  &W %s&D\r\n", c_time( current_time, ch->pcdata->timezone ) );
calendar.c:      if( day == ch->pcdata->day + 1 && time_info.month == ch->pcdata->month )
clans.c:   if( IS_NPC( ch ) || !ch->pcdata->clan )
clans.c:   for( roster = ch->pcdata->clan->first_member; roster; roster = roster->next )
clans.c:         roster->kills = ch->pcdata->mkills;
clans.c:         roster->deaths = ch->pcdata->mdeaths;
clans.c:         save_clan( ch->pcdata->clan );
clans.c:   add_roster( ch->pcdata->clan, ch->name, ch->Class, ch->level, ch->pcdata->mkills, ch->pcdata->mdeaths );
clans.c:   save_clan( ch->pcdata->clan );
clans.c:   if( IS_NPC( ch ) || !ch->pcdata->clan )
clans.c:   clan = ch->pcdata->clan;
clans.c:   if( IS_NPC( ch ) || !ch->pcdata->clan )
clans.c:   clan = ch->pcdata->clan;
clans.c:   if( ( ch->pcdata && ch->pcdata->bestowments
clans.c:         && is_name( "caninduct", ch->pcdata->bestowments ) )
clans.c:   if( victim->pcdata->clan )
clans.c:      if( victim->pcdata->clan->clan_type == CLAN_ORDER )
clans.c:         if( victim->pcdata->clan == clan )
clans.c:      else if( victim->pcdata->clan->clan_type == CLAN_GUILD )
clans.c:         if( victim->pcdata->clan == clan )
clans.c:         if( victim->pcdata->clan == clan )
clans.c:      SET_BIT( victim->pcdata->flags, PCFLAG_DEADLY );
clans.c:            victim->pcdata->learned[sn] = GET_ADEPT( victim, sn );
clans.c:   victim->pcdata->clan = clan;
clans.c:   STRFREE( victim->pcdata->clan_name );
clans.c:   victim->pcdata->clan_name = QUICKLINK( clan->name );
clans.c:   add_roster( clan, victim->name, victim->Class, victim->level, victim->pcdata->mkills, victim->pcdata->mdeaths );
clans.c:   if( IS_NPC( ch ) || !ch->pcdata->council )
clans.c:   council = ch->pcdata->council;
clans.c:   if( victim->pcdata->council )
clans.c:   victim->pcdata->council = council;
clans.c:   STRFREE( victim->pcdata->council_name );
clans.c:   victim->pcdata->council_name = QUICKLINK( council->name );
clans.c:   if( IS_NPC( ch ) || !ch->pcdata->clan )
clans.c:   clan = ch->pcdata->clan;
clans.c:   if( ( ch->pcdata && ch->pcdata->bestowments
clans.c:         && is_name( "canoutcast", ch->pcdata->bestowments ) )
clans.c:      if( ch->pcdata->clan->clan_type == CLAN_ORDER )
clans.c:      else if( ch->pcdata->clan->clan_type == CLAN_GUILD )
clans.c:   if( victim->pcdata->clan != ch->pcdata->clan )
clans.c:      if( ch->pcdata->clan->clan_type == CLAN_ORDER )
clans.c:      else if( ch->pcdata->clan->clan_type == CLAN_GUILD )
clans.c:         if( skill_table[sn]->guild == victim->pcdata->clan->Class && skill_table[sn]->name != NULL )
clans.c:            victim->pcdata->learned[sn] = 0;
clans.c:   if( !str_cmp( victim->name, ch->pcdata->clan->number1 ) )
clans.c:      STRFREE( ch->pcdata->clan->number1 );
clans.c:      ch->pcdata->clan->number1 = STRALLOC( "" );
clans.c:   if( !str_cmp( victim->name, ch->pcdata->clan->number2 ) )
clans.c:      STRFREE( ch->pcdata->clan->number2 );
clans.c:      ch->pcdata->clan->number2 = STRALLOC( "" );
clans.c:   if( !str_cmp( victim->name, ch->pcdata->clan->deity ) )
clans.c:      STRFREE( ch->pcdata->clan->deity );
clans.c:      ch->pcdata->clan->deity = STRALLOC( "" );
clans.c:   victim->pcdata->clan = NULL;
clans.c:   STRFREE( victim->pcdata->clan_name );
clans.c:   victim->pcdata->clan_name = STRALLOC( "" );
clans.c:   if( IS_NPC( ch ) || !ch->pcdata->council )
clans.c:   council = ch->pcdata->council;
clans.c:   if( victim->pcdata->council != ch->pcdata->council )
clans.c:   if( council->head2 && !str_cmp( victim->name, ch->pcdata->council->head2 ) )
clans.c:      STRFREE( ch->pcdata->council->head2 );
clans.c:      ch->pcdata->council->head2 = NULL;
clans.c:   victim->pcdata->council = NULL;
clans.c:   STRFREE( victim->pcdata->council_name );
clans.c:   victim->pcdata->council_name = STRALLOC( "" );
clans.c:   if( IS_NPC( ch ) || !ch->pcdata->clan )
clans.c:   if( ch->pcdata->clan->clan_type != CLAN_ORDER && ch->pcdata->clan->clan_type != CLAN_GUILD )
clans.c:      snprintf( filename, 256, "%s%s.defeats", CLAN_DIR, ch->pcdata->clan->name );
clans.c:      if( !str_cmp( ch->name, ch->pcdata->clan->leader ) && !str_cmp( argument, "clean" ) )
clans.c:   if( IS_NPC( ch ) || !ch->pcdata->clan )
clans.c:   if( ch->pcdata->clan->clan_type != CLAN_ORDER && ch->pcdata->clan->clan_type != CLAN_GUILD )
clans.c:      snprintf( filename, 256, "%s%s.record", CLAN_DIR, ch->pcdata->clan->name );
clans.c:      if( !str_cmp( ch->name, ch->pcdata->clan->leader ) && !str_cmp( argument, "clean" ) )
clans.c:   if( IS_NPC( ch ) || !IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
clans.c:   if( IS_NPC( victim ) || !IS_SET( victim->pcdata->flags, PCFLAG_DEADLY ) )
clans.c:   if( !xIS_SET( victim->act, PLR_SHOVEDRAG ) && !IS_SET( victim->pcdata->flags, PCFLAG_DEADLY ) )
clans.c:   if( !IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) && IS_SET( victim->pcdata->flags, PCFLAG_DEADLY ) )
clans.c:   if( !IS_SET( victim->pcdata->flags, PCFLAG_DEADLY ) && victim->position > 3 )
clans.c:      if( IS_SET( victim->pcdata->flags, PCFLAG_DEADLY ) && IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
color.c:      if( IS_NPC( ch ) || !IS_SET( ch->pcdata->flags, PCFLAG_PAGERON ) )
comm.c:      log_printf_plus( LOG_COMM, UMAX( sysdata.log_level, ch->level ), "Closing link to %s. (INRoom %d)", ch->pcdata->filename, ( ch->in_room ? ch->in_room->vnum : -1 ) );
comm.c:   if( IS_SET( ch->pcdata->flags, PCFLAG_BUILDWALK ) )
comm.c:   if( !IS_SET( ch->pcdata->flags, PCFLAG_NOINTRO ) )
comm.c:   if( str_cmp( sha256_crypt( argument ), ch->pcdata->pwd ) )
comm.c:   if( check_playing( d, ch->pcdata->filename, TRUE ) )
comm.c:chk = check_reconnect( d, ch->pcdata->filename, TRUE );
comm.c:   mudstrlcpy( buf, ch->pcdata->filename, MAX_STRING_LENGTH );
comm.c:   DISPOSE( ch->pcdata->pwd );
comm.c:   ch->pcdata->pwd = str_dup( pwdnew );
comm.c:   if( str_cmp( sha256_crypt( argument ), ch->pcdata->pwd ) )
comm.c:   ch->pcdata->cpose = str_dup( " is here." );
comm.c:   ch->pcdata->customclass = str_dup( "Adventurer" );
comm.c:   ch->pcdata->str = 4;
comm.c:   ch->pcdata->intel = 3;
comm.c:   ch->pcdata->dex = 4;
comm.c:   ch->pcdata->lck = 2;
comm.c:   ch->pcdata->def = 15;
comm.c:   ch->pcdata->matt = 5;
comm.c:   ch->pcdata->strplus = 0;
comm.c:   ch->pcdata->intplus = 0;
comm.c:   ch->pcdata->dexplus = 0;
comm.c:   ch->pcdata->lckplus = 0;
comm.c:   ch->pcdata->attplus = 0;
comm.c:   ch->pcdata->defplus = 0;
comm.c:   ch->pcdata->mattplus = 0;
comm.c:   ch->pcdata->mlevel = 1;
comm.c:   ch->pcdata->deflevel = 1;
comm.c:   ch->pcdata->attlevel = 1;
comm.c:   ch->pcdata->hometown = str_dup( "Kroridge" );
comm.c:   ch->pcdata->hometown = str_dup( "O'ran Thalore" );
comm.c:   ch->pcdata->hometown = str_dup( "Kimlodar" );
comm.c:   ch->pcdata->hometown = str_dup( "Shireton" );
comm.c:   ch->pcdata->hometown = str_dup( "BeachCastle" );
comm.c:   ch->pcdata->hometown = str_dup( "Calmarnock" );
comm.c:   ch->pcdata->hometown = str_dup( "Tarnstead" );
comm.c:   ch->pcdata->hometown = str_dup( "Dhubrokh" );
comm.c:      SET_BIT( ch->pcdata->flags, PCFLAG_WATCH );
comm.c:      REMOVE_BIT( ch->pcdata->flags, PCFLAG_WATCH );
comm.c:      ch->pcdata->clan = NULL;
comm.c:         ch->pcdata->learned[iLang] = 100;
comm.c:                  ch->pcdata->learned[uLang] = 100;
comm.c:      ch->pcdata->day = time_info.day;
comm.c:      ch->pcdata->month = time_info.month;
comm.c:      ch->pcdata->year = time_info.year - 17;
comm.c:      ch->pcdata->age = 17;
comm.c:      ch->pcdata->age_bonus = 0;
comm.c:         ch->pcdata->auth_state = 0;
comm.c:         SET_BIT( ch->pcdata->flags, PCFLAG_UNAUTHED );
comm.c:   else if( !IS_IMMORTAL( ch ) && ch->pcdata->release_date > 0 && ch->pcdata->release_date > current_time )
comm.c:   if( ch->pcdata->pet )
comm.c:      act( AT_ACTION, "$n returns to $s master from the Void.", ch->pcdata->pet, NULL, ch, TO_NOTVICT );
comm.c:      act( AT_ACTION, "$N returns with you to the realms.", ch, NULL, ch->pcdata->pet, TO_CHAR );
comm.c:   if( str_cmp( sha256_crypt( argument ), ch->pcdata->pwd ) )
comm.c:      if( !IS_NPC( ch ) && ( !fConn || !ch->desc ) && ch->pcdata->filename && !str_cmp( name, ch->pcdata->filename ) )
comm.c:            DISPOSE( d->character->pcdata->pwd );
comm.c:            d->character->pcdata->pwd = str_dup( ch->pcdata->pwd );
comm.c:               ch->pcdata->recent_site = STRALLOC( d->host );
comm.c:          && !str_cmp( name, dold->original ? dold->original->pcdata->filename : dold->character->pcdata->filename ) )
comm.c:            log_printf_plus( LOG_COMM, sysdata.log_level, "%s already connected.", ch->pcdata->filename );
comm.c:            ch->pcdata->recent_site = STRALLOC( d->host );
comm.c:                          ch->pcdata->filename, d->host );
comm.c:   REMOVE_BIT( ch->pcdata->flags, PCFLAG_IDLE );
comm.c:         && ( get_trust(to) < ( ch->pcdata ? ch->pcdata->wizinvis : 0 ) ) ) ) ) )
comm.c:   if( !NOT_AUTHED( ch ) || ch->pcdata->auth_state != 2 )
comm.c:   STRFREE( ch->pcdata->filename );
comm.c:   ch->pcdata->filename = STRALLOC( ucase_argument );
comm.c:   ch->pcdata->auth_state = 0;
comm.c:   if( !IS_NPC( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_HELPSTART ) )
comm.c:   else if( !IS_NPC( ch ) && ch->substate != SUB_NONE && ch->pcdata->subprompt && ch->pcdata->subprompt[0] != '\0' )
comm.c:      prompt = ch->pcdata->subprompt;
comm.c:   else if( IS_NPC( ch ) || ( !ch->fighting && ( !ch->pcdata->prompt || !*ch->pcdata->prompt ) ) )
comm.c:      if( !ch->pcdata->fprompt || !*ch->pcdata->fprompt )
comm.c:         prompt = ch->pcdata->fprompt;
comm.c:      prompt = ch->pcdata->prompt;
comm.c:                     pstat = ch->pcdata->condition[COND_BLOODTHIRST];
comm.c:                     if( IS_SET( ch->pcdata->flags, PCFLAG_DND ) )
comm.c:                               ( IS_NPC( ch ) ? ch->mobinvis : ch->pcdata->wizinvis ) );
comm.c:                            : ( xIS_SET( ch->act, PLR_WIZINVIS ) ? ch->pcdata->wizinvis : 0 ) );
comm.c:   pclines = UMAX( ch->pcdata->pagerlen, 5 ) - 1;
comm.c.backup:      log_printf_plus( LOG_COMM, UMAX( sysdata.log_level, ch->level ), "Closing link to %s. (INRoom %d)", ch->pcdata->filename, ( ch->in_room ? ch->in_room->vnum : -1 ) );
comm.c.backup:   if( !IS_SET( ch->pcdata->flags, PCFLAG_NOINTRO ) )
comm.c.backup:   if( str_cmp( sha256_crypt( argument ), ch->pcdata->pwd ) )
comm.c.backup:   if( check_playing( d, ch->pcdata->filename, TRUE ) )
comm.c.backup:chk = check_reconnect( d, ch->pcdata->filename, TRUE );
comm.c.backup:   mudstrlcpy( buf, ch->pcdata->filename, MAX_STRING_LENGTH );
comm.c.backup:   DISPOSE( ch->pcdata->pwd );
comm.c.backup:   ch->pcdata->pwd = str_dup( pwdnew );
comm.c.backup:   if( str_cmp( sha256_crypt( argument ), ch->pcdata->pwd ) )
comm.c.backup:   ch->pcdata->customclass = str_dup( "Adventurer" );
comm.c.backup:      SET_BIT( ch->pcdata->flags, PCFLAG_WATCH );
comm.c.backup:      REMOVE_BIT( ch->pcdata->flags, PCFLAG_WATCH );
comm.c.backup:      ch->pcdata->clan = NULL;
comm.c.backup:         ch->pcdata->learned[iLang] = 100;
comm.c.backup:                  ch->pcdata->learned[uLang] = 100;
comm.c.backup:      ch->pcdata->day = time_info.day;
comm.c.backup:      ch->pcdata->month = time_info.month;
comm.c.backup:      ch->pcdata->year = time_info.year - 17;
comm.c.backup:      ch->pcdata->age = 17;
comm.c.backup:      ch->pcdata->age_bonus = 0;
comm.c.backup:         ch->pcdata->auth_state = 0;
comm.c.backup:         SET_BIT( ch->pcdata->flags, PCFLAG_UNAUTHED );
comm.c.backup:   else if( !IS_IMMORTAL( ch ) && ch->pcdata->release_date > 0 && ch->pcdata->release_date > current_time )
comm.c.backup:   if( ch->pcdata->pet )
comm.c.backup:      act( AT_ACTION, "$n returns to $s master from the Void.", ch->pcdata->pet, NULL, ch, TO_NOTVICT );
comm.c.backup:      act( AT_ACTION, "$N returns with you to the realms.", ch, NULL, ch->pcdata->pet, TO_CHAR );
comm.c.backup:   if( str_cmp( sha256_crypt( argument ), ch->pcdata->pwd ) )
comm.c.backup:      if( !IS_NPC( ch ) && ( !fConn || !ch->desc ) && ch->pcdata->filename && !str_cmp( name, ch->pcdata->filename ) )
comm.c.backup:            DISPOSE( d->character->pcdata->pwd );
comm.c.backup:            d->character->pcdata->pwd = str_dup( ch->pcdata->pwd );
comm.c.backup:               ch->pcdata->recent_site = STRALLOC( d->host );
comm.c.backup:          && !str_cmp( name, dold->original ? dold->original->pcdata->filename : dold->character->pcdata->filename ) )
comm.c.backup:            log_printf_plus( LOG_COMM, sysdata.log_level, "%s already connected.", ch->pcdata->filename );
comm.c.backup:            ch->pcdata->recent_site = STRALLOC( d->host );
comm.c.backup:                          ch->pcdata->filename, d->host );
comm.c.backup:   REMOVE_BIT( ch->pcdata->flags, PCFLAG_IDLE );
comm.c.backup:         && ( get_trust(to) < ( ch->pcdata ? ch->pcdata->wizinvis : 0 ) ) ) ) ) )
comm.c.backup:   if( !NOT_AUTHED( ch ) || ch->pcdata->auth_state != 2 )
comm.c.backup:   STRFREE( ch->pcdata->filename );
comm.c.backup:   ch->pcdata->filename = STRALLOC( ucase_argument );
comm.c.backup:   ch->pcdata->auth_state = 0;
comm.c.backup:   if( !IS_NPC( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_HELPSTART ) )
comm.c.backup:   else if( !IS_NPC( ch ) && ch->substate != SUB_NONE && ch->pcdata->subprompt && ch->pcdata->subprompt[0] != '\0' )
comm.c.backup:      prompt = ch->pcdata->subprompt;
comm.c.backup:   else if( IS_NPC( ch ) || ( !ch->fighting && ( !ch->pcdata->prompt || !*ch->pcdata->prompt ) ) )
comm.c.backup:      if( !ch->pcdata->fprompt || !*ch->pcdata->fprompt )
comm.c.backup:         prompt = ch->pcdata->fprompt;
comm.c.backup:      prompt = ch->pcdata->prompt;
comm.c.backup:                     pstat = ch->pcdata->condition[COND_BLOODTHIRST];
comm.c.backup:                     if( IS_SET( ch->pcdata->flags, PCFLAG_DND ) )
comm.c.backup:                               ( IS_NPC( ch ) ? ch->mobinvis : ch->pcdata->wizinvis ) );
comm.c.backup:                            : ( xIS_SET( ch->act, PLR_WIZINVIS ) ? ch->pcdata->wizinvis : 0 ) );
comm.c.backup:   pclines = UMAX( ch->pcdata->pagerlen, 5 ) - 1;
comm.c.bak:      log_printf_plus( LOG_COMM, UMAX( sysdata.log_level, ch->level ), "Closing link to %s. (INRoom %d)", ch->pcdata->filename, ( ch->in_room ? ch->in_room->vnum : -1 ) );
comm.c.bak:   if( !IS_SET( ch->pcdata->flags, PCFLAG_NOINTRO ) )
comm.c.bak:   if( str_cmp( sha256_crypt( argument ), ch->pcdata->pwd ) )
comm.c.bak:   if( check_playing( d, ch->pcdata->filename, TRUE ) )
comm.c.bak:chk = check_reconnect( d, ch->pcdata->filename, TRUE );
comm.c.bak:   mudstrlcpy( buf, ch->pcdata->filename, MAX_STRING_LENGTH );
comm.c.bak:   DISPOSE( ch->pcdata->pwd );
comm.c.bak:   ch->pcdata->pwd = str_dup( pwdnew );
comm.c.bak:   if( str_cmp( sha256_crypt( argument ), ch->pcdata->pwd ) )
comm.c.bak:   ch->pcdata->customclass = str_dup( "Adventurer" );
comm.c.bak:      SET_BIT( ch->pcdata->flags, PCFLAG_WATCH );
comm.c.bak:      REMOVE_BIT( ch->pcdata->flags, PCFLAG_WATCH );
comm.c.bak:      ch->pcdata->clan = NULL;
comm.c.bak:         ch->pcdata->learned[iLang] = 100;
comm.c.bak:                  ch->pcdata->learned[uLang] = 100;
comm.c.bak:      ch->pcdata->day = time_info.day;
comm.c.bak:      ch->pcdata->month = time_info.month;
comm.c.bak:      ch->pcdata->year = time_info.year - 17;
comm.c.bak:      ch->pcdata->age = 17;
comm.c.bak:      ch->pcdata->age_bonus = 0;
comm.c.bak:         ch->pcdata->auth_state = 0;
comm.c.bak:         SET_BIT( ch->pcdata->flags, PCFLAG_UNAUTHED );
comm.c.bak:   else if( !IS_IMMORTAL( ch ) && ch->pcdata->release_date > 0 && ch->pcdata->release_date > current_time )
comm.c.bak:   if( ch->pcdata->pet )
comm.c.bak:      act( AT_ACTION, "$n returns to $s master from the Void.", ch->pcdata->pet, NULL, ch, TO_NOTVICT );
comm.c.bak:      act( AT_ACTION, "$N returns with you to the realms.", ch, NULL, ch->pcdata->pet, TO_CHAR );
comm.c.bak:   if( str_cmp( sha256_crypt( argument ), ch->pcdata->pwd ) )
comm.c.bak:      if( !IS_NPC( ch ) && ( !fConn || !ch->desc ) && ch->pcdata->filename && !str_cmp( name, ch->pcdata->filename ) )
comm.c.bak:            DISPOSE( d->character->pcdata->pwd );
comm.c.bak:            d->character->pcdata->pwd = str_dup( ch->pcdata->pwd );
comm.c.bak:               ch->pcdata->recent_site = STRALLOC( d->host );
comm.c.bak:          && !str_cmp( name, dold->original ? dold->original->pcdata->filename : dold->character->pcdata->filename ) )
comm.c.bak:            log_printf_plus( LOG_COMM, sysdata.log_level, "%s already connected.", ch->pcdata->filename );
comm.c.bak:            ch->pcdata->recent_site = STRALLOC( d->host );
comm.c.bak:                          ch->pcdata->filename, d->host );
comm.c.bak:   REMOVE_BIT( ch->pcdata->flags, PCFLAG_IDLE );
comm.c.bak:         && ( get_trust(to) < ( ch->pcdata ? ch->pcdata->wizinvis : 0 ) ) ) ) ) )
comm.c.bak:   if( !NOT_AUTHED( ch ) || ch->pcdata->auth_state != 2 )
comm.c.bak:   STRFREE( ch->pcdata->filename );
comm.c.bak:   ch->pcdata->filename = STRALLOC( ucase_argument );
comm.c.bak:   ch->pcdata->auth_state = 0;
comm.c.bak:   if( !IS_NPC( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_HELPSTART ) )
comm.c.bak:   else if( !IS_NPC( ch ) && ch->substate != SUB_NONE && ch->pcdata->subprompt && ch->pcdata->subprompt[0] != '\0' )
comm.c.bak:      prompt = ch->pcdata->subprompt;
comm.c.bak:   else if( IS_NPC( ch ) || ( !ch->fighting && ( !ch->pcdata->prompt || !*ch->pcdata->prompt ) ) )
comm.c.bak:      if( !ch->pcdata->fprompt || !*ch->pcdata->fprompt )
comm.c.bak:         prompt = ch->pcdata->fprompt;
comm.c.bak:      prompt = ch->pcdata->prompt;
comm.c.bak:                     pstat = ch->pcdata->condition[COND_BLOODTHIRST];
comm.c.bak:                     if( IS_SET( ch->pcdata->flags, PCFLAG_DND ) )
comm.c.bak:                               ( IS_NPC( ch ) ? ch->mobinvis : ch->pcdata->wizinvis ) );
comm.c.bak:                            : ( xIS_SET( ch->act, PLR_WIZINVIS ) ? ch->pcdata->wizinvis : 0 ) );
comm.c.bak:   pclines = UMAX( ch->pcdata->pagerlen, 5 ) - 1;
db.c:      if( ch->pcdata->pet )
db.c:         extract_char( ch->pcdata->pet, TRUE );
db.c:         ch->pcdata->pet = NULL;
db.c:      for( temp = ch->pcdata->first_ignored; temp; temp = next )
db.c:         UNLINK( temp, ch->pcdata->first_ignored, ch->pcdata->last_ignored, next, prev );
db.c:      STRFREE( ch->pcdata->filename );
db.c:      STRFREE( ch->pcdata->deity_name );
db.c:      STRFREE( ch->pcdata->clan_name );
db.c:      STRFREE( ch->pcdata->council_name );
db.c:      if( ch->pcdata->recent_site )
db.c:         STRFREE( ch->pcdata->recent_site );
db.c:      if( ch->pcdata->prev_site )
db.c:         STRFREE( ch->pcdata->prev_site );
db.c:      DISPOSE( ch->pcdata->pwd );   /* no hash */
db.c:      DISPOSE( ch->pcdata->bamfin );   /* no hash */
db.c:      DISPOSE( ch->pcdata->bamfout );  /* no hash */
db.c:      DISPOSE( ch->pcdata->rank );
db.c:      STRFREE( ch->pcdata->title );
db.c:      STRFREE( ch->pcdata->bio );
db.c:      DISPOSE( ch->pcdata->bestowments ); /* no hash */
db.c:      DISPOSE( ch->pcdata->homepage ); /* no hash */
db.c:      STRFREE( ch->pcdata->authed_by );
db.c:      STRFREE( ch->pcdata->prompt );
db.c:      STRFREE( ch->pcdata->fprompt );
db.c:      if( ch->pcdata->helled_by )
db.c:         STRFREE( ch->pcdata->helled_by );
db.c:      if( ch->pcdata->subprompt )
db.c:         STRFREE( ch->pcdata->subprompt );
db.c:      if( ch->pcdata->tell_history )
db.c:            if( ch->pcdata->tell_history[i] )
db.c:               STRFREE( ch->pcdata->tell_history[i] );
db.c:         DISPOSE( ch->pcdata->tell_history );
deity.c:            if( vch->pcdata->deity == deity )
deity.c:               snprintf( buf, MAX_STRING_LENGTH, "&R\r\nYour deity, %s, has met its demise!\r\n", vch->pcdata->deity_name );
deity.c:               xREMOVE_BITS( vch->affected_by, vch->pcdata->deity->affected );
deity.c:               REMOVE_BIT( vch->resistant, vch->pcdata->deity->element );
deity.c:               REMOVE_BIT( vch->susceptible, vch->pcdata->deity->suscept );
deity.c:               vch->pcdata->deity = NULL;
deity.c:               STRFREE( vch->pcdata->deity_name );
deity.c:               vch->pcdata->deity_name = STRALLOC( "" );
deity.c:      if( !ch->pcdata->deity )
deity.c:      --ch->pcdata->deity->worshippers;
deity.c:      if( ch->pcdata->deity->worshippers < 0 )
deity.c:         ch->pcdata->deity->worshippers = 0;
deity.c:      ch->pcdata->favor = -2500;
deity.c:      xREMOVE_BITS( ch->affected_by, ch->pcdata->deity->affected );
deity.c:      REMOVE_BIT( ch->resistant, ch->pcdata->deity->element );
deity.c:      REMOVE_BIT( ch->susceptible, ch->pcdata->deity->suscept );
deity.c:      save_deity( ch->pcdata->deity );
deity.c:      ch->pcdata->deity = NULL;
deity.c:      STRFREE( ch->pcdata->deity_name );
deity.c:      ch->pcdata->deity_name = STRALLOC( "" );
deity.c:   if( ch->pcdata->deity )
deity.c:   STRFREE( ch->pcdata->deity_name );
deity.c:   ch->pcdata->deity_name = QUICKLINK( deity->name );
deity.c:   ch->pcdata->deity = deity;
deity.c:   if( ch->pcdata->favor > deity->affectednum )
deity.c:      xSET_BITS( ch->affected_by, ch->pcdata->deity->affected );
deity.c:   if( ch->pcdata->favor > deity->elementnum )
deity.c:      SET_BIT( ch->resistant, ch->pcdata->deity->element );
deity.c:   if( ch->pcdata->favor < deity->susceptnum )
deity.c:      SET_BIT( ch->susceptible, ch->pcdata->deity->suscept );
deity.c:   act( AT_MAGIC, "Body and soul, you devote yourself to $t!", ch, ch->pcdata->deity_name, NULL, TO_CHAR );
deity.c:   ++ch->pcdata->deity->worshippers;
deity.c:   save_deity( ch->pcdata->deity );
deity.c:   if( IS_NPC( ch ) || !ch->pcdata->deity )
deity.c:   oldfavor = ch->pcdata->favor;
deity.c:      if( ch->pcdata->favor < ch->pcdata->deity->scorpse )
deity.c:                  ch->pcdata->favor -= ch->pcdata->deity->scorpse;
deity.c:      ch->pcdata->favor -= ch->pcdata->deity->scorpse;
deity.c:      if( ch->pcdata->favor < ch->pcdata->deity->susceptnum )
deity.c:         SET_BIT( ch->susceptible, ch->pcdata->deity->suscept );
deity.c:      if( ( oldfavor > ch->pcdata->deity->affectednum &&
deity.c:            ch->pcdata->favor <= ch->pcdata->deity->affectednum ) ||
deity.c:          ( oldfavor > ch->pcdata->deity->elementnum &&
deity.c:            ch->pcdata->favor <= ch->pcdata->deity->elementnum ) ||
deity.c:          ( oldfavor < ch->pcdata->deity->susceptnum && ch->pcdata->favor >= ch->pcdata->deity->susceptnum ) )
deity.c:      if( ch->pcdata->favor < ch->pcdata->deity->savatar )
deity.c:      snprintf( buf, MAX_STRING_LENGTH, victim->short_descr, ch->pcdata->deity->name );
deity.c:      snprintf( buf, MAX_STRING_LENGTH, victim->long_descr, ch->pcdata->deity->name );
deity.c:      snprintf( buf, MAX_STRING_LENGTH, victim->description, ch->pcdata->deity->name );
deity.c:      victim->hit = ch->hit * 6 + ch->pcdata->favor;
deity.c:      victim->alignment = ch->pcdata->deity->alignment;
deity.c:      victim->max_hit = ch->hit * 6 + ch->pcdata->favor;
deity.c:      ch->pcdata->favor -= ch->pcdata->deity->savatar;
deity.c:      if( ch->pcdata->favor < ch->pcdata->deity->susceptnum )
deity.c:         SET_BIT( ch->susceptible, ch->pcdata->deity->suscept );
deity.c:      if( ( oldfavor > ch->pcdata->deity->affectednum &&
deity.c:            ch->pcdata->favor <= ch->pcdata->deity->affectednum ) ||
deity.c:          ( oldfavor > ch->pcdata->deity->elementnum &&
deity.c:            ch->pcdata->favor <= ch->pcdata->deity->elementnum ) ||
deity.c:          ( oldfavor < ch->pcdata->deity->susceptnum && ch->pcdata->favor >= ch->pcdata->deity->susceptnum ) )
deity.c:      if( ch->pcdata->favor < ch->pcdata->deity->sdeityobj )
deity.c:      snprintf( buf, MAX_STRING_LENGTH, "sigil %s", ch->pcdata->deity->name );
deity.c:      snprintf( buf, MAX_STRING_LENGTH, obj->short_descr, ch->pcdata->deity->name );
deity.c:      snprintf( buf, MAX_STRING_LENGTH, obj->description, ch->pcdata->deity->name );
deity.c:      ch->pcdata->favor -= ch->pcdata->deity->sdeityobj;
deity.c:      if( ch->pcdata->favor < ch->pcdata->deity->susceptnum )
deity.c:         SET_BIT( ch->susceptible, ch->pcdata->deity->suscept );
deity.c:      if( ( oldfavor > ch->pcdata->deity->affectednum &&
deity.c:            ch->pcdata->favor <= ch->pcdata->deity->affectednum ) ||
deity.c:          ( oldfavor > ch->pcdata->deity->elementnum &&
deity.c:            ch->pcdata->favor <= ch->pcdata->deity->elementnum ) ||
deity.c:          ( oldfavor < ch->pcdata->deity->susceptnum && ch->pcdata->favor >= ch->pcdata->deity->susceptnum ) )
deity.c:      switch ( ch->pcdata->deity->objstat )
deity.c:      if( ch->pcdata->favor < ch->pcdata->deity->srecall )
deity.c:      if( !IS_NPC( ch ) && ch->pcdata->clan )
deity.c:         location = get_room_index( ch->pcdata->clan->recall );
deity.c:      if( !IS_NPC( ch ) && !location && ch->level >= 5 && IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
deity.c:      ch->pcdata->favor -= ch->pcdata->deity->srecall;
deity.c:      if( ch->pcdata->favor < ch->pcdata->deity->susceptnum )
deity.c:         SET_BIT( ch->susceptible, ch->pcdata->deity->suscept );
deity.c:      if( ( oldfavor > ch->pcdata->deity->affectednum &&
deity.c:            ch->pcdata->favor <= ch->pcdata->deity->affectednum ) ||
deity.c:          ( oldfavor > ch->pcdata->deity->elementnum &&
deity.c:            ch->pcdata->favor <= ch->pcdata->deity->elementnum ) ||
deity.c:          ( oldfavor < ch->pcdata->deity->susceptnum && ch->pcdata->favor >= ch->pcdata->deity->susceptnum ) )
deity.c:   if( IS_NPC( ch ) || !ch->pcdata->deity )
deity.c:   oldfavor = ch->pcdata->favor;
deity.c:   if( ( ch->alignment - ch->pcdata->deity->alignment > 650
deity.c:         || ch->alignment - ch->pcdata->deity->alignment < -650 ) && ch->pcdata->deity->alignment != 0 )
deity.c:      ch->pcdata->favor -= 2;
deity.c:      ch->pcdata->favor = URANGE( -2500, ch->pcdata->favor, 2500 );
deity.c:      if( ch->pcdata->favor > ch->pcdata->deity->affectednum )
deity.c:         xSET_BITS( ch->affected_by, ch->pcdata->deity->affected );
deity.c:      if( ch->pcdata->favor > ch->pcdata->deity->elementnum )
deity.c:         SET_BIT( ch->resistant, ch->pcdata->deity->element );
deity.c:      if( ch->pcdata->favor < ch->pcdata->deity->susceptnum )
deity.c:         SET_BIT( ch->susceptible, ch->pcdata->deity->suscept );
deity.c:      if( ( oldfavor > ch->pcdata->deity->affectednum &&
deity.c:            ch->pcdata->favor <= ch->pcdata->deity->affectednum ) ||
deity.c:          ( oldfavor > ch->pcdata->deity->elementnum &&
deity.c:            ch->pcdata->favor <= ch->pcdata->deity->elementnum ) ||
deity.c:          ( oldfavor < ch->pcdata->deity->susceptnum && ch->pcdata->favor >= ch->pcdata->deity->susceptnum ) )
deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->flee / mod );
deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->flee_npcrace / mod );
deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->kill / mod );
deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->kill_npcrace / mod );
deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->kill_magic / mod );
deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->sac / mod );
deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->bury_corpse / mod );
deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->aid_spell / mod );
deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->aid / mod );
deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->steal / mod );
deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->backstab / mod );
deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->die / mod );
deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->die_npcrace / mod );
deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->spell_aid / mod );
deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->dig_corpse / mod );
deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->die_npcfoe / mod );
deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->flee_npcfoe / mod );
deity.c:         ch->pcdata->favor += number_fuzzy( ch->pcdata->deity->kill_npcfoe / mod );
deity.c:   ch->pcdata->favor = URANGE( -2500, ch->pcdata->favor, 2500 );
deity.c:   if( ch->pcdata->favor > ch->pcdata->deity->affectednum )
deity.c:      xSET_BITS( ch->affected_by, ch->pcdata->deity->affected );
deity.c:   if( ch->pcdata->favor > ch->pcdata->deity->elementnum )
deity.c:      SET_BIT( ch->resistant, ch->pcdata->deity->element );
deity.c:   if( ch->pcdata->favor < ch->pcdata->deity->susceptnum )
deity.c:      SET_BIT( ch->susceptible, ch->pcdata->deity->suscept );
deity.c:   if( ( oldfavor > ch->pcdata->deity->affectednum &&
deity.c:         ch->pcdata->favor <= ch->pcdata->deity->affectednum ) ||
deity.c:       ( oldfavor > ch->pcdata->deity->elementnum &&
deity.c:         ch->pcdata->favor <= ch->pcdata->deity->elementnum ) ||
deity.c:       ( oldfavor < ch->pcdata->deity->susceptnum && ch->pcdata->favor >= ch->pcdata->deity->susceptnum ) )
fight.c:               DISPOSE( ch->pcdata->nuisance );
fight.c:       * ( 1 + abs( ch->alignment - ch->pcdata->clan->alignment ) );
fight.c:         bonus -= ch->pcdata->favor / -400;
fight.c:   if( !IS_NPC( ch ) && ch->pcdata->learned[gsn_enhanced_damage] > 0 )
fight.c:   victim_ac = (((victim->pcdata->def * victim->pcdata->deflevel) /15 ) * -1 + GET_AC(victim));
fight.c:   if( !IS_NPC( ch ) && ch->pcdata->learned[gsn_enhanced_damage] > 0 )
fight.c:	dam = (dam + ch->pcdata->str + ch->mod_str) * ((ch->pcdata->dex/100) +1);
fight.c:      if( victim->hit <= ( victim->max_hit / 8 ) && victim->pcdata->condition[COND_BLOODTHIRST] > 5 )
fight.c:         if( !IS_NPC( ch ) && !IS_IMMORTAL( ch ) && ch->pcdata->clan
fight.c:             && ch->pcdata->clan->clan_type != CLAN_ORDER && ch->pcdata->clan->clan_type != CLAN_GUILD && victim != ch )
fight.c:            snprintf( filename, 256, "%s%s.record", CLAN_DIR, ch->pcdata->clan->name );
fight.c:                      victim->pcdata->clan ? victim->pcdata->clan->badge :
fight.c:            if( victim->pcdata && victim->pcdata->clan && victim->pcdata->clan->name == ch->pcdata->clan->name )
fight.c:         if( !IS_NPC( victim ) && !IS_IMMORTAL( victim ) && victim->pcdata->clan
fight.c:             && victim->pcdata->clan->clan_type != CLAN_ORDER
fight.c:             && victim->pcdata->clan->clan_type != CLAN_GUILD && ch != victim && !IS_NPC( ch ) )
fight.c:            snprintf( filename, 256, "%s%s.defeats", CLAN_DIR, victim->pcdata->clan->name );
fight.c:                     ch->pcdata->clan ? ch->pcdata->clan->badge :
fight.c:            if( ch->pcdata && ch->pcdata->clan && ch->pcdata->clan->name == victim->pcdata->clan->name )
fight.c:      if( !IS_NPC( ch ) && ch->pcdata->clan )
fight.c:      if( !IS_NPC( victim ) && victim->pcdata->clan )
fight.c:   if( !npcvict && !victim->desc && !IS_SET( victim->pcdata->flags, PCFLAG_NORECALL ) )
fight.c:       && IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) && IS_SET( victim->pcdata->flags, PCFLAG_DEADLY ) )
fight.c:         if( ch->pcdata->clan )
fight.c:            ch->pcdata->clan->mkills++;
fight.c:         ch->pcdata->mkills++;
fight.c:         if( ch->pcdata->deity )
fight.c:            if( victim->race == ch->pcdata->deity->npcrace )
fight.c:            else if( victim->race == ch->pcdata->deity->npcfoe )
fight.c:         ch->pcdata->pkills++;
fight.c:         victim->pcdata->pdeaths++;
fight.c:         if( ch->pcdata->clan )
fight.c:               ch->pcdata->clan->pkills[0]++;
fight.c:               ch->pcdata->clan->pkills[1]++;
fight.c:               ch->pcdata->clan->pkills[2]++;
fight.c:               ch->pcdata->clan->pkills[3]++;
fight.c:               ch->pcdata->clan->pkills[4]++;
fight.c:               ch->pcdata->clan->pkills[5]++;
fight.c:               ch->pcdata->clan->pkills[6]++;
fight.c:         ch->pcdata->pkills++;
fight.c:       && IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) && IS_SET( victim->pcdata->flags, PCFLAG_DEADLY ) )
fight.c:      if( !ch->pcdata->clan
fight.c:          || !victim->pcdata->clan
fight.c:          || ( ch->pcdata->clan->clan_type != CLAN_NOKILL
fight.c:               && victim->pcdata->clan->clan_type != CLAN_NOKILL && ch->pcdata->clan != victim->pcdata->clan ) )
fight.c:         if( ch->pcdata->clan )
fight.c:               ch->pcdata->clan->pkills[0]++;
fight.c:               ch->pcdata->clan->pkills[1]++;
fight.c:               ch->pcdata->clan->pkills[2]++;
fight.c:               ch->pcdata->clan->pkills[3]++;
fight.c:               ch->pcdata->clan->pkills[4]++;
fight.c:               ch->pcdata->clan->pkills[5]++;
fight.c:               ch->pcdata->clan->pkills[6]++;
fight.c:         ch->pcdata->pkills++;
fight.c:            ch->pcdata->condition[COND_BLOODTHIRST] = ( 10 + ch->level );
fight.c:         if( victim->pcdata->clan )
fight.c:               victim->pcdata->clan->pdeaths[0]++;
fight.c:               victim->pcdata->clan->pdeaths[1]++;
fight.c:               victim->pcdata->clan->pdeaths[2]++;
fight.c:               victim->pcdata->clan->pdeaths[3]++;
fight.c:               victim->pcdata->clan->pdeaths[4]++;
fight.c:               victim->pcdata->clan->pdeaths[5]++;
fight.c:               victim->pcdata->clan->pdeaths[6]++;
fight.c:         victim->pcdata->pdeaths++;
fight.c:         if( victim->pcdata->clan )
fight.c:            victim->pcdata->clan->mdeaths++;
fight.c:         victim->pcdata->mdeaths++;
fight.c:         if( victim->pcdata->deity )
fight.c:            if( ch->race == victim->pcdata->deity->npcrace )
fight.c:            else if( ch->race == victim->pcdata->deity->npcfoe )
fight.c:      if( ch->pcdata->clan )
fight.c:         ch->pcdata->clan->illegal_pk++;
fight.c:      ch->pcdata->illegal_pk++;
fight.c:      if( victim->pcdata->clan )
fight.c:            victim->pcdata->clan->pdeaths[0]++;
fight.c:            victim->pcdata->clan->pdeaths[1]++;
fight.c:            victim->pcdata->clan->pdeaths[2]++;
fight.c:            victim->pcdata->clan->pdeaths[3]++;
fight.c:            victim->pcdata->clan->pdeaths[4]++;
fight.c:            victim->pcdata->clan->pdeaths[5]++;
fight.c:            victim->pcdata->clan->pdeaths[6]++;
fight.c:      victim->pcdata->pdeaths++;
fight.c:    { if ( !(ch->pcdata->clan && victim->pcdata->clan
fight.c:      && ch->pcdata->clan == victim->pcdata->clan ) )  return; }
fight.c:   if( victim->pcdata->mdeaths + victim->pcdata->pdeaths < 3 )
fight.c:   victim->pcdata->condition[COND_FULL] = 12;
fight.c:   victim->pcdata->condition[COND_THIRST] = 12;
fight.c:      victim->pcdata->condition[COND_BLOODTHIRST] = ( victim->level / 2 );
fight.c:        ch->pcdata->ap += (victim->level);
fight.c:   if( dam == 0 && ( !IS_NPC( ch ) && ( IS_SET( ch->pcdata->flags, PCFLAG_GAG ) ) ) )
fight.c:   if( dam == 0 && ( !IS_NPC( victim ) && ( IS_SET( victim->pcdata->flags, PCFLAG_GAG ) ) ) )
fight.c:      if( ( !IS_SET( victim->pcdata->flags, PCFLAG_DEADLY )
fight.c:            || !IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
fight.c:         if( wf && ch->pcdata->deity )
fight.c:            if( wf && wf->race == ch->pcdata->deity->npcrace )
fight.c:            else if( wf && wf->race == ch->pcdata->deity->npcfoe )
fight.c.backup:               DISPOSE( ch->pcdata->nuisance );
fight.c.backup:       * ( 1 + abs( ch->alignment - ch->pcdata->clan->alignment ) );
fight.c.backup:         bonus -= ch->pcdata->favor / -400;
fight.c.backup:   if( !IS_NPC( ch ) && ch->pcdata->learned[gsn_enhanced_damage] > 0 )
fight.c.backup:   victim_ac = ((((ch->pcdata->def + ch->pcdata->defplus) * ch->pcdata->deflevel) /15 ) * -1);
fight.c.backup:   if( !IS_NPC( ch ) && ch->pcdata->learned[gsn_enhanced_damage] > 0 )
fight.c.backup:	dam = (dam + ch->pcdata->str + ch->pcdata->att + ch->pcdata->attplus) * ch->pcdata->attlevel;
fight.c.backup:      if( victim->hit <= ( victim->max_hit / 8 ) && victim->pcdata->condition[COND_BLOODTHIRST] > 5 )
fight.c.backup:         if( !IS_NPC( ch ) && !IS_IMMORTAL( ch ) && ch->pcdata->clan
fight.c.backup:             && ch->pcdata->clan->clan_type != CLAN_ORDER && ch->pcdata->clan->clan_type != CLAN_GUILD && victim != ch )
fight.c.backup:            snprintf( filename, 256, "%s%s.record", CLAN_DIR, ch->pcdata->clan->name );
fight.c.backup:                      victim->pcdata->clan ? victim->pcdata->clan->badge :
fight.c.backup:            if( victim->pcdata && victim->pcdata->clan && victim->pcdata->clan->name == ch->pcdata->clan->name )
fight.c.backup:         if( !IS_NPC( victim ) && !IS_IMMORTAL( victim ) && victim->pcdata->clan
fight.c.backup:             && victim->pcdata->clan->clan_type != CLAN_ORDER
fight.c.backup:             && victim->pcdata->clan->clan_type != CLAN_GUILD && ch != victim && !IS_NPC( ch ) )
fight.c.backup:            snprintf( filename, 256, "%s%s.defeats", CLAN_DIR, victim->pcdata->clan->name );
fight.c.backup:                     ch->pcdata->clan ? ch->pcdata->clan->badge :
fight.c.backup:            if( ch->pcdata && ch->pcdata->clan && ch->pcdata->clan->name == victim->pcdata->clan->name )
fight.c.backup:      if( !IS_NPC( ch ) && ch->pcdata->clan )
fight.c.backup:      if( !IS_NPC( victim ) && victim->pcdata->clan )
fight.c.backup:   if( !npcvict && !victim->desc && !IS_SET( victim->pcdata->flags, PCFLAG_NORECALL ) )
fight.c.backup:       && IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) && IS_SET( victim->pcdata->flags, PCFLAG_DEADLY ) )
fight.c.backup:         if( ch->pcdata->clan )
fight.c.backup:            ch->pcdata->clan->mkills++;
fight.c.backup:         ch->pcdata->mkills++;
fight.c.backup:         if( ch->pcdata->deity )
fight.c.backup:            if( victim->race == ch->pcdata->deity->npcrace )
fight.c.backup:            else if( victim->race == ch->pcdata->deity->npcfoe )
fight.c.backup:         ch->pcdata->pkills++;
fight.c.backup:         victim->pcdata->pdeaths++;
fight.c.backup:         if( ch->pcdata->clan )
fight.c.backup:               ch->pcdata->clan->pkills[0]++;
fight.c.backup:               ch->pcdata->clan->pkills[1]++;
fight.c.backup:               ch->pcdata->clan->pkills[2]++;
fight.c.backup:               ch->pcdata->clan->pkills[3]++;
fight.c.backup:               ch->pcdata->clan->pkills[4]++;
fight.c.backup:               ch->pcdata->clan->pkills[5]++;
fight.c.backup:               ch->pcdata->clan->pkills[6]++;
fight.c.backup:         ch->pcdata->pkills++;
fight.c.backup:       && IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) && IS_SET( victim->pcdata->flags, PCFLAG_DEADLY ) )
fight.c.backup:      if( !ch->pcdata->clan
fight.c.backup:          || !victim->pcdata->clan
fight.c.backup:          || ( ch->pcdata->clan->clan_type != CLAN_NOKILL
fight.c.backup:               && victim->pcdata->clan->clan_type != CLAN_NOKILL && ch->pcdata->clan != victim->pcdata->clan ) )
fight.c.backup:         if( ch->pcdata->clan )
fight.c.backup:               ch->pcdata->clan->pkills[0]++;
fight.c.backup:               ch->pcdata->clan->pkills[1]++;
fight.c.backup:               ch->pcdata->clan->pkills[2]++;
fight.c.backup:               ch->pcdata->clan->pkills[3]++;
fight.c.backup:               ch->pcdata->clan->pkills[4]++;
fight.c.backup:               ch->pcdata->clan->pkills[5]++;
fight.c.backup:               ch->pcdata->clan->pkills[6]++;
fight.c.backup:         ch->pcdata->pkills++;
fight.c.backup:            ch->pcdata->condition[COND_BLOODTHIRST] = ( 10 + ch->level );
fight.c.backup:         if( victim->pcdata->clan )
fight.c.backup:               victim->pcdata->clan->pdeaths[0]++;
fight.c.backup:               victim->pcdata->clan->pdeaths[1]++;
fight.c.backup:               victim->pcdata->clan->pdeaths[2]++;
fight.c.backup:               victim->pcdata->clan->pdeaths[3]++;
fight.c.backup:               victim->pcdata->clan->pdeaths[4]++;
fight.c.backup:               victim->pcdata->clan->pdeaths[5]++;
fight.c.backup:               victim->pcdata->clan->pdeaths[6]++;
fight.c.backup:         victim->pcdata->pdeaths++;
fight.c.backup:         if( victim->pcdata->clan )
fight.c.backup:            victim->pcdata->clan->mdeaths++;
fight.c.backup:         victim->pcdata->mdeaths++;
fight.c.backup:         if( victim->pcdata->deity )
fight.c.backup:            if( ch->race == victim->pcdata->deity->npcrace )
fight.c.backup:            else if( ch->race == victim->pcdata->deity->npcfoe )
fight.c.backup:      if( ch->pcdata->clan )
fight.c.backup:         ch->pcdata->clan->illegal_pk++;
fight.c.backup:      ch->pcdata->illegal_pk++;
fight.c.backup:      if( victim->pcdata->clan )
fight.c.backup:            victim->pcdata->clan->pdeaths[0]++;
fight.c.backup:            victim->pcdata->clan->pdeaths[1]++;
fight.c.backup:            victim->pcdata->clan->pdeaths[2]++;
fight.c.backup:            victim->pcdata->clan->pdeaths[3]++;
fight.c.backup:            victim->pcdata->clan->pdeaths[4]++;
fight.c.backup:            victim->pcdata->clan->pdeaths[5]++;
fight.c.backup:            victim->pcdata->clan->pdeaths[6]++;
fight.c.backup:      victim->pcdata->pdeaths++;
fight.c.backup:    { if ( !(ch->pcdata->clan && victim->pcdata->clan
fight.c.backup:      && ch->pcdata->clan == victim->pcdata->clan ) )  return; }
fight.c.backup:   if( victim->pcdata->mdeaths + victim->pcdata->pdeaths < 3 )
fight.c.backup:   victim->pcdata->condition[COND_FULL] = 12;
fight.c.backup:   victim->pcdata->condition[COND_THIRST] = 12;
fight.c.backup:      victim->pcdata->condition[COND_BLOODTHIRST] = ( victim->level / 2 );
fight.c.backup:        ch->pcdata->ap += (victim->level * get_curr_lck(ch));
fight.c.backup:   if( dam == 0 && ( !IS_NPC( ch ) && ( IS_SET( ch->pcdata->flags, PCFLAG_GAG ) ) ) )
fight.c.backup:   if( dam == 0 && ( !IS_NPC( victim ) && ( IS_SET( victim->pcdata->flags, PCFLAG_GAG ) ) ) )
fight.c.backup:      if( ( !IS_SET( victim->pcdata->flags, PCFLAG_DEADLY )
fight.c.backup:            || !IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
fight.c.backup:         if( wf && ch->pcdata->deity )
fight.c.backup:            if( wf && wf->race == ch->pcdata->deity->npcrace )
fight.c.backup:            else if( wf && wf->race == ch->pcdata->deity->npcfoe )
handler.c:   ch_days = ( ch->pcdata->month + 1 ) * sysdata.dayspermonth;
handler.c:   ch_days += ch->pcdata->day;
handler.c:   age = time_info.year - ch->pcdata->year;
handler.c:         ch->pcdata->learned[sn] += mod;
handler.c:         ch->pcdata->learned[sn] = URANGE( 0, ch->pcdata->learned[sn] + mod, GET_ADEPT( ch, sn ) );
handler.c:            ch->pcdata->condition[COND_FULL] = URANGE( 0, ch->pcdata->condition[COND_FULL] + mod, 48 );
handler.c:            ch->pcdata->condition[COND_THIRST] = URANGE( 0, ch->pcdata->condition[COND_THIRST] + mod, 48 );
handler.c:            ch->pcdata->condition[COND_DRUNK] = URANGE( 0, ch->pcdata->condition[COND_DRUNK] + mod, 48 );
handler.c:            ch->pcdata->condition[COND_BLOODTHIRST] =
handler.c:               URANGE( 0, ch->pcdata->condition[COND_BLOODTHIRST] + mod, ch->level + 10 );
handler.c:   if( ch->pcdata->deity )
handler.c:      if( ch->pcdata->favor > ch->pcdata->deity->affectednum )
handler.c:         xSET_BITS( ch->affected_by, ch->pcdata->deity->affected );
handler.c:      if( ch->pcdata->favor > ch->pcdata->deity->elementnum )
handler.c:         SET_BIT( ch->resistant, ch->pcdata->deity->element );
handler.c:      if( ch->pcdata->favor < ch->pcdata->deity->susceptnum )
handler.c:         SET_BIT( ch->susceptible, ch->pcdata->deity->suscept );
handler.c:         if( wch->pcdata && wch->pcdata->pet == ch )
handler.c:            wch->pcdata->pet = NULL;
handler.c:      if( !IS_NPC( ch ) && ch->pcdata->clan )
handler.c:         location = get_room_index( ch->pcdata->clan->recall );
handler.c:   int drunk = IS_NPC( ch ) ? 0 : ch->pcdata->condition[COND_DRUNK];
handler.c:          && IS_SET( rch->pcdata->flags, PCFLAG_DND ) && get_trust( ch ) < get_trust( rch ) && can_see( ch, rch ) )
handler.c:   if( !IS_NPC( victim ) && xIS_SET( victim->act, PLR_WIZINVIS ) && get_trust( ch ) < victim->pcdata->wizinvis )
handler.c:      if( ch->pcdata->council && !str_cmp( ch->pcdata->council->name, "Newbie Council" ) )
handler.c:    clan_factor = 1 + abs( ch->alignment - ch->pcdata->clan->alignment ) / 1000; 
handler.c:      deity_factor = ch->pcdata->favor / -500;
handler.c:      deity_factor = ch->pcdata->favor / -500;
handler.c:   if( !IS_NPC( ch ) && ch->pcdata->nuisance && ch->pcdata->nuisance->flags > 2 )
handler.c:      c += ( int )( .4 * ( ( ch->pcdata->nuisance->flags - 2 ) * ch->pcdata->nuisance->power ) );
handler.c:      if( ch->pcdata->killed[x].vnum == vnum )
handler.c:         if( ch->pcdata->killed[x].count < 50 )
handler.c:            ++ch->pcdata->killed[x].count;
handler.c:      else if( ch->pcdata->killed[x].vnum == 0 )
handler.c:   memmove( ( char * )ch->pcdata->killed + sizeof( KILLED_DATA ),
handler.c:            ch->pcdata->killed, ( track - 1 ) * sizeof( KILLED_DATA ) );
handler.c:   ch->pcdata->killed[0].vnum = vnum;
handler.c:   ch->pcdata->killed[0].count = 1;
handler.c:      ch->pcdata->killed[track].vnum = 0;
handler.c:      if( ch->pcdata->killed[x].vnum == vnum )
handler.c:         return ch->pcdata->killed[x].count;
handler.c:      else if( ch->pcdata->killed[x].vnum == 0 )
handler.c:         if( !IS_NPC( ch ) && ch->pcdata->bestowments && is_name( cmd->name, ch->pcdata->bestowments )
handler.c.backup:   ch_days = ( ch->pcdata->month + 1 ) * sysdata.dayspermonth;
handler.c.backup:   ch_days += ch->pcdata->day;
handler.c.backup:   age = time_info.year - ch->pcdata->year;
handler.c.backup:         ch->pcdata->learned[sn] += mod;
handler.c.backup:         ch->pcdata->learned[sn] = URANGE( 0, ch->pcdata->learned[sn] + mod, GET_ADEPT( ch, sn ) );
handler.c.backup:            ch->pcdata->condition[COND_FULL] = URANGE( 0, ch->pcdata->condition[COND_FULL] + mod, 48 );
handler.c.backup:            ch->pcdata->condition[COND_THIRST] = URANGE( 0, ch->pcdata->condition[COND_THIRST] + mod, 48 );
handler.c.backup:            ch->pcdata->condition[COND_DRUNK] = URANGE( 0, ch->pcdata->condition[COND_DRUNK] + mod, 48 );
handler.c.backup:            ch->pcdata->condition[COND_BLOODTHIRST] =
handler.c.backup:               URANGE( 0, ch->pcdata->condition[COND_BLOODTHIRST] + mod, ch->level + 10 );
handler.c.backup:   if( ch->pcdata->deity )
handler.c.backup:      if( ch->pcdata->favor > ch->pcdata->deity->affectednum )
handler.c.backup:         xSET_BITS( ch->affected_by, ch->pcdata->deity->affected );
handler.c.backup:      if( ch->pcdata->favor > ch->pcdata->deity->elementnum )
handler.c.backup:         SET_BIT( ch->resistant, ch->pcdata->deity->element );
handler.c.backup:      if( ch->pcdata->favor < ch->pcdata->deity->susceptnum )
handler.c.backup:         SET_BIT( ch->susceptible, ch->pcdata->deity->suscept );
handler.c.backup:         if( wch->pcdata && wch->pcdata->pet == ch )
handler.c.backup:            wch->pcdata->pet = NULL;
handler.c.backup:      if( !IS_NPC( ch ) && ch->pcdata->clan )
handler.c.backup:         location = get_room_index( ch->pcdata->clan->recall );
handler.c.backup:   int drunk = IS_NPC( ch ) ? 0 : ch->pcdata->condition[COND_DRUNK];
handler.c.backup:          && IS_SET( rch->pcdata->flags, PCFLAG_DND ) && get_trust( ch ) < get_trust( rch ) && can_see( ch, rch ) )
handler.c.backup:   if( !IS_NPC( victim ) && xIS_SET( victim->act, PLR_WIZINVIS ) && get_trust( ch ) < victim->pcdata->wizinvis )
handler.c.backup:      if( ch->pcdata->council && !str_cmp( ch->pcdata->council->name, "Newbie Council" ) )
handler.c.backup:    clan_factor = 1 + abs( ch->alignment - ch->pcdata->clan->alignment ) / 1000; 
handler.c.backup:      deity_factor = ch->pcdata->favor / -500;
handler.c.backup:      deity_factor = ch->pcdata->favor / -500;
handler.c.backup:   if( !IS_NPC( ch ) && ch->pcdata->nuisance && ch->pcdata->nuisance->flags > 2 )
handler.c.backup:      c += ( int )( .4 * ( ( ch->pcdata->nuisance->flags - 2 ) * ch->pcdata->nuisance->power ) );
handler.c.backup:      if( ch->pcdata->killed[x].vnum == vnum )
handler.c.backup:         if( ch->pcdata->killed[x].count < 50 )
handler.c.backup:            ++ch->pcdata->killed[x].count;
handler.c.backup:      else if( ch->pcdata->killed[x].vnum == 0 )
handler.c.backup:   memmove( ( char * )ch->pcdata->killed + sizeof( KILLED_DATA ),
handler.c.backup:            ch->pcdata->killed, ( track - 1 ) * sizeof( KILLED_DATA ) );
handler.c.backup:   ch->pcdata->killed[0].vnum = vnum;
handler.c.backup:   ch->pcdata->killed[0].count = 1;
handler.c.backup:      ch->pcdata->killed[track].vnum = 0;
handler.c.backup:      if( ch->pcdata->killed[x].vnum == vnum )
handler.c.backup:         return ch->pcdata->killed[x].count;
handler.c.backup:      else if( ch->pcdata->killed[x].vnum == 0 )
handler.c.backup:         if( !IS_NPC( ch ) && ch->pcdata->bestowments && is_name( cmd->name, ch->pcdata->bestowments )
hotboot.c:         och->pcdata->hotboot = TRUE;
house.c:   if( d->character->pcdata->prev_site )
house.c:      d->character->pcdata->recent_site = STRALLOC( d->character->pcdata->prev_site );
house.c:   if( sysdata.save_pets && ch->pcdata && ch->pcdata->pet )
house.c:      extract_char( ch->pcdata->pet, TRUE );
house.c:   if( ch->pcdata && ch->pcdata->clan )
house.c:      save_clan( ch->pcdata->clan );
imccfg.h:#define CH_IMCDATA(ch)           ((ch)->pcdata->imcchardata)
imccfg.h:#define CH_IMCTITLE(ch)          ((ch)->pcdata->title)
imccfg.h:#define CH_IMCRANK(ch)           ((ch)->pcdata->rank)
interp.c:                  || ( !IS_NPC( ch ) && ch->pcdata->council
interp.c:                       && is_name( cmd->name, ch->pcdata->council->powers )
interp.c:                  || ( !IS_NPC( ch ) && IS_SET( ch->pcdata->flags, PCFLAG_RETIRED )
interp.c:                  || ( !IS_NPC( ch ) && ch->pcdata->bestowments && ch->pcdata->bestowments[0] != '\0'
interp.c:                       && is_name( cmd->name, ch->pcdata->bestowments ) && cmd->level <= ( trust + sysdata.bestow_dif ) ) ) )
interp.c:      else if( IS_SET( ch->pcdata->flags, PCFLAG_WATCH ) )
interp.c:   if( !IS_NPC( ch ) && ch->pcdata->nuisance && ch->pcdata->nuisance->flags > 9
interp.c:       && number_percent(  ) < ( ( ch->pcdata->nuisance->flags - 9 ) * 10 * ch->pcdata->nuisance->power ) )
liquids.c:   if( !IS_NPC( ch ) && ch->pcdata->condition[COND_DRUNK] > MAX_COND_VALUE - 8 )
liquids.c:                && ch->level > 5 && ch->pcdata->condition[COND_BLOODTHIRST] > ( 5 + ch->level / 10 ) )
liquids.c:            if( ch->pcdata->condition[COND_BLOODTHIRST] < ( 10 + ch->level ) )
liquids.c:               if( ch->pcdata->condition[COND_FULL] >= MAX_COND_VALUE
liquids.c:                   || ch->pcdata->condition[COND_THIRST] >= MAX_COND_VALUE )
liquids.c:            ch->pcdata->condition[COND_THIRST] = MAX_COND_VALUE;
liquids.c:         if( !IS_NPC( ch ) && ( ch->pcdata->condition[COND_THIRST] == MAX_COND_VALUE
liquids.c:                                || ch->pcdata->condition[COND_FULL] == MAX_COND_VALUE ) )
liquids.c:            if( ch->pcdata->condition[COND_DRUNK] > ( MAX_COND_VALUE / 2 )
liquids.c:                && ch->pcdata->condition[COND_DRUNK] < ( MAX_COND_VALUE * .4 ) )
liquids.c:            else if( ch->pcdata->condition[COND_DRUNK] >= ( MAX_COND_VALUE * .4 )
liquids.c:                     && ch->pcdata->condition[COND_DRUNK] < ( MAX_COND_VALUE * .6 ) )
liquids.c:            else if( ch->pcdata->condition[COND_DRUNK] >= ( MAX_COND_VALUE * .6 )
liquids.c:                     && ch->pcdata->condition[COND_DRUNK] < ( MAX_COND_VALUE * .9 ) )
liquids.c:            else if( ch->pcdata->condition[COND_DRUNK] >= ( MAX_COND_VALUE * .9 )
liquids.c:                     && ch->pcdata->condition[COND_DRUNK] < MAX_COND_VALUE )
liquids.c:            else if( ch->pcdata->condition[COND_DRUNK] == MAX_COND_VALUE )
liquids.c:            if( ch->pcdata->condition[COND_THIRST] > ( MAX_COND_VALUE / 2 )
liquids.c:                && ch->pcdata->condition[COND_THIRST] < ( MAX_COND_VALUE * .4 ) )
liquids.c:            else if( ch->pcdata->condition[COND_THIRST] >= ( MAX_COND_VALUE * .4 )
liquids.c:                     && ch->pcdata->condition[COND_THIRST] < ( MAX_COND_VALUE * .6 ) )
liquids.c:            else if( ch->pcdata->condition[COND_THIRST] >= ( MAX_COND_VALUE * .6 )
liquids.c:                     && ch->pcdata->condition[COND_THIRST] < ( MAX_COND_VALUE * .9 ) )
liquids.c:            else if( ch->pcdata->condition[COND_THIRST] >= ( MAX_COND_VALUE * .9 )
liquids.c:                     && ch->pcdata->condition[COND_THIRST] < MAX_COND_VALUE )
liquids.c:            else if( ch->pcdata->condition[COND_THIRST] == MAX_COND_VALUE )
liquids.c:               if( ch->pcdata->condition[COND_BLOODTHIRST] > ( MAX_COND_VALUE / 2 )
liquids.c:                   && ch->pcdata->condition[COND_BLOODTHIRST] < ( MAX_COND_VALUE * .4 ) )
liquids.c:               else if( ch->pcdata->condition[COND_BLOODTHIRST] >= ( MAX_COND_VALUE * .4 )
liquids.c:                        && ch->pcdata->condition[COND_BLOODTHIRST] < ( MAX_COND_VALUE * .6 ) )
liquids.c:               else if( ch->pcdata->condition[COND_BLOODTHIRST] >= ( MAX_COND_VALUE * .6 )
liquids.c:                        && ch->pcdata->condition[COND_BLOODTHIRST] < ( MAX_COND_VALUE * .9 ) )
liquids.c:               else if( ch->pcdata->condition[COND_BLOODTHIRST] >= ( MAX_COND_VALUE * .9 )
liquids.c:                        && ch->pcdata->condition[COND_BLOODTHIRST] < MAX_COND_VALUE )
liquids.c:            else if( !IS_VAMPIRE( ch ) && ch->pcdata->condition[COND_BLOODTHIRST] >= MAX_COND_VALUE )
liquids.c:               ch->pcdata->condition[COND_BLOODTHIRST] = MAX_COND_VALUE;
liquids.c:            if( ch->pcdata->condition[COND_DRUNK] > ( MAX_COND_VALUE / 2 )
liquids.c:                && ch->pcdata->condition[COND_DRUNK] < ( MAX_COND_VALUE * .4 ) )
liquids.c:            else if( ch->pcdata->condition[COND_DRUNK] >= ( MAX_COND_VALUE * .4 )
liquids.c:                     && ch->pcdata->condition[COND_DRUNK] < ( MAX_COND_VALUE * .6 ) )
liquids.c:            else if( ch->pcdata->condition[COND_DRUNK] >= ( MAX_COND_VALUE * .6 )
liquids.c:                     && ch->pcdata->condition[COND_DRUNK] < ( MAX_COND_VALUE * .9 ) )
liquids.c:            else if( ch->pcdata->condition[COND_DRUNK] >= ( MAX_COND_VALUE * .9 )
liquids.c:                     && ch->pcdata->condition[COND_DRUNK] < MAX_COND_VALUE )
liquids.c:            else if( ch->pcdata->condition[COND_DRUNK] == MAX_COND_VALUE )
liquids.c:            if( ch->pcdata->condition[COND_THIRST] > ( MAX_COND_VALUE / 2 )
liquids.c:                && ch->pcdata->condition[COND_THIRST] < ( MAX_COND_VALUE * .4 ) )
liquids.c:            else if( ch->pcdata->condition[COND_THIRST] >= ( MAX_COND_VALUE * .4 )
liquids.c:                     && ch->pcdata->condition[COND_THIRST] < ( MAX_COND_VALUE * .6 ) )
liquids.c:            else if( ch->pcdata->condition[COND_THIRST] >= ( MAX_COND_VALUE * .6 )
liquids.c:                     && ch->pcdata->condition[COND_THIRST] < ( MAX_COND_VALUE * .9 ) )
liquids.c:            else if( ch->pcdata->condition[COND_THIRST] >= ( MAX_COND_VALUE * .9 )
liquids.c:                     && ch->pcdata->condition[COND_THIRST] < MAX_COND_VALUE )
liquids.c:            else if( ch->pcdata->condition[COND_THIRST] == MAX_COND_VALUE )
liquids.c:               if( ch->pcdata->condition[COND_BLOODTHIRST] > ( MAX_COND_VALUE / 2 )
liquids.c:                   && ch->pcdata->condition[COND_BLOODTHIRST] < ( MAX_COND_VALUE * .4 ) )
liquids.c:               else if( ch->pcdata->condition[COND_BLOODTHIRST] >= ( MAX_COND_VALUE * .4 )
liquids.c:                        && ch->pcdata->condition[COND_BLOODTHIRST] < ( MAX_COND_VALUE * .6 ) )
liquids.c:               else if( ch->pcdata->condition[COND_BLOODTHIRST] >= ( MAX_COND_VALUE * .6 )
liquids.c:                        && ch->pcdata->condition[COND_BLOODTHIRST] < ( MAX_COND_VALUE * .9 ) )
liquids.c:               else if( ch->pcdata->condition[COND_BLOODTHIRST] >= ( MAX_COND_VALUE * .9 )
liquids.c:                        && ch->pcdata->condition[COND_BLOODTHIRST] < MAX_COND_VALUE )
liquids.c:            else if( !IS_VAMPIRE( ch ) && ch->pcdata->condition[COND_BLOODTHIRST] >= MAX_COND_VALUE )
liquids.c:               ch->pcdata->condition[COND_BLOODTHIRST] = MAX_COND_VALUE;
liquids.c:            if( !IS_OBJ_STAT( source, ITEM_CLANCORPSE ) || !IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
magic.c:   if( ch->pcdata->learned[sn] > 0
magic.c:      if( ch->pcdata->learned[sn] > 0
magic.c:      if( !ch->pcdata->special_skills[sn] || !ch->pcdata->special_skills[sn]->name )
magic.c:      if( LOWER( name[0] ) == LOWER( ch->pcdata->special_skills[sn]->name[0] )
magic.c:          && !str_prefix( name, ch->pcdata->special_skills[sn]->name ) )
magic.c:            return ch->pcdata->intel;
magic.c:         if( !IS_NPC( ch ) && ch->pcdata->nuisance &&
magic.c:             ch->pcdata->nuisance->flags > 5
magic.c:             && number_percent(  ) < ( ( ( ch->pcdata->nuisance->flags - 5 ) * 8 ) + ch->pcdata->nuisance->power * 6 ) )
magic.c:         if( !IS_NPC( ch ) && ch->fighting && ch->pcdata->nuisance &&
magic.c:             ch->pcdata->nuisance->flags > 5
magic.c:             && number_percent(  ) < ( ( ( ch->pcdata->nuisance->flags - 5 ) * 8 ) + 6 * ch->pcdata->nuisance->power ) )
magic.c:             && skill->guild != CLASS_NONE && ( !ch->pcdata->clan || skill->guild != ch->pcdata->clan->Class ) )
magic.c:            if( ch->pcdata->condition[COND_BLOODTHIRST] < blood )
magic.c:   if( !IS_NPC( ch ) && ( number_percent(  ) + skill->difficulty * 5 ) > ch->pcdata->learned[sn] )
magic.c:         if( !IS_NPC( vch ) && xIS_SET( vch->act, PLR_WIZINVIS ) && vch->pcdata->wizinvis >= LEVEL_IMMORTAL )
magic.c:   if( ( ( get_curr_cha( ch ) / 3 ) + 1 ) > ch->pcdata->charmies )
magic.c:      ch->pcdata->charmies++;
magic.c:   schance = ( ch->pcdata->intel  - victim->pcdata->intel  );
magic.c:         if( !IS_NPC( vch ) && xIS_SET( vch->act, PLR_WIZINVIS ) && vch->pcdata->wizinvis >= LEVEL_IMMORTAL )
magic.c:             && ( get_trust( ch ) < in_obj->carried_by->pcdata->wizinvis )
magic.c:       || ( !IS_NPC( ch ) && !IS_NPC( victim ) && IS_SET( victim->pcdata->flags, PCFLAG_NOSUMMON ) ) )
magic.c:      if( !IS_NPC( vch ) && xIS_SET( vch->act, PLR_WIZINVIS ) && vch->pcdata->wizinvis >= LEVEL_IMMORTAL )
magic.c:   if( IS_PKILL( ch ) && ch->pcdata->condition[COND_BLOODTHIRST] > 22 )
magic.c:         if( !IS_IMMORTAL( ch ) && ch->pcdata->condition[COND_BLOODTHIRST] - ( pMobIndex->level / 3 ) < 0 )
magic.c:      if( !IS_NPC( vch ) && xIS_SET( vch->act, PLR_WIZINVIS ) && vch->pcdata->wizinvis >= LEVEL_IMMORTAL )
magic.c:      if( !IS_NPC( vch ) && xIS_SET( vch->act, PLR_WIZINVIS ) && vch->pcdata->wizinvis >= LEVEL_IMMORTAL )
magic.c:               if( ch->level - obj->level < 10 || obj->cost > ch->level * ch->pcdata->intel )
magic.c:               if( ch->level - obj->level < 20 || obj->cost > ch->level * ch->pcdata->intel / 5 )
magic.c:               if( ch->level - obj->level < 5 || obj->cost > ch->level * 10 * ch->pcdata->intel )
magic.c:               if( ch->level - obj->level < 0 || obj->cost > ch->level * 50 * ch->pcdata->intel )
mapout.c:   for( i = ch->pcdata->area->low_r_vnum; i <= ch->pcdata->area->hi_r_vnum; i++ )
mapout.c:         if( !( location = make_room( i, ch->pcdata->area ) ) )
mapout.c:         location->area = ch->pcdata->area;
mapout.c:   for( i = ch->pcdata->area->low_r_vnum; i <= ch->pcdata->area->hi_r_vnum; i++ )
mapout.c:      for( i = ch->pcdata->area->low_r_vnum; i <= ch->pcdata->area->hi_r_vnum; i++ )
misc.c:   if( IS_NPC( ch ) || ch->pcdata->condition[COND_FULL] > 5 )
misc.c:      if( !IS_NPC( ch ) && ch->pcdata->condition[COND_FULL] > 40 )
misc.c:   if( !IS_NPC( ch ) && ( !IS_PKILL( ch ) || ( IS_PKILL( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_HIGHGAG ) ) ) )
misc.c:               condition = ch->pcdata->condition[COND_FULL];
misc.c:               if( condition <= 1 && ch->pcdata->condition[COND_FULL] > 1 )
misc.c:               else if( ch->pcdata->condition[COND_FULL] > 40 )
misc.c:               condition = ch->pcdata->condition[COND_FULL];
misc.c:               if( condition <= 1 && ch->pcdata->condition[COND_FULL] > 1 )
misc.c:               else if( ch->pcdata->condition[COND_FULL] > 40 )
misc.c:   if( !IS_NPC( ch ) && ( ch->pcdata->condition[COND_FULL] >= 48 || ch->pcdata->condition[COND_THIRST] >= 48 ) )
misc.c:   if( !IS_NPC( ch ) && ch->pcdata->nuisance &&
misc.c:       ch->pcdata->nuisance->flags > 3
misc.c:       && ( ch->pcdata->condition[COND_FULL] >= ( 48 - ( 3 * ch->pcdata->nuisance->flags ) + ch->pcdata->nuisance->power )
misc.c:            || ch->pcdata->condition[COND_THIRST] >= ( 48 - ( ch->pcdata->nuisance->flags ) + ch->pcdata->nuisance->power ) ) )
misc.c:   if( !IS_NPC( ch ) && ( !IS_PKILL( ch ) || ( IS_PKILL( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_HIGHGAG ) ) ) )
misc.c:      if( !IS_NPC( ch ) && ch->pcdata->condition[COND_THIRST] > 43 )
mpxset.c:	victim->pcdata->quest = value;
mpxset.c:      victim->pcdata->quest_curr += value;
mpxset.c:      victim->pcdata->quest_accum += value;
mpxset.c:      victim->pcdata->favor = value;
mpxset.c:      victim->pcdata->condition[COND_THIRST] = value;
mpxset.c:      victim->pcdata->condition[COND_DRUNK] = value;
mpxset.c:      victim->pcdata->condition[COND_FULL] = value;
mpxset.c:      victim->pcdata->condition[COND_BLOODTHIRST] = value;
mpxset.c:         STRFREE( victim->pcdata->deity_name );
mpxset.c:         victim->pcdata->deity_name = STRALLOC( "" );
mpxset.c:         victim->pcdata->deity = NULL;
mpxset.c:      STRFREE( victim->pcdata->deity_name );
mpxset.c:      victim->pcdata->deity_name = QUICKLINK( deity->name );
mpxset.c:      victim->pcdata->deity = deity;
mud_comm.c:               drunk = vch->pcdata->condition[COND_DRUNK];
mud_comm.c:               vch->pcdata->condition[COND_DRUNK] = 0;
mud_comm.c:               vch->pcdata->condition[COND_DRUNK] = drunk;
mud_comm.c:         drunk = victim->pcdata->condition[COND_DRUNK];
mud_comm.c:         victim->pcdata->condition[COND_DRUNK] = 0;
mud_comm.c:         victim->pcdata->condition[COND_DRUNK] = drunk;
mud_comm.c:   if( victim->pcdata->nuisance )
mud_comm.c:   CREATE( victim->pcdata->nuisance, NUISANCE_DATA, 1 );
mud_comm.c:   victim->pcdata->nuisance->set_time = current_time;
mud_comm.c:   victim->pcdata->nuisance->flags = 1;
mud_comm.c:   victim->pcdata->nuisance->power = 2;
mud_comm.c:   victim->pcdata->nuisance->max_time = mktime( now_time );
mud_comm.c:   if( !ch->pcdata->nuisance )
mud_comm.c:   DISPOSE( victim->pcdata->nuisance );
mud_comm.c:   if( ( victim->pcdata->learned[sn] >= adept ) || ( victim->pcdata->learned[sn] >= max ) )
mud_comm.c:   victim->pcdata->learned[sn] = max;
mud_comm.c:   if( victim->pcdata->learned[sn] >= adept )
mud_comm.c:      victim->pcdata->learned[sn] = adept;
mud_comm.c:      victim->pcdata->favor = URANGE( -2500, victim->pcdata->favor + favor, 2500 );
mud_comm.c:      victim->pcdata->favor = URANGE( -2500, victim->pcdata->favor - favor, 2500 );
mud_comm.c:      victim->pcdata->favor = URANGE( -2500, favor, 2500 );
mud_comm.c:   if( victim->pcdata->auth_state >= 1 )
mud_comm.c:   victim->pcdata->auth_state = 1;
mud_comm.c:   switch ( victim->pcdata->auth_state )
mud_comm.c:         victim->pcdata->auth_state = 1;
mud_comm.c:         REMOVE_BIT( victim->pcdata->flags, PCFLAG_UNAUTHED );
mud_comm.c:      if( !IS_SET( victim->pcdata->flags, PCFLAG_DEADLY ) )
mud_comm.c:         SET_BIT( victim->pcdata->flags, PCFLAG_DEADLY );
mud_comm.c:      if( IS_SET( victim->pcdata->flags, PCFLAG_DEADLY ) )
mud_comm.c:         REMOVE_BIT( victim->pcdata->flags, PCFLAG_DEADLY );
mud_comm.c.backup:               drunk = vch->pcdata->condition[COND_DRUNK];
mud_comm.c.backup:               vch->pcdata->condition[COND_DRUNK] = 0;
mud_comm.c.backup:               vch->pcdata->condition[COND_DRUNK] = drunk;
mud_comm.c.backup:         drunk = victim->pcdata->condition[COND_DRUNK];
mud_comm.c.backup:         victim->pcdata->condition[COND_DRUNK] = 0;
mud_comm.c.backup:         victim->pcdata->condition[COND_DRUNK] = drunk;
mud_comm.c.backup:   if( victim->pcdata->nuisance )
mud_comm.c.backup:   CREATE( victim->pcdata->nuisance, NUISANCE_DATA, 1 );
mud_comm.c.backup:   victim->pcdata->nuisance->set_time = current_time;
mud_comm.c.backup:   victim->pcdata->nuisance->flags = 1;
mud_comm.c.backup:   victim->pcdata->nuisance->power = 2;
mud_comm.c.backup:   victim->pcdata->nuisance->max_time = mktime( now_time );
mud_comm.c.backup:   if( !ch->pcdata->nuisance )
mud_comm.c.backup:   DISPOSE( victim->pcdata->nuisance );
mud_comm.c.backup:   if( ( victim->pcdata->learned[sn] >= adept ) || ( victim->pcdata->learned[sn] >= max ) )
mud_comm.c.backup:   victim->pcdata->learned[sn] = max;
mud_comm.c.backup:   if( victim->pcdata->learned[sn] >= adept )
mud_comm.c.backup:      victim->pcdata->learned[sn] = adept;
mud_comm.c.backup:      victim->pcdata->favor = URANGE( -2500, victim->pcdata->favor + favor, 2500 );
mud_comm.c.backup:      victim->pcdata->favor = URANGE( -2500, victim->pcdata->favor - favor, 2500 );
mud_comm.c.backup:      victim->pcdata->favor = URANGE( -2500, favor, 2500 );
mud_comm.c.backup:   if( victim->pcdata->auth_state >= 1 )
mud_comm.c.backup:   victim->pcdata->auth_state = 1;
mud_comm.c.backup:   switch ( victim->pcdata->auth_state )
mud_comm.c.backup:         victim->pcdata->auth_state = 1;
mud_comm.c.backup:         REMOVE_BIT( victim->pcdata->flags, PCFLAG_UNAUTHED );
mud_comm.c.backup:      if( !IS_SET( victim->pcdata->flags, PCFLAG_DEADLY ) )
mud_comm.c.backup:         SET_BIT( victim->pcdata->flags, PCFLAG_DEADLY );
mud_comm.c.backup:      if( IS_SET( victim->pcdata->flags, PCFLAG_DEADLY ) )
mud_comm.c.backup:         REMOVE_BIT( victim->pcdata->flags, PCFLAG_DEADLY );
mud.h:#define IS_DRUNK(ch, drunk)     (number_percent() < ( (ch)->pcdata->condition[COND_DRUNK] * 2 / (drunk) ) )
mud.h:				&& (ch)->pcdata->clan			    \
mud.h:				&& (ch)->pcdata->clan->clan_type != CLAN_ORDER  \
mud.h:				&& (ch)->pcdata->clan->clan_type != CLAN_GUILD)
mud.h:				&& (ch)->pcdata->clan			    \
mud.h:				&& (ch)->pcdata->clan->clan_type == CLAN_ORDER)
mud.h:				&& (ch)->pcdata->clan			    \
mud.h:				&& (ch)->pcdata->clan->clan_type == CLAN_GUILD)
mud.h:                && (ch)->pcdata->clan                \
mud.h:                && (ch)->pcdata->clan->clan_type != CLAN_NOKILL \
mud.h:                && (ch)->pcdata->clan->clan_type != CLAN_ORDER  \
mud.h:                && (ch)->pcdata->clan->clan_type != CLAN_GUILD)
mud.h:				&& (ch)->pcdata->deity)
mud.h:#define IS_IDLE(ch)		((ch)->pcdata && IS_SET( (ch)->pcdata->flags, PCFLAG_IDLE ))
mud.h:#define IS_PKILL(ch)            ((ch)->pcdata && IS_SET( (ch)->pcdata->flags, PCFLAG_DEADLY ))
mud.h:#define WAIT_STATE(ch, npulse) ((ch)->wait=(!IS_NPC(ch)&&ch->pcdata->nuisance&&\
mud.h:			      (ch->pcdata->nuisance->flags>4))?UMAX((ch)->wait,\
mud.h:			      (npulse+((ch)->pcdata->nuisance->flags-4)+ \
mud.h:               		      ch->pcdata->nuisance->power)): \
mud.h:#define IS_RETIRED(ch) (ch->pcdata && IS_SET(ch->pcdata->flags,PCFLAG_RETIRED))
mud.h:#define IS_GUEST(ch) (ch->pcdata && IS_SET(ch->pcdata->flags,PCFLAG_GUEST))
mud.h:#define NOT_AUTHED(ch)		(!IS_NPC(ch) && ch->pcdata->auth_state <= 3  \
mud.h:			      && IS_SET(ch->pcdata->flags, PCFLAG_UNAUTHED) )
mud.h:			      && ch->pcdata->auth_state == 1		     \
mud.h:			      && IS_SET(ch->pcdata->flags, PCFLAG_UNAUTHED) )
mud.h:#define LEARNED(ch,sn)	    (IS_NPC(ch) ? 80 : URANGE(0, (ch)->pcdata->learned[(sn)], 101))
mud.h.backup:#define IS_DRUNK(ch, drunk)     (number_percent() < ( (ch)->pcdata->condition[COND_DRUNK] * 2 / (drunk) ) )
mud.h.backup:				&& (ch)->pcdata->clan			    \
mud.h.backup:				&& (ch)->pcdata->clan->clan_type != CLAN_ORDER  \
mud.h.backup:				&& (ch)->pcdata->clan->clan_type != CLAN_GUILD)
mud.h.backup:				&& (ch)->pcdata->clan			    \
mud.h.backup:				&& (ch)->pcdata->clan->clan_type == CLAN_ORDER)
mud.h.backup:				&& (ch)->pcdata->clan			    \
mud.h.backup:				&& (ch)->pcdata->clan->clan_type == CLAN_GUILD)
mud.h.backup:                && (ch)->pcdata->clan                \
mud.h.backup:                && (ch)->pcdata->clan->clan_type != CLAN_NOKILL \
mud.h.backup:                && (ch)->pcdata->clan->clan_type != CLAN_ORDER  \
mud.h.backup:                && (ch)->pcdata->clan->clan_type != CLAN_GUILD)
mud.h.backup:				&& (ch)->pcdata->deity)
mud.h.backup:#define IS_IDLE(ch)		((ch)->pcdata && IS_SET( (ch)->pcdata->flags, PCFLAG_IDLE ))
mud.h.backup:#define IS_PKILL(ch)            ((ch)->pcdata && IS_SET( (ch)->pcdata->flags, PCFLAG_DEADLY ))
mud.h.backup:#define WAIT_STATE(ch, npulse) ((ch)->wait=(!IS_NPC(ch)&&ch->pcdata->nuisance&&\
mud.h.backup:			      (ch->pcdata->nuisance->flags>4))?UMAX((ch)->wait,\
mud.h.backup:			      (npulse+((ch)->pcdata->nuisance->flags-4)+ \
mud.h.backup:               		      ch->pcdata->nuisance->power)): \
mud.h.backup:#define IS_RETIRED(ch) (ch->pcdata && IS_SET(ch->pcdata->flags,PCFLAG_RETIRED))
mud.h.backup:#define IS_GUEST(ch) (ch->pcdata && IS_SET(ch->pcdata->flags,PCFLAG_GUEST))
mud.h.backup:#define NOT_AUTHED(ch)		(!IS_NPC(ch) && ch->pcdata->auth_state <= 3  \
mud.h.backup:			      && IS_SET(ch->pcdata->flags, PCFLAG_UNAUTHED) )
mud.h.backup:			      && ch->pcdata->auth_state == 1		     \
mud.h.backup:			      && IS_SET(ch->pcdata->flags, PCFLAG_UNAUTHED) )
mud.h.backup:#define LEARNED(ch,sn)	    (IS_NPC(ch) ? 80 : URANGE(0, (ch)->pcdata->learned[(sn)], 101))
mud_prog.c:         return ( !IS_NPC( chkchar ) ? mprog_veval( chkchar->pcdata->condition[COND_DRUNK], opr, atoi( rval ), mob ) : FALSE );
mud_prog.c:         return ( !IS_NPC( chkchar ) ? chkchar->pcdata->nuisance ? TRUE : FALSE : FALSE );
mud_prog.c:         return IS_NPC( chkchar ) ? FALSE : mprog_veval( chkchar->pcdata->quest_number, opr, atoi( rval ), mob );
mud_prog.c:         return IS_NPC( chkchar ) ? FALSE : mprog_veval( chkchar->pcdata->release_date, opr, atoi( rval ), mob );
mud_prog.c:         if( IS_NPC( chkchar ) || !chkchar->pcdata->nuisance )
mud_prog.c:         return mprog_veval( chkchar->pcdata->nuisance->flags, opr, rhsvl, mob );
mud_prog.c:         if( IS_NPC( chkchar ) || !chkchar->pcdata->clan )
mud_prog.c:         return mprog_seval( chkchar->pcdata->clan->name, opr, rval, mob );
mud_prog.c:         if( IS_NPC( chkchar ) || !chkchar->pcdata->council )
mud_prog.c:         return mprog_seval( chkchar->pcdata->council->name, opr, rval, mob );
mud_prog.c:         if( IS_NPC( chkchar ) || !chkchar->pcdata->deity )
mud_prog.c:         return mprog_seval( chkchar->pcdata->deity->name, opr, rval, mob );
mud_prog.c:         return mprog_seval( chkchar->pcdata->clan->name, opr, rval, mob );
mud_prog.c:         if( IS_NPC( chkchar ) || !chkchar->pcdata->clan )
mud_prog.c:         return mprog_veval( chkchar->pcdata->clan->clan_type, opr, atoi( rval ), mob );
mud_prog.c:         if( IS_NPC( chkchar ) || !chkchar->pcdata->favor )
mud_prog.c:         return mprog_veval( chkchar->pcdata->favor, opr, atoi( rval ), mob );
mud_prog.c:         return mprog_seval( chkchar->pcdata->rank, opr, rval, mob );
mud_prog.c:                  strcat( t, actor->pcdata->title );
mud_prog.c:                  strcat( t, vict->pcdata->title );
mud_prog.c:                  strcat( t, rndm->pcdata->title );
player.c:   pager_printf( ch, "\r\nWorth for %s%s.\r\n", ch->name, ch->pcdata->title );
player.c:   if( !ch->pcdata->deity )
player.c:   else if( ch->pcdata->favor > 2250 )
player.c:   else if( ch->pcdata->favor > 2000 )
player.c:   else if( ch->pcdata->favor > 1750 )
player.c:   else if( ch->pcdata->favor > 1500 )
player.c:   else if( ch->pcdata->favor > 1250 )
player.c:   else if( ch->pcdata->favor > 1000 )
player.c:   else if( ch->pcdata->favor > 750 )
player.c:   else if( ch->pcdata->favor > 250 )
player.c:   else if( ch->pcdata->favor > -250 )
player.c:   else if( ch->pcdata->favor > -750 )
player.c:   else if( ch->pcdata->favor > -1000 )
player.c:   else if( ch->pcdata->favor > -1250 )
player.c:   else if( ch->pcdata->favor > -1500 )
player.c:   else if( ch->pcdata->favor > -1750 )
player.c:   else if( ch->pcdata->favor > -2000 )
player.c:   else if( ch->pcdata->favor > -2250 )
player.c:                 ch->pcdata->quest_curr, ch->carry_weight, buf, num_punct( ch->gold ) );
player.c:   if( !ch->pcdata->deity )
player.c:   if( ch->pcdata->favor < ch->level * 2 )
player.c:   pager_printf( ch, "%s appears in a vision, revealing that your remains... ", ch->pcdata->deity->name );
player.c:      ch->pcdata->favor -= ch->level * 2;
player.c:   STRFREE( ch->pcdata->title );
player.c:   ch->pcdata->title = STRALLOC( buf );
player.c:   if( IS_SET( ch->pcdata->flags, PCFLAG_NOTITLE ) )
player.c:   if( IS_SET( ch->pcdata->flags, PCFLAG_NOCPOSE ) )
player.c:      if( !ch->pcdata->cpose )
player.c:         ch->pcdata->cpose = str_dup( "" );
player.c:      ch_printf( ch, "Your cpose is: %s\r\n", show_tilde( ch->pcdata->cpose ) );
player.c:      if( ch->pcdata->cpose )
player.c:         DISPOSE( ch->pcdata->cpose );
player.c:      ch->pcdata->cpose = str_dup( "" );
player.c:   if( ch->pcdata->cpose )
player.c:      DISPOSE( ch->pcdata->cpose );
player.c:   ch->pcdata->cpose = str_dup( buf );
player.c:   if( IS_SET( ch->pcdata->flags, PCFLAG_NODESC ) )
player.c:   if( IS_SET( ch->pcdata->flags, PCFLAG_NOBIO ) )
player.c:         start_editing( ch, ch->pcdata->bio );
player.c:         STRFREE( ch->pcdata->bio );
player.c:         ch->pcdata->bio = copy_buffer( ch );
player.c:                 ch->hit, ch->max_hit, ch->pcdata->condition[COND_BLOODTHIRST],
player.c:                ch->hit, ch->max_hit, ch->pcdata->condition[COND_BLOODTHIRST],
player.c:              ch->pcdata->str,  ch->pcdata->intel, ch->pcdata->dex,  ch->pcdata->lck );
player.c:              ch->pcdata->str,  ch->pcdata->intel, ch->pcdata->dex,  ch->pcdata->lck );
player.c:                 ch->hit, ch->max_hit, ch->pcdata->condition[COND_BLOODTHIRST],
player.c:                 ch->pcdata->condition[COND_BLOODTHIRST], 10 + ch->level, ch->move, ch->max_move, ch->exp );
player.c:                ch->pcdata->condition[COND_BLOODTHIRST], 10 + ch->level, ch->move, ch->max_move, ch->exp );
player.c:      ch_printf( ch, "%s\r\n", !str_cmp( ch->pcdata->fprompt, "" ) ? "(default prompt)" : ch->pcdata->fprompt );
player.c:   ch_printf( ch, "%s\r\n", !str_cmp( ch->pcdata->fprompt, "" ) ? "(default prompt)" : ch->pcdata->fprompt );
player.c:   if( ch->pcdata->fprompt )
player.c:      STRFREE( ch->pcdata->fprompt );
player.c:      ch->pcdata->fprompt = STRALLOC( "" );
player.c:      ch->pcdata->fprompt = STRALLOC( ch->pcdata->prompt );
player.c:      ch->pcdata->fprompt = STRALLOC( argument );
player.c:      ch_printf( ch, "%s\r\n", !str_cmp( ch->pcdata->prompt, "" ) ? "(default prompt)" : ch->pcdata->prompt );
player.c:   ch_printf( ch, "%s\r\n", !str_cmp( ch->pcdata->prompt, "" ) ? "(default prompt)" : ch->pcdata->prompt );
player.c:   if( ch->pcdata->prompt )
player.c:      STRFREE( ch->pcdata->prompt );
player.c:      ch->pcdata->prompt = STRALLOC( "" );
player.c:      ch->pcdata->prompt = STRALLOC( ch->pcdata->fprompt );
player.c:      ch->pcdata->prompt = STRALLOC( argument );
player.c:   if( !ch->pcdata->deity )
player.c:   else if( ch->pcdata->favor > 2250 )
player.c:   else if( ch->pcdata->favor > 2000 )
player.c:   else if( ch->pcdata->favor > 1750 )
player.c:   else if( ch->pcdata->favor > 1500 )
player.c:   else if( ch->pcdata->favor > 1250 )
player.c:   else if( ch->pcdata->favor > 1000 )
player.c:   else if( ch->pcdata->favor > 750 )
player.c:   else if( ch->pcdata->favor > 250 )
player.c:   else if( ch->pcdata->favor > -250 )
player.c:   else if( ch->pcdata->favor > -750 )
player.c:   else if( ch->pcdata->favor > -1000 )
player.c:   else if( ch->pcdata->favor > -1250 )
player.c:   else if( ch->pcdata->favor > -1500 )
player.c:   else if( ch->pcdata->favor > -1750 )
player.c:   else if( ch->pcdata->favor > -2000 )
player.c:   else if( ch->pcdata->favor > -2250 )
player.c:   ch_printf( ch, "%s considers you to be %s.\n\r", ch->pcdata->deity->name, buf );
polymorph.c:   if( morph->deity && ( !ch->pcdata->deity || !get_deity( morph->deity ) ) )
polymorph.c:         STRFREE( ch->pcdata->subprompt );
polymorph.c:      STRFREE( ch->pcdata->subprompt );
polymorph.c:      ch->pcdata->subprompt = STRALLOC( buf );
polymorph.c:      if( IS_NPC( ch ) || !ch->pcdata->deity || ch->pcdata->favor < morph->favourused )
polymorph.c:         ch->pcdata->favor -= morph->favourused;
renumber.c:      if( area->low_r_vnum < ch->pcdata->r_range_lo || area->hi_r_vnum > ch->pcdata->r_range_hi ||
renumber.c:          area->low_m_vnum < ch->pcdata->m_range_lo || area->hi_m_vnum > ch->pcdata->m_range_hi ||
renumber.c:          area->low_o_vnum < ch->pcdata->o_range_lo || area->hi_o_vnum > ch->pcdata->o_range_hi )
renumber.c:      if( r_area->low_room < ch->pcdata->r_range_lo || r_area->hi_room > ch->pcdata->r_range_hi ||
renumber.c:          r_area->low_obj < ch->pcdata->o_range_lo || r_area->hi_obj > ch->pcdata->o_range_hi ||
renumber.c:          r_area->low_mob < ch->pcdata->m_range_lo || r_area->hi_mob > ch->pcdata->m_range_hi )
reset.c:   if( IS_NPC( ch ) || get_trust( ch ) < LEVEL_SAVIOR || !ch->pcdata->area )
reset.c:   if( ch->in_room->area != ch->pcdata->area && get_trust( ch ) < LEVEL_GREATER )
reset.c:   if( IS_NPC( ch ) || get_trust( ch ) < LEVEL_SAVIOR || !ch->pcdata->area )
reset.c:   pArea = ch->pcdata->area;
save.c:   ch->pcdata->day = ( number_range( 1, sysdata.dayspermonth ) - 1 );   /* Assign random day of birth */
save.c:   ch->pcdata->month = ( number_range( 1, sysdata.monthsperyear ) - 1 );   /* Assign random month of birth */
save.c:   ch->pcdata->year = time_info.year - age;  /* Assign birth year based on calculations above */
save.c:   snprintf( strsave, MAX_INPUT_LENGTH, "%s%c/%s", PLAYER_DIR, tolower( ch->pcdata->filename[0] ),
save.c:             capitalize( ch->pcdata->filename ) );
save.c:      snprintf( strback, MAX_INPUT_LENGTH, "%s%c/%s", BACKUP_DIR, tolower( ch->pcdata->filename[0] ),
save.c:                capitalize( ch->pcdata->filename ) );
save.c:   if( ch->level >= LEVEL_IMMORTAL || IS_SET( ch->pcdata->flags, PCFLAG_RETIRED ) )
save.c:      snprintf( strback, MAX_INPUT_LENGTH, "%s%s", GOD_DIR, capitalize( ch->pcdata->filename ) );
save.c:         fprintf( fp, "Pcflags      %d\n", ch->pcdata->flags );
save.c:         if( ch->pcdata->r_range_lo && ch->pcdata->r_range_hi )
save.c:            fprintf( fp, "RoomRange    %d %d\n", ch->pcdata->r_range_lo, ch->pcdata->r_range_hi );
save.c:         if( ch->pcdata->o_range_lo && ch->pcdata->o_range_hi )
save.c:            fprintf( fp, "ObjRange     %d %d\n", ch->pcdata->o_range_lo, ch->pcdata->o_range_hi );
save.c:         if( ch->pcdata->m_range_lo && ch->pcdata->m_range_hi )
save.c:            fprintf( fp, "MobRange     %d %d\n", ch->pcdata->m_range_lo, ch->pcdata->m_range_hi );
save.c:         fwrite_obj( ch, ch->last_carrying, fp, 0, OS_CARRY, ch->pcdata->hotboot );
save.c:      if( sysdata.save_pets && ch->pcdata->pet )
save.c:         fwrite_mobile( fp, ch->pcdata->pet );
save.c:            ch->pcdata->age_bonus, ch->pcdata->day, ch->pcdata->month, ch->pcdata->year );
save.c:   fprintf( fp, "Str          %d\n", ch->pcdata->str );
save.c:   fprintf( fp, "Intel          %d\n", ch->pcdata->intel );
save.c:   fprintf( fp, "Dex         %d\n", ch->pcdata->dex );
save.c:   fprintf( fp, "Lck          %d\n", ch->pcdata->lck );
save.c:   fprintf( fp, "Def          %d\n", ch->pcdata->def );
save.c:   fprintf( fp, "Matt          %d\n", ch->pcdata->matt );
save.c:   fprintf( fp, "strplus          %d\n", ch->pcdata->strplus );
save.c:   fprintf( fp, "intplus          %d\n", ch->pcdata->intplus );
save.c:   fprintf( fp, "dexplus          %d\n", ch->pcdata->dexplus );
save.c:   fprintf( fp, "lckplus          %d\n", ch->pcdata->lckplus );
save.c:   fprintf( fp, "defplus          %d\n", ch->pcdata->defplus );
save.c:   fprintf( fp, "mattplus          %d\n", ch->pcdata->mattplus );
save.c:   fprintf( fp, "mlevel          %d\n", ch->pcdata->mlevel );
save.c:   fprintf( fp, "deflevel          %d\n", ch->pcdata->deflevel );
save.c:   fprintf( fp, "attlevel          %d\n", ch->pcdata->attlevel );
save.c:   fprintf( fp, "Favor        %d\n", ch->pcdata->favor );
save.c:   fprintf( fp, "Balance      %d\n", ch->pcdata->balance );
save.c:   fprintf( fp, "Glory        %d\n", ch->pcdata->quest_curr );
save.c:   fprintf( fp, "MGlory       %d\n", ch->pcdata->quest_accum );
save.c:   fprintf( fp, "Ap        %d\n", ch->pcdata->ap );   
save.c:   fprintf( fp, "Tier        %d\n", ch->pcdata->tier );   
save.c:   if( ch->pcdata && ch->pcdata->outcast_time )
save.c:      fprintf( fp, "Outcast_time %ld\n", ch->pcdata->outcast_time );
save.c:   if( ch->pcdata && ch->pcdata->nuisance )
save.c:      fprintf( fp, "NuisanceNew %ld %ld %d %d\n", ch->pcdata->nuisance->set_time,
save.c:               ch->pcdata->nuisance->max_time, ch->pcdata->nuisance->flags, ch->pcdata->nuisance->power );
save.c:   fprintf( fp, "Password     %s~\n", ch->pcdata->pwd );
save.c:   if( ch->pcdata->rank && ch->pcdata->rank[0] != '\0' )
save.c:      fprintf( fp, "Rank         %s~\n", ch->pcdata->rank );
save.c:   if( ch->pcdata->bestowments && ch->pcdata->bestowments[0] != '\0' )
save.c:      fprintf( fp, "Bestowments  %s~\n", ch->pcdata->bestowments );
save.c:   fprintf( fp, "Title        %s~\n", ch->pcdata->title );
save.c:   fprintf( fp, "Cpose        %s~\n", ch->pcdata->cpose );
save.c:   fprintf( fp, "Hometown        %s~\n", ch->pcdata->hometown );
save.c:   fprintf( fp, "Customclass        %s~\n", ch->pcdata->customclass );
save.c:   if( ch->pcdata->homepage && ch->pcdata->homepage[0] != '\0' )
save.c:      fprintf( fp, "Homepage     %s~\n", ch->pcdata->homepage );
save.c:   if( ch->pcdata->bio && ch->pcdata->bio[0] != '\0' )
save.c:      fprintf( fp, "Bio          %s~\n", ch->pcdata->bio );
save.c:   if( ch->pcdata->authed_by && ch->pcdata->authed_by[0] != '\0' )
save.c:      fprintf( fp, "AuthedBy     %s~\n", ch->pcdata->authed_by );
save.c:   if( ch->pcdata->min_snoop )
save.c:      fprintf( fp, "Minsnoop     %d\n", ch->pcdata->min_snoop );
save.c:   if( ch->pcdata->prompt && *ch->pcdata->prompt )
save.c:      fprintf( fp, "Prompt       %s~\n", ch->pcdata->prompt );
save.c:   if( ch->pcdata->fprompt && *ch->pcdata->fprompt )
save.c:      fprintf( fp, "FPrompt	     %s~\n", ch->pcdata->fprompt );
save.c:   if( ch->pcdata->pagerlen != 24 )
save.c:      fprintf( fp, "Pagerlen     %d\n", ch->pcdata->pagerlen );
save.c:      for( temp = ch->pcdata->first_ignored; temp; temp = temp->next )
save.c:      if( ch->pcdata->bamfin && ch->pcdata->bamfin[0] != '\0' )
save.c:         fprintf( fp, "Bamfin       %s~\n", ch->pcdata->bamfin );
save.c:      if( ch->pcdata->bamfout && ch->pcdata->bamfout[0] != '\0' )
save.c:         fprintf( fp, "Bamfout      %s~\n", ch->pcdata->bamfout );
save.c:      if( ch->pcdata && ch->pcdata->restore_time )
save.c:         fprintf( fp, "Restore_time %ld\n", ch->pcdata->restore_time );
save.c:      fprintf( fp, "WizInvis     %d\n", ch->pcdata->wizinvis );
save.c:      if( ch->pcdata->r_range_lo && ch->pcdata->r_range_hi )
save.c:         fprintf( fp, "RoomRange    %d %d\n", ch->pcdata->r_range_lo, ch->pcdata->r_range_hi );
save.c:      if( ch->pcdata->o_range_lo && ch->pcdata->o_range_hi )
save.c:         fprintf( fp, "ObjRange     %d %d\n", ch->pcdata->o_range_lo, ch->pcdata->o_range_hi );
save.c:      if( ch->pcdata->m_range_lo && ch->pcdata->m_range_hi )
save.c:         fprintf( fp, "MobRange     %d %d\n", ch->pcdata->m_range_lo, ch->pcdata->m_range_hi );
save.c:   if( ch->pcdata->council )
save.c:      fprintf( fp, "Council      %s~\n", ch->pcdata->council_name );
save.c:   if( ch->pcdata->deity_name && ch->pcdata->deity_name[0] != '\0' )
save.c:      fprintf( fp, "Deity	     %s~\n", ch->pcdata->deity_name );
save.c:   if( ch->pcdata->clan_name && ch->pcdata->clan_name[0] != '\0' )
save.c:      fprintf( fp, "Clan         %s~\n", ch->pcdata->clan_name );
save.c:   fprintf( fp, "Flags        %d\n", ch->pcdata->flags );
save.c:   if( ch->pcdata->release_date )
save.c:      fprintf( fp, "Helled       %d %s~\n", ( int )ch->pcdata->release_date, ch->pcdata->helled_by );
save.c:   fprintf( fp, "PKills       %d\n", ch->pcdata->pkills );
save.c:   fprintf( fp, "PDeaths      %d\n", ch->pcdata->pdeaths );
save.c:   fprintf( fp, "MKills       %d\n", ch->pcdata->mkills );
save.c:   fprintf( fp, "MDeaths      %d\n", ch->pcdata->mdeaths );
save.c:   fprintf( fp, "IllegalPK    %d\n", ch->pcdata->illegal_pk );
save.c:   fprintf( fp, "Timezone     %d\n", ch->pcdata->timezone );
save.c:            ch->pcdata->condition[0], ch->pcdata->condition[1], ch->pcdata->condition[2], ch->pcdata->condition[3] );
save.c:   if( ch->pcdata->recent_site )
save.c:      fprintf( fp, "Site         %s\n", ch->pcdata->recent_site );
save.c:      if( skill_table[sn]->name && ch->pcdata->learned[sn] > 0 )
save.c:               fprintf( fp, "Skill        %d '%s'\n", ch->pcdata->learned[sn], skill_table[sn]->name );
save.c:               fprintf( fp, "Ability      %d '%s'\n", ch->pcdata->learned[sn], skill_table[sn]->name );
save.c:               fprintf( fp, "Spell        %d '%s'\n", ch->pcdata->learned[sn], skill_table[sn]->name );
save.c:               fprintf( fp, "Weapon       %d '%s'\n", ch->pcdata->learned[sn], skill_table[sn]->name );
save.c:               fprintf( fp, "Tongue       %d '%s'\n", ch->pcdata->learned[sn], skill_table[sn]->name );
save.c:      if( ch->pcdata->killed[sn].vnum == 0 )
save.c:      fprintf( fp, "Killed       %d %d\n", ch->pcdata->killed[sn].vnum, ch->pcdata->killed[sn].count );
save.c:   ch->pcdata->filename = STRALLOC( name );
save.c:      ch->pcdata->recent_site = STRALLOC( d->host );
save.c:   ch->pcdata->condition[COND_THIRST] = 48;
save.c:   ch->pcdata->condition[COND_FULL] = 48;
save.c:   ch->pcdata->condition[COND_BLOODTHIRST] = 10;
save.c:   ch->pcdata->nuisance = NULL;
save.c:   ch->pcdata->wizinvis = 0;
save.c:   ch->pcdata->balance = 0;
save.c:   ch->pcdata->charmies = 0;
save.c:      ch->pcdata->learned[i] = 0;
save.c:   ch->pcdata->release_date = 0;
save.c:   ch->pcdata->helled_by = NULL;
save.c:   ch->pcdata->pagerlen = 24;
save.c:   ch->pcdata->first_ignored = NULL;   /* Ignore list */
save.c:   ch->pcdata->last_ignored = NULL;
save.c:   ch->pcdata->tell_history = NULL; /* imm only lasttell cmnd */
save.c:   ch->pcdata->lt_index = 0;  /* last tell index */
save.c:   ch->pcdata->hotboot = FALSE;  /* Never changed except when PC is saved during hotboot save */
save.c:                          preload ? "Preloading" : "Loading", ch->pcdata->filename, ( int )fst.st_size / 1024 );
save.c:               ch->pcdata->pet = mob;
save.c:      ch->pcdata->clan_name = STRALLOC( "" );
save.c:      ch->pcdata->clan = NULL;
save.c:      ch->pcdata->council_name = STRALLOC( "" );
save.c:      ch->pcdata->council = NULL;
save.c:      ch->pcdata->deity_name = STRALLOC( "" );
save.c:      ch->pcdata->deity = NULL;
save.c:      ch->pcdata->pet = NULL;
save.c:      ch->pcdata->pwd = str_dup( "" );
save.c:      ch->pcdata->bamfin = str_dup( "" );
save.c:      ch->pcdata->bamfout = str_dup( "" );
save.c:      ch->pcdata->rank = str_dup( "" );
save.c:      ch->pcdata->bestowments = str_dup( "" );
save.c:      ch->pcdata->title = STRALLOC( "" );
save.c:      ch->pcdata->customclass = STRALLOC( "" );
save.c:      ch->pcdata->homepage = str_dup( "" );
save.c:      ch->pcdata->bio = STRALLOC( "" );
save.c:      ch->pcdata->authed_by = STRALLOC( "" );
save.c:      ch->pcdata->prompt = STRALLOC( "" );
save.c:      ch->pcdata->fprompt = STRALLOC( "" );
save.c:      ch->pcdata->r_range_lo = 0;
save.c:      ch->pcdata->r_range_hi = 0;
save.c:      ch->pcdata->m_range_lo = 0;
save.c:      ch->pcdata->m_range_hi = 0;
save.c:      ch->pcdata->o_range_lo = 0;
save.c:      ch->pcdata->o_range_hi = 0;
save.c:      ch->pcdata->wizinvis = 0;
save.c:      ch->pcdata->timezone = -1;
save.c:      if( !ch->pcdata->clan_name )
save.c:         ch->pcdata->clan_name = STRALLOC( "" );
save.c:         ch->pcdata->clan = NULL;
save.c:      if( !ch->pcdata->council_name )
save.c:         ch->pcdata->council_name = STRALLOC( "" );
save.c:         ch->pcdata->council = NULL;
save.c:      if( !ch->pcdata->deity_name )
save.c:         ch->pcdata->deity_name = STRALLOC( "" );
save.c:         ch->pcdata->deity = NULL;
save.c:      if( !ch->pcdata->bio )
save.c:         ch->pcdata->bio = STRALLOC( "" );
save.c:      if( !ch->pcdata->authed_by )
save.c:         ch->pcdata->authed_by = STRALLOC( "" );
save.c:         if( ch->pcdata->wizinvis < 2 )
save.c:            ch->pcdata->wizinvis = ch->level;
save.c:   //                  KEY( "Att", ch->pcdata->att, fread_number( fp ) );
save.c:                     KEY( "Attplus", ch->pcdata->attplus, fread_number( fp ) );
save.c:                     KEY( "Attlevel", ch->pcdata->attlevel, fread_number( fp ) );
save.c:                     ch->pcdata->learned[sn] = value;
save.c:                           ch->pcdata->learned[sn] = 0;
save.c:                  ch->pcdata->age_bonus = x1;
save.c:                  ch->pcdata->day = x2;
save.c:                  ch->pcdata->month = x3;
save.c:                  ch->pcdata->year = x4;
save.c:            KEY( "Ap", ch->pcdata->ap, fread_number( fp ) );
save.c:            KEY( "AuthedBy", ch->pcdata->authed_by, fread_string( fp ) );
save.c:            KEY( "Balance", ch->pcdata->balance, fread_number( fp ) );
save.c:            KEY( "Bamfin", ch->pcdata->bamfin, fread_string_nohash( fp ) );
save.c:            KEY( "Bamfout", ch->pcdata->bamfout, fread_string_nohash( fp ) );
save.c:            KEY( "Bestowments", ch->pcdata->bestowments, fread_string_nohash( fp ) );
save.c:            KEY( "Bio", ch->pcdata->bio, fread_string( fp ) );
save.c:               ch->pcdata->clan_name = fread_string( fp );
save.c:                   && ch->pcdata->clan_name[0] != '\0' && ( ch->pcdata->clan = get_clan( ch->pcdata->clan_name ) ) == NULL )
save.c:                     ch->pcdata->clan_name );
save.c:                  STRFREE( ch->pcdata->clan_name );
save.c:                  ch->pcdata->clan_name = STRALLOC( "" );
save.c:            KEY( "Customclass", ch->pcdata->customclass, fread_string( fp ) );
save.c:               ch->pcdata->condition[0] = x1;
save.c:               ch->pcdata->condition[1] = x2;
save.c:               ch->pcdata->condition[2] = x3;
save.c:               ch->pcdata->condition[3] = x4;
save.c:               ch->pcdata->council_name = fread_string( fp );
save.c:                   && ch->pcdata->council_name[0] != '\0'
save.c:                   && ( ch->pcdata->council = get_council( ch->pcdata->council_name ) ) == NULL )
save.c:                     ch->pcdata->council_name );
save.c:                  STRFREE( ch->pcdata->council_name );
save.c:                  ch->pcdata->council_name = STRALLOC( "" );
save.c:               ch->pcdata->cpose = fread_string( fp );
save.c:               if( isalpha( ch->pcdata->cpose[0] ) || isdigit( ch->pcdata->cpose[0] ) )
save.c:                  snprintf( buf, MAX_STRING_LENGTH, " %s", ch->pcdata->cpose );
save.c:                  if( ch->pcdata->cpose )
save.c:                     STRFREE( ch->pcdata->cpose );
save.c:                  ch->pcdata->cpose = STRALLOC( buf );
save.c:                     KEY( "Dex", ch->pcdata->dex, fread_number( fp ) );
save.c:                     KEY( "Def", ch->pcdata->def, fread_number( fp ) );
save.c:                     KEY( "Dexplus", ch->pcdata->dexplus, fread_number( fp ) );
save.c:                     KEY( "Defplus", ch->pcdata->defplus, fread_number( fp ) );
save.c:                     KEY( "Deflevel", ch->pcdata->deflevel, fread_number( fp ) );
save.c:               ch->pcdata->deity_name = fread_string( fp );
save.c:                   && ch->pcdata->deity_name[0] != '\0'
save.c:                   && ( ch->pcdata->deity = get_deity( ch->pcdata->deity_name ) ) == NULL )
save.c:                  snprintf( buf, MAX_STRING_LENGTH, "&R\r\nYour deity, %s, has met its demise!\r\n", ch->pcdata->deity_name );
save.c:                  STRFREE( ch->pcdata->deity_name );
save.c:                  ch->pcdata->deity_name = STRALLOC( "" );
save.c:                  ch->pcdata->favor = 0;
save.c:            KEY( "Favor", ch->pcdata->favor, fread_number( fp ) );
save.c:            KEY( "Flags", ch->pcdata->flags, fread_number( fp ) );
save.c:            KEY( "FPrompt", ch->pcdata->fprompt, fread_string( fp ) );
save.c:            KEY( "Glory", ch->pcdata->quest_curr, fread_number( fp ) );
save.c:               ch->pcdata->clan_name = fread_string( fp );
save.c:                   && ch->pcdata->clan_name[0] != '\0' && ( ch->pcdata->clan = get_clan( ch->pcdata->clan_name ) ) == NULL )
save.c:                     ch->pcdata->clan_name );
save.c:                  STRFREE( ch->pcdata->clan_name );
save.c:                  ch->pcdata->clan_name = STRALLOC( "" );
save.c:               ch->pcdata->release_date = fread_number( fp );
save.c:               ch->pcdata->helled_by = fread_string( fp );
save.c:            KEY( "Homepage", ch->pcdata->homepage, fread_string_nohash( fp ) );
save.c:               ch->pcdata->hometown = fread_string( fp );
save.c:               if( isalpha( ch->pcdata->hometown[0] ) || isdigit( ch->pcdata->hometown[0] ) )
save.c:                  snprintf( buf, MAX_STRING_LENGTH, " %s", ch->pcdata->hometown );
save.c:                  if( ch->pcdata->hometown )
save.c:                     STRFREE( ch->pcdata->hometown );
save.c:                  ch->pcdata->hometown = STRALLOC( buf );
save.c:               for( ign = 0, inode = ch->pcdata->first_ignored; inode; inode = inode->next )
save.c:                  LINK( inode, ch->pcdata->first_ignored, ch->pcdata->last_ignored, next, prev );
save.c:            KEY( "IllegalPK", ch->pcdata->illegal_pk, fread_number( fp ) );
save.c:                   KEY( "Intel", ch->pcdata->intel, fread_number( fp ) );
save.c:                   KEY( "Intplus", ch->pcdata->intplus, fread_number( fp ) );
save.c:                  ch->pcdata->killed[killcnt].vnum = fread_number( fp );
save.c:                  ch->pcdata->killed[killcnt++].count = fread_number( fp );
save.c:                     KEY( "Lck", ch->pcdata->lck, fread_number( fp ) );
save.c:                     KEY( "Lckplus", ch->pcdata->lckplus, fread_number( fp ) );
save.c:                   KEY( "Matt", ch->pcdata->matt, fread_number( fp ) );
save.c:                   KEY( "Mattplus", ch->pcdata->mattplus, fread_number( fp ) );
save.c:                   KEY( "Mlevel", ch->pcdata->mlevel, fread_number( fp ) );
save.c:            KEY( "MDeaths", ch->pcdata->mdeaths, fread_number( fp ) );
save.c:            KEY( "MGlory", ch->pcdata->quest_accum, fread_number( fp ) );
save.c:            KEY( "Minsnoop", ch->pcdata->min_snoop, fread_number( fp ) );
save.c:            KEY( "MKills", ch->pcdata->mkills, fread_number( fp ) );
save.c:               ch->pcdata->m_range_lo = fread_number( fp );
save.c:               ch->pcdata->m_range_hi = fread_number( fp );
save.c:               CREATE( ch->pcdata->nuisance, NUISANCE_DATA, 1 );
save.c:               ch->pcdata->nuisance->set_time = fread_number( fp );
save.c:               ch->pcdata->nuisance->max_time = fread_number( fp );
save.c:               ch->pcdata->nuisance->flags = fread_number( fp );
save.c:               ch->pcdata->nuisance->power = 1;
save.c:               CREATE( ch->pcdata->nuisance, NUISANCE_DATA, 1 );
save.c:               ch->pcdata->nuisance->set_time = fread_number( fp );
save.c:               ch->pcdata->nuisance->max_time = fread_number( fp );
save.c:               ch->pcdata->nuisance->flags = fread_number( fp );
save.c:               ch->pcdata->nuisance->power = fread_number( fp );
save.c:            KEY( "Outcast_time", ch->pcdata->outcast_time, fread_number( fp ) );
save.c:               ch->pcdata->o_range_lo = fread_number( fp );
save.c:               ch->pcdata->o_range_hi = fread_number( fp );
save.c:            KEY( "Pagerlen", ch->pcdata->pagerlen, fread_number( fp ) );
save.c:            KEY( "Password", ch->pcdata->pwd, fread_string_nohash( fp ) );
save.c:            KEY( "PDeaths", ch->pcdata->pdeaths, fread_number( fp ) );
save.c:            KEY( "PKills", ch->pcdata->pkills, fread_number( fp ) );
save.c:            KEY( "Prompt", ch->pcdata->prompt, fread_string( fp ) );
save.c:            KEY( "Rank", ch->pcdata->rank, fread_string_nohash( fp ) );
save.c:            KEY( "Restore_time", ch->pcdata->restore_time, fread_number( fp ) );
save.c:               ch->pcdata->r_range_lo = fread_number( fp );
save.c:               ch->pcdata->r_range_hi = fread_number( fp );
save.c:                   KEY( "Str", ch->pcdata->str, fread_number( fp ) );
save.c:                   KEY( "Strplus", ch->pcdata->strplus, fread_number( fp ) );
save.c:                  ch->pcdata->prev_site = STRALLOC( fread_word( fp ) );
save.c:                  ch_printf( ch, "Last connected from: %s\r\n", ch->pcdata->prev_site );
save.c:                     ch->pcdata->learned[sn] = value;
save.c:                           ch->pcdata->learned[sn] = 0;
save.c:                     ch->pcdata->learned[sn] = value;
save.c:                           ch->pcdata->learned[sn] = 0;
save.c:               if( !ch->pcdata->pwd )
save.c:                  ch->pcdata->pwd = str_dup( "" );
save.c:               if( !ch->pcdata->bamfin )
save.c:                  ch->pcdata->bamfin = str_dup( "" );
save.c:               if( !ch->pcdata->bamfout )
save.c:                  ch->pcdata->bamfout = str_dup( "" );
save.c:               if( !ch->pcdata->bio )
save.c:                  ch->pcdata->bio = STRALLOC( "" );
save.c:               if( !ch->pcdata->rank )
save.c:                  ch->pcdata->rank = str_dup( "" );
save.c:               if( !ch->pcdata->bestowments )
save.c:                  ch->pcdata->bestowments = str_dup( "" );
save.c:               if( !ch->pcdata->title )
save.c:                  ch->pcdata->title = STRALLOC( "" );
save.c:               if( !ch->pcdata->customclass )
save.c:                  ch->pcdata->customclass = STRALLOC( "" );
save.c:               if( !ch->pcdata->cpose )
save.c:                  ch->pcdata->cpose = STRALLOC( "" );
save.c:               if( !ch->pcdata->hometown )
save.c:                  ch->pcdata->hometown = STRALLOC( "" );
save.c:               if( !ch->pcdata->homepage )
save.c:                  ch->pcdata->homepage = str_dup( "" );
save.c:               if( !ch->pcdata->authed_by )
save.c:                  ch->pcdata->authed_by = STRALLOC( "" );
save.c:               if( !ch->pcdata->prompt )
save.c:                  ch->pcdata->prompt = STRALLOC( "" );
save.c:               if( !ch->pcdata->fprompt )
save.c:                  ch->pcdata->fprompt = STRALLOC( "" );
save.c:                  ch->pcdata->killed[killcnt].vnum = 0;
save.c:                  CREATE( ch->pcdata->tell_history, const char *, 26 );
save.c:                     ch->pcdata->tell_history[i] = NULL;
save.c:               if( !ch->pcdata->prompt )
save.c:                  ch->pcdata->prompt = STRALLOC( "" );
save.c:               if( ch->pcdata->clan )
save.c:                     KEY( "Tier", ch->pcdata->tier, fread_number( fp ) );
save.c:                     ch->pcdata->learned[sn] = value;
save.c:                           ch->pcdata->learned[sn] = 0;
save.c:            KEY( "Timezone", ch->pcdata->timezone, fread_number( fp )); 
save.c:               ch->pcdata->title = fread_string( fp );
save.c:               if( isalpha( ch->pcdata->title[0] ) || isdigit( ch->pcdata->title[0] ) )
save.c:                  snprintf( buf, MAX_STRING_LENGTH, " %s", ch->pcdata->title );
save.c:                  if( ch->pcdata->title )
save.c:                     STRFREE( ch->pcdata->title );
save.c:                  ch->pcdata->title = STRALLOC( buf );
save.c:                     ch->pcdata->learned[sn] = value;
save.c:                           ch->pcdata->learned[sn] = 0;
save.c:            KEY( "WizInvis", ch->pcdata->wizinvis, fread_number( fp ) );
save.c:   if( IS_NPC( ch ) || !ch->pcdata->pet )
save.c:   mob = ch->pcdata->pet;
skills.c:   if( ch->pcdata->clan && ch->pcdata->clan == vch->pcdata->clan )
skills.c:         if( ch->pcdata->condition[COND_BLOODTHIRST] < blood )
skills.c:         if( ch->pcdata->condition[COND_BLOODTHIRST] < blood )
skills.c:               victim->pcdata->learned[sn] = adept;
skills.c:               victim->pcdata->learned[sn] = value;
skills.c:      victim->pcdata->learned[sn] = value;
skills.c:   if( IS_NPC( ch ) || ch->pcdata->learned[sn] <= 0 )
skills.c:   if( ch->pcdata->learned[sn] < adept )
skills.c:      schance = ch->pcdata->learned[sn] + ( 5 * skill_table[sn]->difficulty );
skills.c:      ch->pcdata->learned[sn] = UMIN( adept, ch->pcdata->learned[sn] + learn );
skills.c:      if( ch->pcdata->learned[sn] == adept ) /* fully learned! */
skills.c:   if( IS_NPC( ch ) || ch->pcdata->learned[sn] <= 0 )
skills.c:   if( ch->pcdata->learned[sn] < adept )
skills.c:      schance = ch->pcdata->learned[sn] + ( 5 * skill_table[sn]->difficulty );
skills.c:      ch->pcdata->learned[sn] = UMIN( adept, ch->pcdata->learned[sn] + learn );
skills.c:      if( ch->pcdata->learned[sn] == adept ) /* fully learned! */
skills.c:   if( IS_NPC( ch ) || ch->pcdata->learned[sn] <= 0 )
skills.c:   schance = ch->pcdata->learned[sn] + ( 5 * skill_table[sn]->difficulty );
skills.c:   if( ch->pcdata->learned[sn] < ( adept - 1 ) )
skills.c:      ch->pcdata->learned[sn] = UMIN( adept, ch->pcdata->learned[sn] + 1 );
skills.c:	    (IS_NPC(ch) ? 80 : ch->pcdata->learned[gsn_dig]) )
skills.c:   if( ch->pcdata->condition[COND_BLOODTHIRST] < 10 )
skills.c:          && ch->fighting && ch->pcdata->condition[COND_BLOODTHIRST] < ( 10 + ch->level ) )
skills.c:                               ( 10 + ch->level ) - ch->pcdata->condition[COND_BLOODTHIRST] ) );
skills.c:         if( ch->pcdata->condition[COND_FULL] <= 37 )
skills.c:          && ch->fighting && ch->pcdata->condition[COND_BLOODTHIRST] < ( 10 + ch->level ) )
skills.c:   if( IS_PKILL( ch ) && ch->pcdata->condition[COND_BLOODTHIRST] > 22 )
skills.c:   if( !IS_NPC( ch ) && ch->pcdata->clan )
skills.c:      location = get_room_index( ch->pcdata->clan->recall );
skills.c:   if( !IS_NPC( ch ) && !location && ch->level >= 5 && IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
skills.c:   if( !IS_NPC( victim ) && !IS_SET( victim->pcdata->flags, PCFLAG_GAG ) )
skills.c:   if( !IS_NPC( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_GAG ) )   /* SB */
skills.c:   if( !IS_NPC( victim ) && !IS_SET( victim->pcdata->flags, PCFLAG_GAG ) )
skills.c:   if( !IS_NPC( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_GAG ) )
skills.c:   if( !IS_NPC( victim ) && (!(victim->pcdata->learned[gsn_tumble] > 0 )))
skills.c:   if( !IS_NPC( victim ) && !IS_SET( victim->pcdata->flags, PCFLAG_GAG ) )
skills.c:   if( !IS_NPC( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_GAG ) )
skills.c:   if( !IS_NPC( ch ) && ( ( get_curr_dex( ch ) < 17 ) || ch->pcdata->condition[COND_DRUNK] > 0 ) )
skills.c:      if( ( !IS_SET( victim->pcdata->flags, PCFLAG_DEADLY )
skills.c:            || !IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
skills.c:   if( skill_table[gsn]->guild == 99 && !IS_NPC( ch ) && !IS_SET( ch->pcdata->flags, PCFLAG_DEADLY ) )
Binary file smaug matches
special.c:            if( ch->pcdata->tier < trash->tier )
track.c:   if( !IS_NPC( ch ) && ch->pcdata->learned[gsn_track] <= 0 )
update.c:   add_hp = UMAX( 1, add_hp ) + ( ch->pcdata->lck * .3 );
update.c:   add_mana = UMAX( 0, add_mana ) + ( (ch->pcdata->lck * .4) + ch->pcdata->intel );
update.c:   add_move = UMAX( 10, add_move ) + (( ch->pcdata->lck * .5 ) + ch->pcdata->dex );
update.c:   ch->pcdata->str += 1;
update.c:   ch->pcdata->intel += 1;
update.c:   ch->pcdata->dex += 1;
update.c:   ch->pcdata->lck += 1;
update.c:   ch->pcdata->def += 1;
update.c:         if( ch->pcdata->condition[COND_BLOODTHIRST] <= 1 )
update.c:         else if( ch->pcdata->condition[COND_BLOODTHIRST] >= ( 8 + ch->level ) )
update.c:      if( ch->pcdata->condition[COND_FULL] == 0 )
update.c:      if( ch->pcdata->condition[COND_THIRST] == 0 )
update.c:      if( ch->pcdata->condition[COND_FULL] == 0 )
update.c:      if( ch->pcdata->condition[COND_THIRST] == 0 )
update.c:         if( ch->pcdata->condition[COND_BLOODTHIRST] <= 1 )
update.c:         else if( ch->pcdata->condition[COND_BLOODTHIRST] >= ( 8 + ch->level ) )
update.c:      if( ch->pcdata->condition[COND_FULL] == 0 )
update.c:      if( ch->pcdata->condition[COND_THIRST] == 0 )
update.c:   condition = ch->pcdata->condition[iCond];
update.c:      ch->pcdata->condition[iCond] = URANGE( 0, condition + value, 10 + ch->level );
update.c:      ch->pcdata->condition[iCond] = URANGE( 0, condition + value, 48 );
update.c:   if( ch->pcdata->condition[iCond] == 0 )
update.c:   if( ch->pcdata->condition[iCond] == 1 )
update.c:   if( ch->pcdata->condition[iCond] == 2 )
update.c:   if( ch->pcdata->condition[iCond] == 3 )
update.c:      if( !IS_NPC( ch ) && ch->pcdata->nuisance )
update.c:         if( ch->pcdata->nuisance->flags < MAX_NUISANCE_STAGE )
update.c:            temp = ch->pcdata->nuisance->max_time - ch->pcdata->nuisance->set_time;
update.c:            temp *= ch->pcdata->nuisance->flags;
update.c:            temp += ch->pcdata->nuisance->set_time;
update.c:               ++ch->pcdata->nuisance->flags;
update.c:               SET_BIT( ch->pcdata->flags, PCFLAG_IDLE );
update.c:         if( ch->pcdata->condition[COND_DRUNK] > 8 )
update.c:            worsen_mental_state( ch, ch->pcdata->condition[COND_DRUNK] / 8 );
update.c:         if( ch->pcdata->condition[COND_FULL] > 1 )
update.c:         if( ch->pcdata->condition[COND_THIRST] > 1 )
update.c:         if( CAN_PKILL( ch ) && ch->pcdata->condition[COND_THIRST] - 9 > 10 )
update.c:         if( !IS_NPC( ch ) && ch->pcdata->nuisance )
update.c:            value = ( ( 0 - ch->pcdata->nuisance->flags ) * ch->pcdata->nuisance->power );
update.c:      if( !IS_NPC( ch ) && !IS_IMMORTAL( ch ) && ch->pcdata->release_date > 0 && ch->pcdata->release_date <= current_time )
update.c:         if( ch->pcdata->clan )
update.c:            location = get_room_index( ch->pcdata->clan->recall );
update.c:         STRFREE( ch->pcdata->helled_by );
update.c:         ch->pcdata->helled_by = NULL;
update.c:         ch->pcdata->release_date = 0;
update.c:   if( IS_NPC( ch ) || ch->pcdata->condition[COND_DRUNK] <= 0 )
update.c:   drunk = ch->pcdata->condition[COND_DRUNK];
update.c:            if( IS_SET( d->character->pcdata->flags, PCFLAG_HINTS ) && number_bits( 1 ) == 0 )
